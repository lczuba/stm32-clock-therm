
nucleo-nokia-display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000714  08008a80  08008a80  00018a80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009194  08009194  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  08009194  08009194  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009194  08009194  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009194  08009194  00019194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009198  08009198  00019198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800919c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  200001ec  08009388  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000574  08009388  00020574  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eaa1  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002370  00000000  00000000  0002ecbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c30  00000000  00000000  00031030  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b50  00000000  00000000  00031c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020d99  00000000  00000000  000327b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b8f0  00000000  00000000  00053549  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4af1  00000000  00000000  0005ee39  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012392a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c58  00000000  00000000  001239a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a68 	.word	0x08008a68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	08008a68 	.word	0x08008a68

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c6c:	f001 fad4 	bl	8002218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c70:	f000 f838 	bl	8000ce4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c74:	f000 f986 	bl	8000f84 <MX_GPIO_Init>
  MX_ADC2_Init();
 8000c78:	f000 f89c 	bl	8000db4 <MX_ADC2_Init>
  MX_USART2_UART_Init();
 8000c7c:	f000 f952 	bl	8000f24 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000c80:	f000 f8f6 	bl	8000e70 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT (&huart2, UART2_rxBuffer, 1);
 8000c84:	2201      	movs	r2, #1
 8000c86:	4913      	ldr	r1, [pc, #76]	; (8000cd4 <main+0x6c>)
 8000c88:	4813      	ldr	r0, [pc, #76]	; (8000cd8 <main+0x70>)
 8000c8a:	f004 fd6b 	bl	8005764 <HAL_UART_Receive_IT>
  HAL_ADC_Start_IT(&hadc2);		//Start ADC2
 8000c8e:	4813      	ldr	r0, [pc, #76]	; (8000cdc <main+0x74>)
 8000c90:	f001 fcf0 	bl	8002674 <HAL_ADC_Start_IT>

  //*Start Init LCD
  LCD_setRST(GPIOB, GPIO_PIN_4);
 8000c94:	2110      	movs	r1, #16
 8000c96:	4812      	ldr	r0, [pc, #72]	; (8000ce0 <main+0x78>)
 8000c98:	f000 ff72 	bl	8001b80 <LCD_setRST>
  LCD_setCE(GPIOB, GPIO_PIN_5);
 8000c9c:	2120      	movs	r1, #32
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <main+0x78>)
 8000ca0:	f000 ff82 	bl	8001ba8 <LCD_setCE>
  LCD_setDC(GPIOB, GPIO_PIN_6);
 8000ca4:	2140      	movs	r1, #64	; 0x40
 8000ca6:	480e      	ldr	r0, [pc, #56]	; (8000ce0 <main+0x78>)
 8000ca8:	f000 ff92 	bl	8001bd0 <LCD_setDC>
  LCD_setDIN(GPIOB, GPIO_PIN_8);
 8000cac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb0:	480b      	ldr	r0, [pc, #44]	; (8000ce0 <main+0x78>)
 8000cb2:	f000 ffa1 	bl	8001bf8 <LCD_setDIN>
  LCD_setCLK(GPIOB, GPIO_PIN_9);
 8000cb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cba:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <main+0x78>)
 8000cbc:	f000 ffb0 	bl	8001c20 <LCD_setCLK>
  LCD_init();
 8000cc0:	f001 f844 	bl	8001d4c <LCD_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  updateDisplay();
 8000cc4:	f000 fb78 	bl	80013b8 <updateDisplay>
	  HAL_Delay(1000);
 8000cc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ccc:	f001 fb0a 	bl	80022e4 <HAL_Delay>
  {
 8000cd0:	e7f8      	b.n	8000cc4 <main+0x5c>
 8000cd2:	bf00      	nop
 8000cd4:	20000214 	.word	0x20000214
 8000cd8:	200002c4 	.word	0x200002c4
 8000cdc:	2000023c 	.word	0x2000023c
 8000ce0:	48000400 	.word	0x48000400

08000ce4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b096      	sub	sp, #88	; 0x58
 8000ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cee:	2228      	movs	r2, #40	; 0x28
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f005 fc2d 	bl	8006552 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d08:	463b      	mov	r3, r7
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]
 8000d16:	615a      	str	r2, [r3, #20]
 8000d18:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d1a:	f002 fe8b 	bl	8003a34 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d1e:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <SystemClock_Config+0xcc>)
 8000d20:	6a1b      	ldr	r3, [r3, #32]
 8000d22:	4a23      	ldr	r2, [pc, #140]	; (8000db0 <SystemClock_Config+0xcc>)
 8000d24:	f023 0318 	bic.w	r3, r3, #24
 8000d28:	6213      	str	r3, [r2, #32]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000d2a:	2306      	movs	r3, #6
 8000d2c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d32:	2301      	movs	r3, #1
 8000d34:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d36:	2310      	movs	r3, #16
 8000d38:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d42:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000d46:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f002 fe81 	bl	8003a54 <HAL_RCC_OscConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000d58:	f000 ff0a 	bl	8001b70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d60:	2302      	movs	r3, #2
 8000d62:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d72:	f107 031c 	add.w	r3, r7, #28
 8000d76:	2102      	movs	r1, #2
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f003 fd73 	bl	8004864 <HAL_RCC_ClockConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000d84:	f000 fef4 	bl	8001b70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d8c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000d8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d92:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d94:	463b      	mov	r3, r7
 8000d96:	4618      	mov	r0, r3
 8000d98:	f003 ff9a 	bl	8004cd0 <HAL_RCCEx_PeriphCLKConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000da2:	f000 fee5 	bl	8001b70 <Error_Handler>
  }
}
 8000da6:	bf00      	nop
 8000da8:	3758      	adds	r7, #88	; 0x58
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000

08000db4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dba:	463b      	mov	r3, r7
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
 8000dc8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000dca:	4b27      	ldr	r3, [pc, #156]	; (8000e68 <MX_ADC2_Init+0xb4>)
 8000dcc:	4a27      	ldr	r2, [pc, #156]	; (8000e6c <MX_ADC2_Init+0xb8>)
 8000dce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dd0:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <MX_ADC2_Init+0xb4>)
 8000dd2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000dd6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000dd8:	4b23      	ldr	r3, [pc, #140]	; (8000e68 <MX_ADC2_Init+0xb4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dde:	4b22      	ldr	r3, [pc, #136]	; (8000e68 <MX_ADC2_Init+0xb4>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000de4:	4b20      	ldr	r3, [pc, #128]	; (8000e68 <MX_ADC2_Init+0xb4>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000dea:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <MX_ADC2_Init+0xb4>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000df2:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <MX_ADC2_Init+0xb4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000df8:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <MX_ADC2_Init+0xb4>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <MX_ADC2_Init+0xb4>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000e04:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <MX_ADC2_Init+0xb4>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e0a:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <MX_ADC2_Init+0xb4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <MX_ADC2_Init+0xb4>)
 8000e14:	2204      	movs	r2, #4
 8000e16:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e18:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <MX_ADC2_Init+0xb4>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e1e:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <MX_ADC2_Init+0xb4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e24:	4810      	ldr	r0, [pc, #64]	; (8000e68 <MX_ADC2_Init+0xb4>)
 8000e26:	f001 fa93 	bl	8002350 <HAL_ADC_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000e30:	f000 fe9e 	bl	8001b70 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e34:	2306      	movs	r3, #6
 8000e36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000e40:	2307      	movs	r3, #7
 8000e42:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4805      	ldr	r0, [pc, #20]	; (8000e68 <MX_ADC2_Init+0xb4>)
 8000e52:	f001 ff45 	bl	8002ce0 <HAL_ADC_ConfigChannel>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000e5c:	f000 fe88 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e60:	bf00      	nop
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	2000023c 	.word	0x2000023c
 8000e6c:	50000100 	.word	0x50000100

08000e70 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e84:	2300      	movs	r3, #0
 8000e86:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e88:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <MX_RTC_Init+0xac>)
 8000e8a:	4a25      	ldr	r2, [pc, #148]	; (8000f20 <MX_RTC_Init+0xb0>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e8e:	4b23      	ldr	r3, [pc, #140]	; (8000f1c <MX_RTC_Init+0xac>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e94:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <MX_RTC_Init+0xac>)
 8000e96:	227f      	movs	r2, #127	; 0x7f
 8000e98:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e9a:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <MX_RTC_Init+0xac>)
 8000e9c:	22ff      	movs	r2, #255	; 0xff
 8000e9e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ea0:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <MX_RTC_Init+0xac>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <MX_RTC_Init+0xac>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000eac:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <MX_RTC_Init+0xac>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000eb2:	481a      	ldr	r0, [pc, #104]	; (8000f1c <MX_RTC_Init+0xac>)
 8000eb4:	f004 f842 	bl	8004f3c <HAL_RTC_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000ebe:	f000 fe57 	bl	8001b70 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 23;
 8000ec2:	2317      	movs	r3, #23
 8000ec4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 59;
 8000ec6:	233b      	movs	r3, #59	; 0x3b
 8000ec8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 59;
 8000eca:	233b      	movs	r3, #59	; 0x3b
 8000ecc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	2200      	movs	r2, #0
 8000eda:	4619      	mov	r1, r3
 8000edc:	480f      	ldr	r0, [pc, #60]	; (8000f1c <MX_RTC_Init+0xac>)
 8000ede:	f004 f8be 	bl	800505e <HAL_RTC_SetTime>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000ee8:	f000 fe42 	bl	8001b70 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000eec:	2301      	movs	r3, #1
 8000eee:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8000ef0:	2312      	movs	r3, #18
 8000ef2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 31;
 8000ef4:	231f      	movs	r3, #31
 8000ef6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 20;
 8000ef8:	2314      	movs	r3, #20
 8000efa:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000efc:	463b      	mov	r3, r7
 8000efe:	2200      	movs	r2, #0
 8000f00:	4619      	mov	r1, r3
 8000f02:	4806      	ldr	r0, [pc, #24]	; (8000f1c <MX_RTC_Init+0xac>)
 8000f04:	f004 f9c6 	bl	8005294 <HAL_RTC_SetDate>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000f0e:	f000 fe2f 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200002a4 	.word	0x200002a4
 8000f20:	40002800 	.word	0x40002800

08000f24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f2a:	4a15      	ldr	r2, [pc, #84]	; (8000f80 <MX_USART2_UART_Init+0x5c>)
 8000f2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200 ;
 8000f2e:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f66:	4805      	ldr	r0, [pc, #20]	; (8000f7c <MX_USART2_UART_Init+0x58>)
 8000f68:	f004 fb1a 	bl	80055a0 <HAL_UART_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f72:	f000 fdfd 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200002c4 	.word	0x200002c4
 8000f80:	40004400 	.word	0x40004400

08000f84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9a:	4b3f      	ldr	r3, [pc, #252]	; (8001098 <MX_GPIO_Init+0x114>)
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	4a3e      	ldr	r2, [pc, #248]	; (8001098 <MX_GPIO_Init+0x114>)
 8000fa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fa4:	6153      	str	r3, [r2, #20]
 8000fa6:	4b3c      	ldr	r3, [pc, #240]	; (8001098 <MX_GPIO_Init+0x114>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fb2:	4b39      	ldr	r3, [pc, #228]	; (8001098 <MX_GPIO_Init+0x114>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	4a38      	ldr	r2, [pc, #224]	; (8001098 <MX_GPIO_Init+0x114>)
 8000fb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fbc:	6153      	str	r3, [r2, #20]
 8000fbe:	4b36      	ldr	r3, [pc, #216]	; (8001098 <MX_GPIO_Init+0x114>)
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	4b33      	ldr	r3, [pc, #204]	; (8001098 <MX_GPIO_Init+0x114>)
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	4a32      	ldr	r2, [pc, #200]	; (8001098 <MX_GPIO_Init+0x114>)
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	6153      	str	r3, [r2, #20]
 8000fd6:	4b30      	ldr	r3, [pc, #192]	; (8001098 <MX_GPIO_Init+0x114>)
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	4b2d      	ldr	r3, [pc, #180]	; (8001098 <MX_GPIO_Init+0x114>)
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	4a2c      	ldr	r2, [pc, #176]	; (8001098 <MX_GPIO_Init+0x114>)
 8000fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fec:	6153      	str	r3, [r2, #20]
 8000fee:	4b2a      	ldr	r3, [pc, #168]	; (8001098 <MX_GPIO_Init+0x114>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2120      	movs	r1, #32
 8000ffe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001002:	f002 fce7 	bl	80039d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 715c 	mov.w	r1, #880	; 0x370
 800100c:	4823      	ldr	r0, [pc, #140]	; (800109c <MX_GPIO_Init+0x118>)
 800100e:	f002 fce1 	bl	80039d4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001012:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001018:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <MX_GPIO_Init+0x11c>)
 800101a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4619      	mov	r1, r3
 8001026:	481f      	ldr	r0, [pc, #124]	; (80010a4 <MX_GPIO_Init+0x120>)
 8001028:	f002 fb62 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800102c:	2301      	movs	r3, #1
 800102e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001030:	2303      	movs	r3, #3
 8001032:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	4819      	ldr	r0, [pc, #100]	; (80010a4 <MX_GPIO_Init+0x120>)
 8001040:	f002 fb56 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001044:	2320      	movs	r3, #32
 8001046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001048:	2301      	movs	r3, #1
 800104a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105e:	f002 fb47 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
 8001062:	f44f 735c 	mov.w	r3, #880	; 0x370
 8001066:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001068:	2301      	movs	r3, #1
 800106a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	4619      	mov	r1, r3
 800107a:	4808      	ldr	r0, [pc, #32]	; (800109c <MX_GPIO_Init+0x118>)
 800107c:	f002 fb38 	bl	80036f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	2100      	movs	r1, #0
 8001084:	2028      	movs	r0, #40	; 0x28
 8001086:	f002 fa86 	bl	8003596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800108a:	2028      	movs	r0, #40	; 0x28
 800108c:	f002 fa9f 	bl	80035ce <HAL_NVIC_EnableIRQ>

}
 8001090:	bf00      	nop
 8001092:	3728      	adds	r7, #40	; 0x28
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40021000 	.word	0x40021000
 800109c:	48000400 	.word	0x48000400
 80010a0:	10110000 	.word	0x10110000
 80010a4:	48000800 	.word	0x48000800

080010a8 <calculateTemp>:

/* USER CODE BEGIN 4 */

void calculateTemp() {
 80010a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010ac:	b088      	sub	sp, #32
 80010ae:	af00      	add	r7, sp, #0
	float ADC_Max = 4095.0;
 80010b0:	4b3f      	ldr	r3, [pc, #252]	; (80011b0 <calculateTemp+0x108>)
 80010b2:	61fb      	str	r3, [r7, #28]
	float Vs = 3.3;
 80010b4:	4b3f      	ldr	r3, [pc, #252]	; (80011b4 <calculateTemp+0x10c>)
 80010b6:	61bb      	str	r3, [r7, #24]
	float R1 = 1000.0;		//Voltage divider resistance value
 80010b8:	4b3f      	ldr	r3, [pc, #252]	; (80011b8 <calculateTemp+0x110>)
 80010ba:	617b      	str	r3, [r7, #20]
	float Beta = 3950.0;	//Beta value
 80010bc:	4b3f      	ldr	r3, [pc, #252]	; (80011bc <calculateTemp+0x114>)
 80010be:	613b      	str	r3, [r7, #16]
	float To = 298.15;		//Temperature in Kelvin for 25 degree Celsius
 80010c0:	4b3f      	ldr	r3, [pc, #252]	; (80011c0 <calculateTemp+0x118>)
 80010c2:	60fb      	str	r3, [r7, #12]
	float Ro = 1000.0;		//Resistance of Thermistor at 25 degree Celsius
 80010c4:	4b3c      	ldr	r3, [pc, #240]	; (80011b8 <calculateTemp+0x110>)
 80010c6:	60bb      	str	r3, [r7, #8]
	float Vout, Rt = 0;
 80010c8:	f04f 0300 	mov.w	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]

	Vout = ADC_RES * Vs / ADC_Max;
 80010ce:	4b3d      	ldr	r3, [pc, #244]	; (80011c4 <calculateTemp+0x11c>)
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	ee07 3a90 	vmov	s15, r3
 80010d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010da:	edd7 7a06 	vldr	s15, [r7, #24]
 80010de:	ee67 6a27 	vmul.f32	s13, s14, s15
 80010e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80010e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ea:	edc7 7a00 	vstr	s15, [r7]
	Rt = R1 * Vout / (Vs - Vout);
 80010ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80010f2:	edd7 7a00 	vldr	s15, [r7]
 80010f6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80010fa:	ed97 7a06 	vldr	s14, [r7, #24]
 80010fe:	edd7 7a00 	vldr	s15, [r7]
 8001102:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800110a:	edc7 7a01 	vstr	s15, [r7, #4]
	Tc = 1/(1/To + log(Rt/Ro)/Beta) - 273.15;  // Temperature in Celsius
 800110e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001112:	edd7 7a03 	vldr	s15, [r7, #12]
 8001116:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800111a:	ee16 0a90 	vmov	r0, s13
 800111e:	f7ff fa23 	bl	8000568 <__aeabi_f2d>
 8001122:	4604      	mov	r4, r0
 8001124:	460d      	mov	r5, r1
 8001126:	ed97 7a01 	vldr	s14, [r7, #4]
 800112a:	edd7 7a02 	vldr	s15, [r7, #8]
 800112e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001132:	ee16 0a90 	vmov	r0, s13
 8001136:	f7ff fa17 	bl	8000568 <__aeabi_f2d>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	ec43 2b10 	vmov	d0, r2, r3
 8001142:	f007 fa53 	bl	80085ec <log>
 8001146:	ec59 8b10 	vmov	r8, r9, d0
 800114a:	6938      	ldr	r0, [r7, #16]
 800114c:	f7ff fa0c 	bl	8000568 <__aeabi_f2d>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4640      	mov	r0, r8
 8001156:	4649      	mov	r1, r9
 8001158:	f7ff fb88 	bl	800086c <__aeabi_ddiv>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4620      	mov	r0, r4
 8001162:	4629      	mov	r1, r5
 8001164:	f7ff f8a2 	bl	80002ac <__adddf3>
 8001168:	4603      	mov	r3, r0
 800116a:	460c      	mov	r4, r1
 800116c:	461a      	mov	r2, r3
 800116e:	4623      	mov	r3, r4
 8001170:	f04f 0000 	mov.w	r0, #0
 8001174:	4914      	ldr	r1, [pc, #80]	; (80011c8 <calculateTemp+0x120>)
 8001176:	f7ff fb79 	bl	800086c <__aeabi_ddiv>
 800117a:	4603      	mov	r3, r0
 800117c:	460c      	mov	r4, r1
 800117e:	4618      	mov	r0, r3
 8001180:	4621      	mov	r1, r4
 8001182:	a309      	add	r3, pc, #36	; (adr r3, 80011a8 <calculateTemp+0x100>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff f88e 	bl	80002a8 <__aeabi_dsub>
 800118c:	4603      	mov	r3, r0
 800118e:	460c      	mov	r4, r1
 8001190:	4618      	mov	r0, r3
 8001192:	4621      	mov	r1, r4
 8001194:	f7ff fd18 	bl	8000bc8 <__aeabi_d2f>
 8001198:	4602      	mov	r2, r0
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <calculateTemp+0x124>)
 800119c:	601a      	str	r2, [r3, #0]
}
 800119e:	bf00      	nop
 80011a0:	3720      	adds	r7, #32
 80011a2:	46bd      	mov	sp, r7
 80011a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011a8:	66666666 	.word	0x66666666
 80011ac:	40711266 	.word	0x40711266
 80011b0:	457ff000 	.word	0x457ff000
 80011b4:	40533333 	.word	0x40533333
 80011b8:	447a0000 	.word	0x447a0000
 80011bc:	4576e000 	.word	0x4576e000
 80011c0:	43951333 	.word	0x43951333
 80011c4:	20000210 	.word	0x20000210
 80011c8:	3ff00000 	.word	0x3ff00000
 80011cc:	20000208 	.word	0x20000208

080011d0 <updateDisplayTemp>:

void updateDisplayTemp() {
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
	LCD_clrScr();
 80011d6:	f000 fe4f 	bl	8001e78 <LCD_clrScr>
	LCD_print("Temperature: ", 6, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2106      	movs	r1, #6
 80011de:	483a      	ldr	r0, [pc, #232]	; (80012c8 <updateDisplayTemp+0xf8>)
 80011e0:	f000 fe2c 	bl	8001e3c <LCD_print>

	calculateTemp();
 80011e4:	f7ff ff60 	bl	80010a8 <calculateTemp>
	char temp[8];
	sprintf(temp, "%.1f", Tc);
 80011e8:	4b38      	ldr	r3, [pc, #224]	; (80012cc <updateDisplayTemp+0xfc>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f9bb 	bl	8000568 <__aeabi_f2d>
 80011f2:	4603      	mov	r3, r0
 80011f4:	460c      	mov	r4, r1
 80011f6:	4638      	mov	r0, r7
 80011f8:	461a      	mov	r2, r3
 80011fa:	4623      	mov	r3, r4
 80011fc:	4934      	ldr	r1, [pc, #208]	; (80012d0 <updateDisplayTemp+0x100>)
 80011fe:	f005 fe0d 	bl	8006e1c <siprintf>
	strcat(temp, degree);
 8001202:	463b      	mov	r3, r7
 8001204:	4933      	ldr	r1, [pc, #204]	; (80012d4 <updateDisplayTemp+0x104>)
 8001206:	4618      	mov	r0, r3
 8001208:	f005 fe28 	bl	8006e5c <strcat>
	strcat(temp, "C");
 800120c:	463b      	mov	r3, r7
 800120e:	4618      	mov	r0, r3
 8001210:	f7fe ffe8 	bl	80001e4 <strlen>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	463b      	mov	r3, r7
 800121a:	4413      	add	r3, r2
 800121c:	492e      	ldr	r1, [pc, #184]	; (80012d8 <updateDisplayTemp+0x108>)
 800121e:	461a      	mov	r2, r3
 8001220:	460b      	mov	r3, r1
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	8013      	strh	r3, [r2, #0]
	LCD_print(temp, 25, 1);
 8001226:	463b      	mov	r3, r7
 8001228:	2201      	movs	r2, #1
 800122a:	2119      	movs	r1, #25
 800122c:	4618      	mov	r0, r3
 800122e:	f000 fe05 	bl	8001e3c <LCD_print>

	LCD_print("Alarm: ", 0, 3);
 8001232:	2203      	movs	r2, #3
 8001234:	2100      	movs	r1, #0
 8001236:	4829      	ldr	r0, [pc, #164]	; (80012dc <updateDisplayTemp+0x10c>)
 8001238:	f000 fe00 	bl	8001e3c <LCD_print>
	sprintf(temp, "%.1f", temp_alarm_level);
 800123c:	4b28      	ldr	r3, [pc, #160]	; (80012e0 <updateDisplayTemp+0x110>)
 800123e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001242:	4638      	mov	r0, r7
 8001244:	461a      	mov	r2, r3
 8001246:	4623      	mov	r3, r4
 8001248:	4921      	ldr	r1, [pc, #132]	; (80012d0 <updateDisplayTemp+0x100>)
 800124a:	f005 fde7 	bl	8006e1c <siprintf>
	strcat(temp, degree);
 800124e:	463b      	mov	r3, r7
 8001250:	4920      	ldr	r1, [pc, #128]	; (80012d4 <updateDisplayTemp+0x104>)
 8001252:	4618      	mov	r0, r3
 8001254:	f005 fe02 	bl	8006e5c <strcat>
	strcat(temp, "C");
 8001258:	463b      	mov	r3, r7
 800125a:	4618      	mov	r0, r3
 800125c:	f7fe ffc2 	bl	80001e4 <strlen>
 8001260:	4603      	mov	r3, r0
 8001262:	461a      	mov	r2, r3
 8001264:	463b      	mov	r3, r7
 8001266:	4413      	add	r3, r2
 8001268:	491b      	ldr	r1, [pc, #108]	; (80012d8 <updateDisplayTemp+0x108>)
 800126a:	461a      	mov	r2, r3
 800126c:	460b      	mov	r3, r1
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	8013      	strh	r3, [r2, #0]
	LCD_print(temp, 40, 3);
 8001272:	463b      	mov	r3, r7
 8001274:	2203      	movs	r2, #3
 8001276:	2128      	movs	r1, #40	; 0x28
 8001278:	4618      	mov	r0, r3
 800127a:	f000 fddf 	bl	8001e3c <LCD_print>

	if(Tc >= temp_alarm_level) {
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <updateDisplayTemp+0xfc>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f970 	bl	8000568 <__aeabi_f2d>
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <updateDisplayTemp+0x110>)
 800128a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800128e:	461a      	mov	r2, r3
 8001290:	4623      	mov	r3, r4
 8001292:	f7ff fc47 	bl	8000b24 <__aeabi_dcmpge>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d00b      	beq.n	80012b4 <updateDisplayTemp+0xe4>
		LCD_print("!!!TOO HOT!!!", 2, 5);
 800129c:	2205      	movs	r2, #5
 800129e:	2102      	movs	r1, #2
 80012a0:	4810      	ldr	r0, [pc, #64]	; (80012e4 <updateDisplayTemp+0x114>)
 80012a2:	f000 fdcb 	bl	8001e3c <LCD_print>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80012a6:	2201      	movs	r2, #1
 80012a8:	2120      	movs	r1, #32
 80012aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ae:	f002 fb91 	bl	80039d4 <HAL_GPIO_WritePin>
	}
	else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	}
}
 80012b2:	e005      	b.n	80012c0 <updateDisplayTemp+0xf0>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2120      	movs	r1, #32
 80012b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012bc:	f002 fb8a 	bl	80039d4 <HAL_GPIO_WritePin>
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd90      	pop	{r4, r7, pc}
 80012c8:	08008a80 	.word	0x08008a80
 80012cc:	20000208 	.word	0x20000208
 80012d0:	08008a90 	.word	0x08008a90
 80012d4:	20000008 	.word	0x20000008
 80012d8:	08008a98 	.word	0x08008a98
 80012dc:	08008a9c 	.word	0x08008a9c
 80012e0:	20000000 	.word	0x20000000
 80012e4:	08008aa4 	.word	0x08008aa4

080012e8 <updateDisplayClock>:

void updateDisplayClock() {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b092      	sub	sp, #72	; 0x48
 80012ec:	af02      	add	r7, sp, #8
	LCD_clrScr();
 80012ee:	f000 fdc3 	bl	8001e78 <LCD_clrScr>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80012f2:	2200      	movs	r2, #0
 80012f4:	491a      	ldr	r1, [pc, #104]	; (8001360 <updateDisplayClock+0x78>)
 80012f6:	481b      	ldr	r0, [pc, #108]	; (8001364 <updateDisplayClock+0x7c>)
 80012f8:	f003 ff6e 	bl	80051d8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80012fc:	2200      	movs	r2, #0
 80012fe:	491a      	ldr	r1, [pc, #104]	; (8001368 <updateDisplayClock+0x80>)
 8001300:	4818      	ldr	r0, [pc, #96]	; (8001364 <updateDisplayClock+0x7c>)
 8001302:	f004 f86e 	bl	80053e2 <HAL_RTC_GetDate>

	char Message[64];
	sprintf((char*)Message, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <updateDisplayClock+0x78>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	4b14      	ldr	r3, [pc, #80]	; (8001360 <updateDisplayClock+0x78>)
 800130e:	785b      	ldrb	r3, [r3, #1]
 8001310:	4619      	mov	r1, r3
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <updateDisplayClock+0x78>)
 8001314:	789b      	ldrb	r3, [r3, #2]
 8001316:	4638      	mov	r0, r7
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	460b      	mov	r3, r1
 800131c:	4913      	ldr	r1, [pc, #76]	; (800136c <updateDisplayClock+0x84>)
 800131e:	f005 fd7d 	bl	8006e1c <siprintf>

	LCD_print(Message, 16, 1);
 8001322:	463b      	mov	r3, r7
 8001324:	2201      	movs	r2, #1
 8001326:	2110      	movs	r1, #16
 8001328:	4618      	mov	r0, r3
 800132a:	f000 fd87 	bl	8001e3c <LCD_print>
	sprintf((char*)Message, "%02d.%02d.20%02d", sDate.Date, sDate.Month, sDate.Year);
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <updateDisplayClock+0x80>)
 8001330:	789b      	ldrb	r3, [r3, #2]
 8001332:	461a      	mov	r2, r3
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <updateDisplayClock+0x80>)
 8001336:	785b      	ldrb	r3, [r3, #1]
 8001338:	4619      	mov	r1, r3
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <updateDisplayClock+0x80>)
 800133c:	78db      	ldrb	r3, [r3, #3]
 800133e:	4638      	mov	r0, r7
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	460b      	mov	r3, r1
 8001344:	490a      	ldr	r1, [pc, #40]	; (8001370 <updateDisplayClock+0x88>)
 8001346:	f005 fd69 	bl	8006e1c <siprintf>
	LCD_print(Message, 12, 3);
 800134a:	463b      	mov	r3, r7
 800134c:	2203      	movs	r2, #3
 800134e:	210c      	movs	r1, #12
 8001350:	4618      	mov	r0, r3
 8001352:	f000 fd73 	bl	8001e3c <LCD_print>
}
 8001356:	bf00      	nop
 8001358:	3740      	adds	r7, #64	; 0x40
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2000028c 	.word	0x2000028c
 8001364:	200002a4 	.word	0x200002a4
 8001368:	200002a0 	.word	0x200002a0
 800136c:	08008ab4 	.word	0x08008ab4
 8001370:	08008ac4 	.word	0x08008ac4

08001374 <updateDisplayCredits>:

void updateDisplayCredits() {
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	LCD_clrScr();
 8001378:	f000 fd7e 	bl	8001e78 <LCD_clrScr>
	LCD_print("Authors: ", 0, 1);
 800137c:	2201      	movs	r2, #1
 800137e:	2100      	movs	r1, #0
 8001380:	4809      	ldr	r0, [pc, #36]	; (80013a8 <updateDisplayCredits+0x34>)
 8001382:	f000 fd5b 	bl	8001e3c <LCD_print>
	LCD_print("Czuba Lukasz", 0, 2);
 8001386:	2202      	movs	r2, #2
 8001388:	2100      	movs	r1, #0
 800138a:	4808      	ldr	r0, [pc, #32]	; (80013ac <updateDisplayCredits+0x38>)
 800138c:	f000 fd56 	bl	8001e3c <LCD_print>
	LCD_print("Wojciech Jacoszek", 0, 3);
 8001390:	2203      	movs	r2, #3
 8001392:	2100      	movs	r1, #0
 8001394:	4806      	ldr	r0, [pc, #24]	; (80013b0 <updateDisplayCredits+0x3c>)
 8001396:	f000 fd51 	bl	8001e3c <LCD_print>
	LCD_print("Jan Krupinski", 0, 4);
 800139a:	2204      	movs	r2, #4
 800139c:	2100      	movs	r1, #0
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <updateDisplayCredits+0x40>)
 80013a0:	f000 fd4c 	bl	8001e3c <LCD_print>
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	08008ad8 	.word	0x08008ad8
 80013ac:	08008ae4 	.word	0x08008ae4
 80013b0:	08008af4 	.word	0x08008af4
 80013b4:	08008b08 	.word	0x08008b08

080013b8 <updateDisplay>:

void updateDisplay() {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	if(state == 0) updateDisplayTemp();
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <updateDisplay+0x30>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d102      	bne.n	80013ca <updateDisplay+0x12>
 80013c4:	f7ff ff04 	bl	80011d0 <updateDisplayTemp>
	else if(state == 1) updateDisplayClock();
	else if(state == 2) updateDisplayCredits();
}
 80013c8:	e00c      	b.n	80013e4 <updateDisplay+0x2c>
	else if(state == 1) updateDisplayClock();
 80013ca:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <updateDisplay+0x30>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d102      	bne.n	80013d8 <updateDisplay+0x20>
 80013d2:	f7ff ff89 	bl	80012e8 <updateDisplayClock>
}
 80013d6:	e005      	b.n	80013e4 <updateDisplay+0x2c>
	else if(state == 2) updateDisplayCredits();
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <updateDisplay+0x30>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d101      	bne.n	80013e4 <updateDisplay+0x2c>
 80013e0:	f7ff ffc8 	bl	8001374 <updateDisplayCredits>
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	2000020c 	.word	0x2000020c

080013ec <changeDisplayState>:

void changeDisplayState() {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	if(state == 2) state = 0;
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <changeDisplayState+0x28>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d103      	bne.n	8001400 <changeDisplayState+0x14>
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <changeDisplayState+0x28>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	e004      	b.n	800140a <changeDisplayState+0x1e>
	else state++;
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <changeDisplayState+0x28>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	3301      	adds	r3, #1
 8001406:	4a03      	ldr	r2, [pc, #12]	; (8001414 <changeDisplayState+0x28>)
 8001408:	6013      	str	r3, [r2, #0]

	updateDisplay();
 800140a:	f7ff ffd5 	bl	80013b8 <updateDisplay>
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2000020c 	.word	0x2000020c

08001418 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	80fb      	strh	r3, [r7, #6]
	changeDisplayState();
 8001422:	f7ff ffe3 	bl	80013ec <changeDisplayState>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc2)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
    // Read & Update The ADC Result
	ADC_RES = HAL_ADC_GetValue(hadc2);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f001 f9fb 	bl	8002834 <HAL_ADC_GetValue>
 800143e:	4603      	mov	r3, r0
 8001440:	b29a      	uxth	r2, r3
 8001442:	4b03      	ldr	r3, [pc, #12]	; (8001450 <HAL_ADC_ConvCpltCallback+0x20>)
 8001444:	801a      	strh	r2, [r3, #0]
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000210 	.word	0x20000210

08001454 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001458:	b0f8      	sub	sp, #480	; 0x1e0
 800145a:	af04      	add	r7, sp, #16
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	6018      	str	r0, [r3, #0]
	if( UART2_rxBuffer[0] == '/') {
 8001460:	4bac      	ldr	r3, [pc, #688]	; (8001714 <HAL_UART_RxCpltCallback+0x2c0>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b2f      	cmp	r3, #47	; 0x2f
 8001466:	d11d      	bne.n	80014a4 <HAL_UART_RxCpltCallback+0x50>
		for(int i = 0; i < 24; i++) UART2_rxBufferAll[i] = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800146e:	e00a      	b.n	8001486 <HAL_UART_RxCpltCallback+0x32>
 8001470:	4aa9      	ldr	r2, [pc, #676]	; (8001718 <HAL_UART_RxCpltCallback+0x2c4>)
 8001472:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001476:	4413      	add	r3, r2
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
 800147c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001480:	3301      	adds	r3, #1
 8001482:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001486:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800148a:	2b17      	cmp	r3, #23
 800148c:	ddf0      	ble.n	8001470 <HAL_UART_RxCpltCallback+0x1c>
		UART2_rxBufferAll[0] = UART2_rxBuffer[0];
 800148e:	4ba1      	ldr	r3, [pc, #644]	; (8001714 <HAL_UART_RxCpltCallback+0x2c0>)
 8001490:	781a      	ldrb	r2, [r3, #0]
 8001492:	4ba1      	ldr	r3, [pc, #644]	; (8001718 <HAL_UART_RxCpltCallback+0x2c4>)
 8001494:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, "\n", 1, 100);
 8001496:	2364      	movs	r3, #100	; 0x64
 8001498:	2201      	movs	r2, #1
 800149a:	49a0      	ldr	r1, [pc, #640]	; (800171c <HAL_UART_RxCpltCallback+0x2c8>)
 800149c:	48a0      	ldr	r0, [pc, #640]	; (8001720 <HAL_UART_RxCpltCallback+0x2cc>)
 800149e:	f004 f8cd 	bl	800563c <HAL_UART_Transmit>
 80014a2:	e345      	b.n	8001b30 <HAL_UART_RxCpltCallback+0x6dc>
	}
	else if(UART2_rxBuffer[0] == 13) { // ENTER
 80014a4:	4b9b      	ldr	r3, [pc, #620]	; (8001714 <HAL_UART_RxCpltCallback+0x2c0>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b0d      	cmp	r3, #13
 80014aa:	f040 8320 	bne.w	8001aee <HAL_UART_RxCpltCallback+0x69a>
 80014ae:	466b      	mov	r3, sp
 80014b0:	461e      	mov	r6, r3

		uint16_t command_size = sprintf(UART2_rxBufferAll, UART2_rxBufferAll);
 80014b2:	4999      	ldr	r1, [pc, #612]	; (8001718 <HAL_UART_RxCpltCallback+0x2c4>)
 80014b4:	4898      	ldr	r0, [pc, #608]	; (8001718 <HAL_UART_RxCpltCallback+0x2c4>)
 80014b6:	f005 fcb1 	bl	8006e1c <siprintf>
 80014ba:	4603      	mov	r3, r0
 80014bc:	f8a7 31be 	strh.w	r3, [r7, #446]	; 0x1be
		char command[command_size + 1];
 80014c0:	f8b7 31be 	ldrh.w	r3, [r7, #446]	; 0x1be
 80014c4:	1c58      	adds	r0, r3, #1
 80014c6:	1e43      	subs	r3, r0, #1
 80014c8:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80014cc:	4603      	mov	r3, r0
 80014ce:	4619      	mov	r1, r3
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	f04f 0300 	mov.w	r3, #0
 80014d8:	f04f 0400 	mov.w	r4, #0
 80014dc:	00d4      	lsls	r4, r2, #3
 80014de:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80014e2:	00cb      	lsls	r3, r1, #3
 80014e4:	4603      	mov	r3, r0
 80014e6:	4619      	mov	r1, r3
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	f04f 0300 	mov.w	r3, #0
 80014f0:	f04f 0400 	mov.w	r4, #0
 80014f4:	00d4      	lsls	r4, r2, #3
 80014f6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80014fa:	00cb      	lsls	r3, r1, #3
 80014fc:	4603      	mov	r3, r0
 80014fe:	3307      	adds	r3, #7
 8001500:	08db      	lsrs	r3, r3, #3
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	ebad 0d03 	sub.w	sp, sp, r3
 8001508:	ab04      	add	r3, sp, #16
 800150a:	3300      	adds	r3, #0
 800150c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

		int i = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
		while( (i < command_size) && (UART2_rxBufferAll[i] != 32) ) {
 8001516:	e010      	b.n	800153a <HAL_UART_RxCpltCallback+0xe6>
			command[i] = UART2_rxBufferAll[i];
 8001518:	4a7f      	ldr	r2, [pc, #508]	; (8001718 <HAL_UART_RxCpltCallback+0x2c4>)
 800151a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800151e:	4413      	add	r3, r2
 8001520:	7819      	ldrb	r1, [r3, #0]
 8001522:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001526:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800152a:	4413      	add	r3, r2
 800152c:	460a      	mov	r2, r1
 800152e:	701a      	strb	r2, [r3, #0]
			i++;
 8001530:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001534:	3301      	adds	r3, #1
 8001536:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
		while( (i < command_size) && (UART2_rxBufferAll[i] != 32) ) {
 800153a:	f8b7 31be 	ldrh.w	r3, [r7, #446]	; 0x1be
 800153e:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8001542:	429a      	cmp	r2, r3
 8001544:	da06      	bge.n	8001554 <HAL_UART_RxCpltCallback+0x100>
 8001546:	4a74      	ldr	r2, [pc, #464]	; (8001718 <HAL_UART_RxCpltCallback+0x2c4>)
 8001548:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800154c:	4413      	add	r3, r2
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b20      	cmp	r3, #32
 8001552:	d1e1      	bne.n	8001518 <HAL_UART_RxCpltCallback+0xc4>
		}
		command[i] = '\0';
 8001554:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001558:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800155c:	4413      	add	r3, r2
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]

		char argument[command_size];
 8001562:	f8b7 01be 	ldrh.w	r0, [r7, #446]	; 0x1be
 8001566:	466b      	mov	r3, sp
 8001568:	4698      	mov	r8, r3
 800156a:	4603      	mov	r3, r0
 800156c:	3b01      	subs	r3, #1
 800156e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8001572:	b281      	uxth	r1, r0
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	f04f 0300 	mov.w	r3, #0
 800157c:	f04f 0400 	mov.w	r4, #0
 8001580:	00d4      	lsls	r4, r2, #3
 8001582:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001586:	00cb      	lsls	r3, r1, #3
 8001588:	b281      	uxth	r1, r0
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	f04f 0300 	mov.w	r3, #0
 8001592:	f04f 0400 	mov.w	r4, #0
 8001596:	00d4      	lsls	r4, r2, #3
 8001598:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800159c:	00cb      	lsls	r3, r1, #3
 800159e:	4603      	mov	r3, r0
 80015a0:	3307      	adds	r3, #7
 80015a2:	08db      	lsrs	r3, r3, #3
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	ebad 0d03 	sub.w	sp, sp, r3
 80015aa:	ab04      	add	r3, sp, #16
 80015ac:	3300      	adds	r3, #0
 80015ae:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
		if(UART2_rxBufferAll[i] == 32) {	//if space exist
 80015b2:	4a59      	ldr	r2, [pc, #356]	; (8001718 <HAL_UART_RxCpltCallback+0x2c4>)
 80015b4:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80015b8:	4413      	add	r3, r2
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b20      	cmp	r3, #32
 80015be:	d132      	bne.n	8001626 <HAL_UART_RxCpltCallback+0x1d2>
			i++; // pass space
 80015c0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80015c4:	3301      	adds	r3, #1
 80015c6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
			uint16_t argument_size = command_size - i;
 80015ca:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	f8b7 21be 	ldrh.w	r2, [r7, #446]	; 0x1be
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
			int j = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
			while( i < command_size) {
 80015e0:	e015      	b.n	800160e <HAL_UART_RxCpltCallback+0x1ba>
				argument[j] = UART2_rxBufferAll[i];
 80015e2:	4a4d      	ldr	r2, [pc, #308]	; (8001718 <HAL_UART_RxCpltCallback+0x2c4>)
 80015e4:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80015e8:	4413      	add	r3, r2
 80015ea:	7819      	ldrb	r1, [r3, #0]
 80015ec:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80015f0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80015f4:	4413      	add	r3, r2
 80015f6:	460a      	mov	r2, r1
 80015f8:	701a      	strb	r2, [r3, #0]
				i++;
 80015fa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80015fe:	3301      	adds	r3, #1
 8001600:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
				j++;
 8001604:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001608:	3301      	adds	r3, #1
 800160a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
			while( i < command_size) {
 800160e:	f8b7 31be 	ldrh.w	r3, [r7, #446]	; 0x1be
 8001612:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8001616:	429a      	cmp	r2, r3
 8001618:	dbe3      	blt.n	80015e2 <HAL_UART_RxCpltCallback+0x18e>
			}
			argument[argument_size] = '\0';
 800161a:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 800161e:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8001622:	2100      	movs	r1, #0
 8001624:	54d1      	strb	r1, [r2, r3]
		}

		char command_help[] = "/help";
 8001626:	4a3f      	ldr	r2, [pc, #252]	; (8001724 <HAL_UART_RxCpltCallback+0x2d0>)
 8001628:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800162c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001630:	6018      	str	r0, [r3, #0]
 8001632:	3304      	adds	r3, #4
 8001634:	8019      	strh	r1, [r3, #0]
		char command_setAlarm[] = "/setAlarm";
 8001636:	4a3c      	ldr	r2, [pc, #240]	; (8001728 <HAL_UART_RxCpltCallback+0x2d4>)
 8001638:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800163c:	ca07      	ldmia	r2, {r0, r1, r2}
 800163e:	c303      	stmia	r3!, {r0, r1}
 8001640:	801a      	strh	r2, [r3, #0]
		char command_getTemp[] = "/getTemp";
 8001642:	4a3a      	ldr	r2, [pc, #232]	; (800172c <HAL_UART_RxCpltCallback+0x2d8>)
 8001644:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001648:	ca07      	ldmia	r2, {r0, r1, r2}
 800164a:	c303      	stmia	r3!, {r0, r1}
 800164c:	701a      	strb	r2, [r3, #0]
		char command_getTime[] = "/getTime";
 800164e:	4a38      	ldr	r2, [pc, #224]	; (8001730 <HAL_UART_RxCpltCallback+0x2dc>)
 8001650:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001654:	ca07      	ldmia	r2, {r0, r1, r2}
 8001656:	c303      	stmia	r3!, {r0, r1}
 8001658:	701a      	strb	r2, [r3, #0]
		char command_setTime[] = "/setTime";
 800165a:	4a36      	ldr	r2, [pc, #216]	; (8001734 <HAL_UART_RxCpltCallback+0x2e0>)
 800165c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001660:	ca07      	ldmia	r2, {r0, r1, r2}
 8001662:	c303      	stmia	r3!, {r0, r1}
 8001664:	701a      	strb	r2, [r3, #0]
		char command_setDate[] = "/setDate";
 8001666:	4a34      	ldr	r2, [pc, #208]	; (8001738 <HAL_UART_RxCpltCallback+0x2e4>)
 8001668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800166c:	ca07      	ldmia	r2, {r0, r1, r2}
 800166e:	c303      	stmia	r3!, {r0, r1}
 8001670:	701a      	strb	r2, [r3, #0]

		int menu_help = strcmp(command_help, command);
 8001672:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001676:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe fda7 	bl	80001d0 <strcmp>
 8001682:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
		int menu_setAlarm = strcmp(command_setAlarm, command);
 8001686:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800168a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800168e:	4611      	mov	r1, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe fd9d 	bl	80001d0 <strcmp>
 8001696:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
		int menu_getTemp = strcmp(command_getTemp, command);
 800169a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800169e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80016a2:	4611      	mov	r1, r2
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe fd93 	bl	80001d0 <strcmp>
 80016aa:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
		int menu_getTime = strcmp(command_getTime, command);
 80016ae:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80016b2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe fd89 	bl	80001d0 <strcmp>
 80016be:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
		int menu_setTime = strcmp(command_setTime, command);
 80016c2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80016c6:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe fd7f 	bl	80001d0 <strcmp>
 80016d2:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
		int menu_setDate = strcmp(command_setDate, command);
 80016d6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80016da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80016de:	4611      	mov	r1, r2
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe fd75 	bl	80001d0 <strcmp>
 80016e6:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190

		if(menu_help == 0) {
 80016ea:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d126      	bne.n	8001740 <HAL_UART_RxCpltCallback+0x2ec>
			char message[] = "\n/getTemp - wyswietla aktualna tempreature\n"
 80016f2:	f107 0308 	add.w	r3, r7, #8
 80016f6:	4a11      	ldr	r2, [pc, #68]	; (800173c <HAL_UART_RxCpltCallback+0x2e8>)
 80016f8:	4618      	mov	r0, r3
 80016fa:	4611      	mov	r1, r2
 80016fc:	23d5      	movs	r3, #213	; 0xd5
 80016fe:	461a      	mov	r2, r3
 8001700:	f004 ff1c 	bl	800653c <memcpy>
					"/setAlarm NN.N - ustawia granice temperatury (np. /setAlarm 30.5)\n"
					"/getTime - wyswietla aktualny czas\n"
					"/setDate DD:MM:YY - ustawia date\n"
					"/setTime HH:MM:SS - ustawia godzine";
			HAL_UART_Transmit(&huart2, message, sizeof(message), 100);
 8001704:	f107 0108 	add.w	r1, r7, #8
 8001708:	2364      	movs	r3, #100	; 0x64
 800170a:	22d5      	movs	r2, #213	; 0xd5
 800170c:	4804      	ldr	r0, [pc, #16]	; (8001720 <HAL_UART_RxCpltCallback+0x2cc>)
 800170e:	f003 ff95 	bl	800563c <HAL_UART_Transmit>
 8001712:	e1e9      	b.n	8001ae8 <HAL_UART_RxCpltCallback+0x694>
 8001714:	20000214 	.word	0x20000214
 8001718:	20000218 	.word	0x20000218
 800171c:	08008b18 	.word	0x08008b18
 8001720:	200002c4 	.word	0x200002c4
 8001724:	08008b6c 	.word	0x08008b6c
 8001728:	08008b74 	.word	0x08008b74
 800172c:	08008b80 	.word	0x08008b80
 8001730:	08008b8c 	.word	0x08008b8c
 8001734:	08008b98 	.word	0x08008b98
 8001738:	08008ba4 	.word	0x08008ba4
 800173c:	08008bb0 	.word	0x08008bb0
		}
		else if(menu_setAlarm == 0) {
 8001740:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d159      	bne.n	80017fc <HAL_UART_RxCpltCallback+0x3a8>
			temp_alarm_level = ((int)argument[0] - 48) * 10;
 8001748:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe fef2 	bl	8000544 <__aeabi_i2d>
 8001760:	4603      	mov	r3, r0
 8001762:	460c      	mov	r4, r1
 8001764:	4a99      	ldr	r2, [pc, #612]	; (80019cc <HAL_UART_RxCpltCallback+0x578>)
 8001766:	e9c2 3400 	strd	r3, r4, [r2]
			temp_alarm_level += (int)argument[1] - 48;
 800176a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800176e:	785b      	ldrb	r3, [r3, #1]
 8001770:	3b30      	subs	r3, #48	; 0x30
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe fee6 	bl	8000544 <__aeabi_i2d>
 8001778:	4b94      	ldr	r3, [pc, #592]	; (80019cc <HAL_UART_RxCpltCallback+0x578>)
 800177a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800177e:	461a      	mov	r2, r3
 8001780:	4623      	mov	r3, r4
 8001782:	f7fe fd93 	bl	80002ac <__adddf3>
 8001786:	4603      	mov	r3, r0
 8001788:	460c      	mov	r4, r1
 800178a:	4a90      	ldr	r2, [pc, #576]	; (80019cc <HAL_UART_RxCpltCallback+0x578>)
 800178c:	e9c2 3400 	strd	r3, r4, [r2]
			temp_alarm_level += ((double)argument[3] - 48) / 10.0;
 8001790:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001794:	78db      	ldrb	r3, [r3, #3]
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fec4 	bl	8000524 <__aeabi_ui2d>
 800179c:	f04f 0200 	mov.w	r2, #0
 80017a0:	4b8b      	ldr	r3, [pc, #556]	; (80019d0 <HAL_UART_RxCpltCallback+0x57c>)
 80017a2:	f7fe fd81 	bl	80002a8 <__aeabi_dsub>
 80017a6:	4603      	mov	r3, r0
 80017a8:	460c      	mov	r4, r1
 80017aa:	4618      	mov	r0, r3
 80017ac:	4621      	mov	r1, r4
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	4b88      	ldr	r3, [pc, #544]	; (80019d4 <HAL_UART_RxCpltCallback+0x580>)
 80017b4:	f7ff f85a 	bl	800086c <__aeabi_ddiv>
 80017b8:	4603      	mov	r3, r0
 80017ba:	460c      	mov	r4, r1
 80017bc:	4618      	mov	r0, r3
 80017be:	4621      	mov	r1, r4
 80017c0:	4b82      	ldr	r3, [pc, #520]	; (80019cc <HAL_UART_RxCpltCallback+0x578>)
 80017c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80017c6:	461a      	mov	r2, r3
 80017c8:	4623      	mov	r3, r4
 80017ca:	f7fe fd6f 	bl	80002ac <__adddf3>
 80017ce:	4603      	mov	r3, r0
 80017d0:	460c      	mov	r4, r1
 80017d2:	4a7e      	ldr	r2, [pc, #504]	; (80019cc <HAL_UART_RxCpltCallback+0x578>)
 80017d4:	e9c2 3400 	strd	r3, r4, [r2]

			char message[] = "\nUstawiono alarm temperatury";
 80017d8:	4b7f      	ldr	r3, [pc, #508]	; (80019d8 <HAL_UART_RxCpltCallback+0x584>)
 80017da:	f507 7488 	add.w	r4, r7, #272	; 0x110
 80017de:	461d      	mov	r5, r3
 80017e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80017e8:	c407      	stmia	r4!, {r0, r1, r2}
 80017ea:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, message, sizeof(message), 100);
 80017ec:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80017f0:	2364      	movs	r3, #100	; 0x64
 80017f2:	221d      	movs	r2, #29
 80017f4:	4879      	ldr	r0, [pc, #484]	; (80019dc <HAL_UART_RxCpltCallback+0x588>)
 80017f6:	f003 ff21 	bl	800563c <HAL_UART_Transmit>
 80017fa:	e175      	b.n	8001ae8 <HAL_UART_RxCpltCallback+0x694>
		}
		else if(menu_getTemp == 0) {
 80017fc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001800:	2b00      	cmp	r3, #0
 8001802:	d13a      	bne.n	800187a <HAL_UART_RxCpltCallback+0x426>
			calculateTemp();
 8001804:	f7ff fc50 	bl	80010a8 <calculateTemp>
			char temp[8];
			sprintf(temp, "%.1f", Tc);
 8001808:	4b75      	ldr	r3, [pc, #468]	; (80019e0 <HAL_UART_RxCpltCallback+0x58c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe feab 	bl	8000568 <__aeabi_f2d>
 8001812:	4603      	mov	r3, r0
 8001814:	460c      	mov	r4, r1
 8001816:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800181a:	461a      	mov	r2, r3
 800181c:	4623      	mov	r3, r4
 800181e:	4971      	ldr	r1, [pc, #452]	; (80019e4 <HAL_UART_RxCpltCallback+0x590>)
 8001820:	f005 fafc 	bl	8006e1c <siprintf>
			strcat(temp, " C");
 8001824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fcdb 	bl	80001e4 <strlen>
 800182e:	4603      	mov	r3, r0
 8001830:	461a      	mov	r2, r3
 8001832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001836:	4413      	add	r3, r2
 8001838:	4a6b      	ldr	r2, [pc, #428]	; (80019e8 <HAL_UART_RxCpltCallback+0x594>)
 800183a:	8811      	ldrh	r1, [r2, #0]
 800183c:	7892      	ldrb	r2, [r2, #2]
 800183e:	8019      	strh	r1, [r3, #0]
 8001840:	709a      	strb	r2, [r3, #2]

			char message[32];
			sprintf(message, "\nAktualna temperatura: %s", temp);
 8001842:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001846:	f107 0308 	add.w	r3, r7, #8
 800184a:	4968      	ldr	r1, [pc, #416]	; (80019ec <HAL_UART_RxCpltCallback+0x598>)
 800184c:	4618      	mov	r0, r3
 800184e:	f005 fae5 	bl	8006e1c <siprintf>
			uint16_t size = sprintf(message, message);
 8001852:	f107 0208 	add.w	r2, r7, #8
 8001856:	f107 0308 	add.w	r3, r7, #8
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f005 fadd 	bl	8006e1c <siprintf>
 8001862:	4603      	mov	r3, r0
 8001864:	f8a7 3172 	strh.w	r3, [r7, #370]	; 0x172
			HAL_UART_Transmit(&huart2, message, size, 100);
 8001868:	f8b7 2172 	ldrh.w	r2, [r7, #370]	; 0x172
 800186c:	f107 0108 	add.w	r1, r7, #8
 8001870:	2364      	movs	r3, #100	; 0x64
 8001872:	485a      	ldr	r0, [pc, #360]	; (80019dc <HAL_UART_RxCpltCallback+0x588>)
 8001874:	f003 fee2 	bl	800563c <HAL_UART_Transmit>
 8001878:	e136      	b.n	8001ae8 <HAL_UART_RxCpltCallback+0x694>
		}
		else if(menu_getTime == 0) {
 800187a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800187e:	2b00      	cmp	r3, #0
 8001880:	d131      	bne.n	80018e6 <HAL_UART_RxCpltCallback+0x492>
			HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001882:	2200      	movs	r2, #0
 8001884:	495a      	ldr	r1, [pc, #360]	; (80019f0 <HAL_UART_RxCpltCallback+0x59c>)
 8001886:	485b      	ldr	r0, [pc, #364]	; (80019f4 <HAL_UART_RxCpltCallback+0x5a0>)
 8001888:	f003 fca6 	bl	80051d8 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800188c:	2200      	movs	r2, #0
 800188e:	495a      	ldr	r1, [pc, #360]	; (80019f8 <HAL_UART_RxCpltCallback+0x5a4>)
 8001890:	4858      	ldr	r0, [pc, #352]	; (80019f4 <HAL_UART_RxCpltCallback+0x5a0>)
 8001892:	f003 fda6 	bl	80053e2 <HAL_RTC_GetDate>

			char Message[124];
			int MessageLen = sprintf((char*)Message, "\nDate: %02d.%02d.20%02d Time: %02d:%02d:%02d\n\r", sDate.Date, sDate.Month, sDate.Year, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001896:	4b58      	ldr	r3, [pc, #352]	; (80019f8 <HAL_UART_RxCpltCallback+0x5a4>)
 8001898:	789b      	ldrb	r3, [r3, #2]
 800189a:	461d      	mov	r5, r3
 800189c:	4b56      	ldr	r3, [pc, #344]	; (80019f8 <HAL_UART_RxCpltCallback+0x5a4>)
 800189e:	785b      	ldrb	r3, [r3, #1]
 80018a0:	469c      	mov	ip, r3
 80018a2:	4b55      	ldr	r3, [pc, #340]	; (80019f8 <HAL_UART_RxCpltCallback+0x5a4>)
 80018a4:	78db      	ldrb	r3, [r3, #3]
 80018a6:	461a      	mov	r2, r3
 80018a8:	4b51      	ldr	r3, [pc, #324]	; (80019f0 <HAL_UART_RxCpltCallback+0x59c>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	4619      	mov	r1, r3
 80018ae:	4b50      	ldr	r3, [pc, #320]	; (80019f0 <HAL_UART_RxCpltCallback+0x59c>)
 80018b0:	785b      	ldrb	r3, [r3, #1]
 80018b2:	461c      	mov	r4, r3
 80018b4:	4b4e      	ldr	r3, [pc, #312]	; (80019f0 <HAL_UART_RxCpltCallback+0x59c>)
 80018b6:	789b      	ldrb	r3, [r3, #2]
 80018b8:	f107 0008 	add.w	r0, r7, #8
 80018bc:	9303      	str	r3, [sp, #12]
 80018be:	9402      	str	r4, [sp, #8]
 80018c0:	9101      	str	r1, [sp, #4]
 80018c2:	9200      	str	r2, [sp, #0]
 80018c4:	4663      	mov	r3, ip
 80018c6:	462a      	mov	r2, r5
 80018c8:	494c      	ldr	r1, [pc, #304]	; (80019fc <HAL_UART_RxCpltCallback+0x5a8>)
 80018ca:	f005 faa7 	bl	8006e1c <siprintf>
 80018ce:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
			HAL_UART_Transmit(&huart2, Message, MessageLen, 100);
 80018d2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	f107 0108 	add.w	r1, r7, #8
 80018dc:	2364      	movs	r3, #100	; 0x64
 80018de:	483f      	ldr	r0, [pc, #252]	; (80019dc <HAL_UART_RxCpltCallback+0x588>)
 80018e0:	f003 feac 	bl	800563c <HAL_UART_Transmit>
 80018e4:	e100      	b.n	8001ae8 <HAL_UART_RxCpltCallback+0x694>

		}
		else if(menu_setTime == 0) {
 80018e6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f040 808c 	bne.w	8001a08 <HAL_UART_RxCpltCallback+0x5b4>
			int time_h = ((int)argument[0] - 48) * 10 + (int)argument[1] - 48;
 80018f0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	461a      	mov	r2, r3
 8001904:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001908:	785b      	ldrb	r3, [r3, #1]
 800190a:	4413      	add	r3, r2
 800190c:	3b30      	subs	r3, #48	; 0x30
 800190e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
			sTime.Hours = time_h;
 8001912:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001916:	b2da      	uxtb	r2, r3
 8001918:	4b35      	ldr	r3, [pc, #212]	; (80019f0 <HAL_UART_RxCpltCallback+0x59c>)
 800191a:	701a      	strb	r2, [r3, #0]

			int time_m = ((int)argument[3] - 48) * 10 + (int)argument[4] - 48;
 800191c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001920:	78db      	ldrb	r3, [r3, #3]
 8001922:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	461a      	mov	r2, r3
 8001930:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001934:	791b      	ldrb	r3, [r3, #4]
 8001936:	4413      	add	r3, r2
 8001938:	3b30      	subs	r3, #48	; 0x30
 800193a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
			sTime.Minutes = time_m;
 800193e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001942:	b2da      	uxtb	r2, r3
 8001944:	4b2a      	ldr	r3, [pc, #168]	; (80019f0 <HAL_UART_RxCpltCallback+0x59c>)
 8001946:	705a      	strb	r2, [r3, #1]

			int time_s = ((int)argument[6] - 48) * 10 + (int)argument[7] - 48;
 8001948:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800194c:	799b      	ldrb	r3, [r3, #6]
 800194e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001952:	4613      	mov	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	461a      	mov	r2, r3
 800195c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001960:	79db      	ldrb	r3, [r3, #7]
 8001962:	4413      	add	r3, r2
 8001964:	3b30      	subs	r3, #48	; 0x30
 8001966:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
			sTime.Seconds = time_s;
 800196a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800196e:	b2da      	uxtb	r2, r3
 8001970:	4b1f      	ldr	r3, [pc, #124]	; (80019f0 <HAL_UART_RxCpltCallback+0x59c>)
 8001972:	709a      	strb	r2, [r3, #2]

			if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8001974:	2200      	movs	r2, #0
 8001976:	491e      	ldr	r1, [pc, #120]	; (80019f0 <HAL_UART_RxCpltCallback+0x59c>)
 8001978:	481e      	ldr	r0, [pc, #120]	; (80019f4 <HAL_UART_RxCpltCallback+0x5a0>)
 800197a:	f003 fb70 	bl	800505e <HAL_RTC_SetTime>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d014      	beq.n	80019ae <HAL_UART_RxCpltCallback+0x55a>
				char message[] = "\nError";
 8001984:	4a1e      	ldr	r2, [pc, #120]	; (8001a00 <HAL_UART_RxCpltCallback+0x5ac>)
 8001986:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800198a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800198e:	6018      	str	r0, [r3, #0]
 8001990:	3304      	adds	r3, #4
 8001992:	8019      	strh	r1, [r3, #0]
 8001994:	3302      	adds	r3, #2
 8001996:	0c0a      	lsrs	r2, r1, #16
 8001998:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, message, sizeof(message), 100);
 800199a:	f507 7180 	add.w	r1, r7, #256	; 0x100
 800199e:	2364      	movs	r3, #100	; 0x64
 80019a0:	2207      	movs	r2, #7
 80019a2:	480e      	ldr	r0, [pc, #56]	; (80019dc <HAL_UART_RxCpltCallback+0x588>)
 80019a4:	f003 fe4a 	bl	800563c <HAL_UART_Transmit>
				Error_Handler();
 80019a8:	f000 f8e2 	bl	8001b70 <Error_Handler>
 80019ac:	e09c      	b.n	8001ae8 <HAL_UART_RxCpltCallback+0x694>
			}
			else {
				char message[] = "\nSuccess";
 80019ae:	4a15      	ldr	r2, [pc, #84]	; (8001a04 <HAL_UART_RxCpltCallback+0x5b0>)
 80019b0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80019b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80019b6:	c303      	stmia	r3!, {r0, r1}
 80019b8:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, message, sizeof(message), 100);
 80019ba:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 80019be:	2364      	movs	r3, #100	; 0x64
 80019c0:	2209      	movs	r2, #9
 80019c2:	4806      	ldr	r0, [pc, #24]	; (80019dc <HAL_UART_RxCpltCallback+0x588>)
 80019c4:	f003 fe3a 	bl	800563c <HAL_UART_Transmit>
 80019c8:	e08e      	b.n	8001ae8 <HAL_UART_RxCpltCallback+0x694>
 80019ca:	bf00      	nop
 80019cc:	20000000 	.word	0x20000000
 80019d0:	40480000 	.word	0x40480000
 80019d4:	40240000 	.word	0x40240000
 80019d8:	08008c88 	.word	0x08008c88
 80019dc:	200002c4 	.word	0x200002c4
 80019e0:	20000208 	.word	0x20000208
 80019e4:	08008a90 	.word	0x08008a90
 80019e8:	08008b1c 	.word	0x08008b1c
 80019ec:	08008b20 	.word	0x08008b20
 80019f0:	2000028c 	.word	0x2000028c
 80019f4:	200002a4 	.word	0x200002a4
 80019f8:	200002a0 	.word	0x200002a0
 80019fc:	08008b3c 	.word	0x08008b3c
 8001a00:	08008ca8 	.word	0x08008ca8
 8001a04:	08008cb0 	.word	0x08008cb0
			}
		}
		else if(menu_setDate == 0) {
 8001a08:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d16b      	bne.n	8001ae8 <HAL_UART_RxCpltCallback+0x694>
					int date_d = ((int)argument[0] - 48) * 10 + (int)argument[1] - 48;
 8001a10:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	461a      	mov	r2, r3
 8001a24:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001a28:	785b      	ldrb	r3, [r3, #1]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3b30      	subs	r3, #48	; 0x30
 8001a2e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
					sDate.Date = date_d;
 8001a32:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	4b46      	ldr	r3, [pc, #280]	; (8001b54 <HAL_UART_RxCpltCallback+0x700>)
 8001a3a:	709a      	strb	r2, [r3, #2]

					int date_m = ((int)argument[3] - 48) * 10 + (int)argument[4] - 48;
 8001a3c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001a40:	78db      	ldrb	r3, [r3, #3]
 8001a42:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	461a      	mov	r2, r3
 8001a50:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001a54:	791b      	ldrb	r3, [r3, #4]
 8001a56:	4413      	add	r3, r2
 8001a58:	3b30      	subs	r3, #48	; 0x30
 8001a5a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
					sDate.Month = (uint8_t)date_m;
 8001a5e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	4b3b      	ldr	r3, [pc, #236]	; (8001b54 <HAL_UART_RxCpltCallback+0x700>)
 8001a66:	705a      	strb	r2, [r3, #1]

					int date_y = ((int)argument[6] - 48) * 10 + (int)argument[7] - 48;
 8001a68:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001a6c:	799b      	ldrb	r3, [r3, #6]
 8001a6e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001a80:	79db      	ldrb	r3, [r3, #7]
 8001a82:	4413      	add	r3, r2
 8001a84:	3b30      	subs	r3, #48	; 0x30
 8001a86:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
					sDate.Year = date_y;
 8001a8a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	4b30      	ldr	r3, [pc, #192]	; (8001b54 <HAL_UART_RxCpltCallback+0x700>)
 8001a92:	70da      	strb	r2, [r3, #3]

					if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8001a94:	2200      	movs	r2, #0
 8001a96:	492f      	ldr	r1, [pc, #188]	; (8001b54 <HAL_UART_RxCpltCallback+0x700>)
 8001a98:	482f      	ldr	r0, [pc, #188]	; (8001b58 <HAL_UART_RxCpltCallback+0x704>)
 8001a9a:	f003 fbfb 	bl	8005294 <HAL_RTC_SetDate>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d014      	beq.n	8001ace <HAL_UART_RxCpltCallback+0x67a>
						char message[] = "\nError";
 8001aa4:	4a2d      	ldr	r2, [pc, #180]	; (8001b5c <HAL_UART_RxCpltCallback+0x708>)
 8001aa6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001aaa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aae:	6018      	str	r0, [r3, #0]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	8019      	strh	r1, [r3, #0]
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	0c0a      	lsrs	r2, r1, #16
 8001ab8:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart2, message, sizeof(message), 100);
 8001aba:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8001abe:	2364      	movs	r3, #100	; 0x64
 8001ac0:	2207      	movs	r2, #7
 8001ac2:	4827      	ldr	r0, [pc, #156]	; (8001b60 <HAL_UART_RxCpltCallback+0x70c>)
 8001ac4:	f003 fdba 	bl	800563c <HAL_UART_Transmit>
						Error_Handler();
 8001ac8:	f000 f852 	bl	8001b70 <Error_Handler>
 8001acc:	e00c      	b.n	8001ae8 <HAL_UART_RxCpltCallback+0x694>
					}
					else {
						char message[] = "\nSuccess";
 8001ace:	4a25      	ldr	r2, [pc, #148]	; (8001b64 <HAL_UART_RxCpltCallback+0x710>)
 8001ad0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001ad4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ad6:	c303      	stmia	r3!, {r0, r1}
 8001ad8:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart2, message, sizeof(message), 100);
 8001ada:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8001ade:	2364      	movs	r3, #100	; 0x64
 8001ae0:	2209      	movs	r2, #9
 8001ae2:	481f      	ldr	r0, [pc, #124]	; (8001b60 <HAL_UART_RxCpltCallback+0x70c>)
 8001ae4:	f003 fdaa 	bl	800563c <HAL_UART_Transmit>
 8001ae8:	46c5      	mov	sp, r8
 8001aea:	46b5      	mov	sp, r6
 8001aec:	e020      	b.n	8001b30 <HAL_UART_RxCpltCallback+0x6dc>
					}

				}

	}
	else if(UART2_rxBufferAll[0] == '/') {
 8001aee:	4b1e      	ldr	r3, [pc, #120]	; (8001b68 <HAL_UART_RxCpltCallback+0x714>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b2f      	cmp	r3, #47	; 0x2f
 8001af4:	d11c      	bne.n	8001b30 <HAL_UART_RxCpltCallback+0x6dc>
		for(int i = 0; i < 24; i++) {
 8001af6:	2300      	movs	r3, #0
 8001af8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8001afc:	e014      	b.n	8001b28 <HAL_UART_RxCpltCallback+0x6d4>
			if(UART2_rxBufferAll[i] == 0) {
 8001afe:	4a1a      	ldr	r2, [pc, #104]	; (8001b68 <HAL_UART_RxCpltCallback+0x714>)
 8001b00:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001b04:	4413      	add	r3, r2
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d108      	bne.n	8001b1e <HAL_UART_RxCpltCallback+0x6ca>
				UART2_rxBufferAll[i] = UART2_rxBuffer[0];
 8001b0c:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <HAL_UART_RxCpltCallback+0x718>)
 8001b0e:	7819      	ldrb	r1, [r3, #0]
 8001b10:	4a15      	ldr	r2, [pc, #84]	; (8001b68 <HAL_UART_RxCpltCallback+0x714>)
 8001b12:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001b16:	4413      	add	r3, r2
 8001b18:	460a      	mov	r2, r1
 8001b1a:	701a      	strb	r2, [r3, #0]
				break;
 8001b1c:	e008      	b.n	8001b30 <HAL_UART_RxCpltCallback+0x6dc>
		for(int i = 0; i < 24; i++) {
 8001b1e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001b22:	3301      	adds	r3, #1
 8001b24:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8001b28:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001b2c:	2b17      	cmp	r3, #23
 8001b2e:	dde6      	ble.n	8001afe <HAL_UART_RxCpltCallback+0x6aa>
			}
		}
	}

	HAL_UART_Transmit(&huart2, UART2_rxBuffer, 1, 100);
 8001b30:	2364      	movs	r3, #100	; 0x64
 8001b32:	2201      	movs	r2, #1
 8001b34:	490d      	ldr	r1, [pc, #52]	; (8001b6c <HAL_UART_RxCpltCallback+0x718>)
 8001b36:	480a      	ldr	r0, [pc, #40]	; (8001b60 <HAL_UART_RxCpltCallback+0x70c>)
 8001b38:	f003 fd80 	bl	800563c <HAL_UART_Transmit>
    HAL_UART_Receive_IT(&huart2, UART2_rxBuffer, 1);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	490b      	ldr	r1, [pc, #44]	; (8001b6c <HAL_UART_RxCpltCallback+0x718>)
 8001b40:	4807      	ldr	r0, [pc, #28]	; (8001b60 <HAL_UART_RxCpltCallback+0x70c>)
 8001b42:	f003 fe0f 	bl	8005764 <HAL_UART_Receive_IT>
}
 8001b46:	bf00      	nop
 8001b48:	f507 77e8 	add.w	r7, r7, #464	; 0x1d0
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b52:	bf00      	nop
 8001b54:	200002a0 	.word	0x200002a0
 8001b58:	200002a4 	.word	0x200002a4
 8001b5c:	08008ca8 	.word	0x08008ca8
 8001b60:	200002c4 	.word	0x200002c4
 8001b64:	08008cb0 	.word	0x08008cb0
 8001b68:	20000218 	.word	0x20000218
 8001b6c:	20000214 	.word	0x20000214

08001b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <LCD_setRST>:
/*
 * @brief Set functions for GPIO pins used
 * @param PORT: port of the pin used
 * @param PIN: pin of the pin used
 */
void LCD_setRST(GPIO_TypeDef* PORT, uint16_t PIN){
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	807b      	strh	r3, [r7, #2]
	lcd_gpio.RSTPORT = PORT;
 8001b8c:	4a05      	ldr	r2, [pc, #20]	; (8001ba4 <LCD_setRST+0x24>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6013      	str	r3, [r2, #0]
	lcd_gpio.RSTPIN = PIN;
 8001b92:	4a04      	ldr	r2, [pc, #16]	; (8001ba4 <LCD_setRST+0x24>)
 8001b94:	887b      	ldrh	r3, [r7, #2]
 8001b96:	8093      	strh	r3, [r2, #4]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	20000348 	.word	0x20000348

08001ba8 <LCD_setCE>:

void LCD_setCE(GPIO_TypeDef* PORT, uint16_t PIN){
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CEPORT = PORT;
 8001bb4:	4a05      	ldr	r2, [pc, #20]	; (8001bcc <LCD_setCE+0x24>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6093      	str	r3, [r2, #8]
	lcd_gpio.CEPIN = PIN;
 8001bba:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <LCD_setCE+0x24>)
 8001bbc:	887b      	ldrh	r3, [r7, #2]
 8001bbe:	8193      	strh	r3, [r2, #12]
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	20000348 	.word	0x20000348

08001bd0 <LCD_setDC>:

void LCD_setDC(GPIO_TypeDef* PORT, uint16_t PIN){
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DCPORT = PORT;
 8001bdc:	4a05      	ldr	r2, [pc, #20]	; (8001bf4 <LCD_setDC+0x24>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6113      	str	r3, [r2, #16]
	lcd_gpio.DCPIN = PIN;
 8001be2:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <LCD_setDC+0x24>)
 8001be4:	887b      	ldrh	r3, [r7, #2]
 8001be6:	8293      	strh	r3, [r2, #20]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	20000348 	.word	0x20000348

08001bf8 <LCD_setDIN>:
void LCD_setDIN(GPIO_TypeDef* PORT, uint16_t PIN){
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DINPORT = PORT;
 8001c04:	4a05      	ldr	r2, [pc, #20]	; (8001c1c <LCD_setDIN+0x24>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6193      	str	r3, [r2, #24]
	lcd_gpio.DINPIN = PIN;
 8001c0a:	4a04      	ldr	r2, [pc, #16]	; (8001c1c <LCD_setDIN+0x24>)
 8001c0c:	887b      	ldrh	r3, [r7, #2]
 8001c0e:	8393      	strh	r3, [r2, #28]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	20000348 	.word	0x20000348

08001c20 <LCD_setCLK>:

void LCD_setCLK(GPIO_TypeDef* PORT, uint16_t PIN){
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CLKPORT = PORT;
 8001c2c:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <LCD_setCLK+0x24>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6213      	str	r3, [r2, #32]
	lcd_gpio.CLKPIN = PIN;
 8001c32:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <LCD_setCLK+0x24>)
 8001c34:	887b      	ldrh	r3, [r7, #2]
 8001c36:	8493      	strh	r3, [r2, #36]	; 0x24
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	20000348 	.word	0x20000348

08001c48 <LCD_send>:

/*
 * @brief Send information to the LCD using configured GPIOs
 * @param val: value to be sent
 */
void LCD_send(uint8_t val){
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
  uint8_t i;

  for(i = 0; i < 8; i++){
 8001c52:	2300      	movs	r3, #0
 8001c54:	73fb      	strb	r3, [r7, #15]
 8001c56:	e026      	b.n	8001ca6 <LCD_send+0x5e>
    HAL_GPIO_WritePin(lcd_gpio.DINPORT, lcd_gpio.DINPIN, !!(val & (1 << (7 - i))));
 8001c58:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <LCD_send+0x6c>)
 8001c5a:	6998      	ldr	r0, [r3, #24]
 8001c5c:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <LCD_send+0x6c>)
 8001c5e:	8b99      	ldrh	r1, [r3, #28]
 8001c60:	79fa      	ldrb	r2, [r7, #7]
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
 8001c64:	f1c3 0307 	rsb	r3, r3, #7
 8001c68:	fa42 f303 	asr.w	r3, r2, r3
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	bf14      	ite	ne
 8001c74:	2301      	movne	r3, #1
 8001c76:	2300      	moveq	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	f001 feaa 	bl	80039d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_SET);
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <LCD_send+0x6c>)
 8001c82:	6a18      	ldr	r0, [r3, #32]
 8001c84:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <LCD_send+0x6c>)
 8001c86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001c88:	2201      	movs	r2, #1
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f001 fea2 	bl	80039d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_RESET);
 8001c90:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <LCD_send+0x6c>)
 8001c92:	6a18      	ldr	r0, [r3, #32]
 8001c94:	4b07      	ldr	r3, [pc, #28]	; (8001cb4 <LCD_send+0x6c>)
 8001c96:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001c98:	2200      	movs	r2, #0
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f001 fe9a 	bl	80039d4 <HAL_GPIO_WritePin>
  for(i = 0; i < 8; i++){
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	73fb      	strb	r3, [r7, #15]
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
 8001ca8:	2b07      	cmp	r3, #7
 8001caa:	d9d5      	bls.n	8001c58 <LCD_send+0x10>
  }
}
 8001cac:	bf00      	nop
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000348 	.word	0x20000348

08001cb8 <LCD_write>:
/*
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write(uint8_t data, uint8_t mode){
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	460a      	mov	r2, r1
 8001cc2:	71fb      	strb	r3, [r7, #7]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	71bb      	strb	r3, [r7, #6]
  if(mode == LCD_COMMAND){
 8001cc8:	79bb      	ldrb	r3, [r7, #6]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d11c      	bne.n	8001d08 <LCD_write+0x50>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_RESET);
 8001cce:	4b1e      	ldr	r3, [pc, #120]	; (8001d48 <LCD_write+0x90>)
 8001cd0:	6918      	ldr	r0, [r3, #16]
 8001cd2:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <LCD_write+0x90>)
 8001cd4:	8a9b      	ldrh	r3, [r3, #20]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f001 fe7b 	bl	80039d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8001cde:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <LCD_write+0x90>)
 8001ce0:	6898      	ldr	r0, [r3, #8]
 8001ce2:	4b19      	ldr	r3, [pc, #100]	; (8001d48 <LCD_write+0x90>)
 8001ce4:	899b      	ldrh	r3, [r3, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f001 fe73 	bl	80039d4 <HAL_GPIO_WritePin>
    LCD_send(data);
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ffa9 	bl	8001c48 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8001cf6:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <LCD_write+0x90>)
 8001cf8:	6898      	ldr	r0, [r3, #8]
 8001cfa:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <LCD_write+0x90>)
 8001cfc:	899b      	ldrh	r3, [r3, #12]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	4619      	mov	r1, r3
 8001d02:	f001 fe67 	bl	80039d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
    LCD_send(data);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
  }
}
 8001d06:	e01b      	b.n	8001d40 <LCD_write+0x88>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
 8001d08:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <LCD_write+0x90>)
 8001d0a:	6918      	ldr	r0, [r3, #16]
 8001d0c:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <LCD_write+0x90>)
 8001d0e:	8a9b      	ldrh	r3, [r3, #20]
 8001d10:	2201      	movs	r2, #1
 8001d12:	4619      	mov	r1, r3
 8001d14:	f001 fe5e 	bl	80039d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8001d18:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <LCD_write+0x90>)
 8001d1a:	6898      	ldr	r0, [r3, #8]
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <LCD_write+0x90>)
 8001d1e:	899b      	ldrh	r3, [r3, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	4619      	mov	r1, r3
 8001d24:	f001 fe56 	bl	80039d4 <HAL_GPIO_WritePin>
    LCD_send(data);
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff ff8c 	bl	8001c48 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8001d30:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <LCD_write+0x90>)
 8001d32:	6898      	ldr	r0, [r3, #8]
 8001d34:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <LCD_write+0x90>)
 8001d36:	899b      	ldrh	r3, [r3, #12]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f001 fe4a 	bl	80039d4 <HAL_GPIO_WritePin>
}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000348 	.word	0x20000348

08001d4c <LCD_init>:

/*
 * @brief Initialize the LCD using predetermined values
 */
void LCD_init(){
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_RESET);
 8001d50:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <LCD_init+0x64>)
 8001d52:	6818      	ldr	r0, [r3, #0]
 8001d54:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <LCD_init+0x64>)
 8001d56:	889b      	ldrh	r3, [r3, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f001 fe3a 	bl	80039d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_SET);
 8001d60:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <LCD_init+0x64>)
 8001d62:	6818      	ldr	r0, [r3, #0]
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <LCD_init+0x64>)
 8001d66:	889b      	ldrh	r3, [r3, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f001 fe32 	bl	80039d4 <HAL_GPIO_WritePin>
  LCD_write(0x21, LCD_COMMAND); //LCD extended commands.
 8001d70:	2100      	movs	r1, #0
 8001d72:	2021      	movs	r0, #33	; 0x21
 8001d74:	f7ff ffa0 	bl	8001cb8 <LCD_write>
  LCD_write(0xB8, LCD_COMMAND); //set LCD Vop(Contrast).
 8001d78:	2100      	movs	r1, #0
 8001d7a:	20b8      	movs	r0, #184	; 0xb8
 8001d7c:	f7ff ff9c 	bl	8001cb8 <LCD_write>
  LCD_write(0x04, LCD_COMMAND); //set temp coefficent.
 8001d80:	2100      	movs	r1, #0
 8001d82:	2004      	movs	r0, #4
 8001d84:	f7ff ff98 	bl	8001cb8 <LCD_write>
  LCD_write(0x14, LCD_COMMAND); //LCD bias mode 1:40.
 8001d88:	2100      	movs	r1, #0
 8001d8a:	2014      	movs	r0, #20
 8001d8c:	f7ff ff94 	bl	8001cb8 <LCD_write>
  LCD_write(0x20, LCD_COMMAND); //LCD basic commands.
 8001d90:	2100      	movs	r1, #0
 8001d92:	2020      	movs	r0, #32
 8001d94:	f7ff ff90 	bl	8001cb8 <LCD_write>
  LCD_write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
 8001d98:	2100      	movs	r1, #0
 8001d9a:	200c      	movs	r0, #12
 8001d9c:	f7ff ff8c 	bl	8001cb8 <LCD_write>
  LCD_clrScr();
 8001da0:	f000 f86a 	bl	8001e78 <LCD_clrScr>
  lcd.inverttext = false;
 8001da4:	4b03      	ldr	r3, [pc, #12]	; (8001db4 <LCD_init+0x68>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20000348 	.word	0x20000348
 8001db4:	20000370 	.word	0x20000370

08001db8 <LCD_putChar>:

/*
 * @brief Puts one char on the current position of LCD's cursor
 * @param c: char to be printed
 */
void LCD_putChar(char c){
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]
  for(int i = 0; i < 6; i++){
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	e02d      	b.n	8001e24 <LCD_putChar+0x6c>
    if(lcd.inverttext != true)
 8001dc8:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <LCD_putChar+0x7c>)
 8001dca:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8001dce:	f083 0301 	eor.w	r3, r3, #1
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d010      	beq.n	8001dfa <LCD_putChar+0x42>
      LCD_write(ASCII[c - 0x20][i], LCD_DATA);
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	f1a3 0220 	sub.w	r2, r3, #32
 8001dde:	4916      	ldr	r1, [pc, #88]	; (8001e38 <LCD_putChar+0x80>)
 8001de0:	4613      	mov	r3, r2
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	4413      	add	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	18ca      	adds	r2, r1, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4413      	add	r3, r2
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2101      	movs	r1, #1
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff ff60 	bl	8001cb8 <LCD_write>
 8001df8:	e011      	b.n	8001e1e <LCD_putChar+0x66>
    else
      LCD_write(~(ASCII[c - 0x20][i]), LCD_DATA);
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	f1a3 0220 	sub.w	r2, r3, #32
 8001e00:	490d      	ldr	r1, [pc, #52]	; (8001e38 <LCD_putChar+0x80>)
 8001e02:	4613      	mov	r3, r2
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4413      	add	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	18ca      	adds	r2, r1, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4413      	add	r3, r2
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	43db      	mvns	r3, r3
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2101      	movs	r1, #1
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff4d 	bl	8001cb8 <LCD_write>
  for(int i = 0; i < 6; i++){
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	3301      	adds	r3, #1
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2b05      	cmp	r3, #5
 8001e28:	ddce      	ble.n	8001dc8 <LCD_putChar+0x10>
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000370 	.word	0x20000370
 8001e38:	08008cbc 	.word	0x08008cbc

08001e3c <LCD_print>:
/*
 * @brief Print a string on the LCD
 * @param x: starting point on the x-axis (column)
 * @param y: starting point on the y-axis (line)
 */
void LCD_print(char *str, uint8_t x, uint8_t y){
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	70fb      	strb	r3, [r7, #3]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	70bb      	strb	r3, [r7, #2]
  LCD_goXY(x, y);
 8001e4c:	78ba      	ldrb	r2, [r7, #2]
 8001e4e:	78fb      	ldrb	r3, [r7, #3]
 8001e50:	4611      	mov	r1, r2
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 f82c 	bl	8001eb0 <LCD_goXY>
  while(*str){
 8001e58:	e006      	b.n	8001e68 <LCD_print+0x2c>
    LCD_putChar(*str++);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	1c5a      	adds	r2, r3, #1
 8001e5e:	607a      	str	r2, [r7, #4]
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff ffa8 	bl	8001db8 <LCD_putChar>
  while(*str){
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1f4      	bne.n	8001e5a <LCD_print+0x1e>
  }
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <LCD_clrScr>:

/*
 * @brief Clear the screen
 */
void LCD_clrScr(){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
  for(int i = 0; i < 504; i++){
 8001e7e:	2300      	movs	r3, #0
 8001e80:	607b      	str	r3, [r7, #4]
 8001e82:	e00b      	b.n	8001e9c <LCD_clrScr+0x24>
    LCD_write(0x00, LCD_DATA);
 8001e84:	2101      	movs	r1, #1
 8001e86:	2000      	movs	r0, #0
 8001e88:	f7ff ff16 	bl	8001cb8 <LCD_write>
    lcd.buffer[i] = 0;
 8001e8c:	4a07      	ldr	r2, [pc, #28]	; (8001eac <LCD_clrScr+0x34>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 504; i++){
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	607b      	str	r3, [r7, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8001ea2:	dbef      	blt.n	8001e84 <LCD_clrScr+0xc>
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000370 	.word	0x20000370

08001eb0 <LCD_goXY>:
/*
 * @brief Set LCD's cursor to position X,Y
 * @param x: position on the x-axis (column)
 * @param y: position on the y-axis (line)
 */
void LCD_goXY(uint8_t x, uint8_t y){
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	460a      	mov	r2, r1
 8001eba:	71fb      	strb	r3, [r7, #7]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	71bb      	strb	r3, [r7, #6]
  LCD_write(0x80 | x, LCD_COMMAND); //Column.
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fef4 	bl	8001cb8 <LCD_write>
  LCD_write(0x40 | y, LCD_COMMAND); //Row.
 8001ed0:	79bb      	ldrb	r3, [r7, #6]
 8001ed2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff feec 	bl	8001cb8 <LCD_write>
}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eee:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <HAL_MspInit+0x44>)
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	4a0e      	ldr	r2, [pc, #56]	; (8001f2c <HAL_MspInit+0x44>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6193      	str	r3, [r2, #24]
 8001efa:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <HAL_MspInit+0x44>)
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f06:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <HAL_MspInit+0x44>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	4a08      	ldr	r2, [pc, #32]	; (8001f2c <HAL_MspInit+0x44>)
 8001f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f10:	61d3      	str	r3, [r2, #28]
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_MspInit+0x44>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f1e:	2007      	movs	r0, #7
 8001f20:	f001 fb2e 	bl	8003580 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40021000 	.word	0x40021000

08001f30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08a      	sub	sp, #40	; 0x28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a19      	ldr	r2, [pc, #100]	; (8001fb4 <HAL_ADC_MspInit+0x84>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d12b      	bne.n	8001faa <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001f52:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <HAL_ADC_MspInit+0x88>)
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	4a18      	ldr	r2, [pc, #96]	; (8001fb8 <HAL_ADC_MspInit+0x88>)
 8001f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	6153      	str	r3, [r2, #20]
 8001f5e:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <HAL_ADC_MspInit+0x88>)
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6a:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <HAL_ADC_MspInit+0x88>)
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	4a12      	ldr	r2, [pc, #72]	; (8001fb8 <HAL_ADC_MspInit+0x88>)
 8001f70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f74:	6153      	str	r3, [r2, #20]
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <HAL_ADC_MspInit+0x88>)
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PC0     ------> ADC2_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f82:	2301      	movs	r3, #1
 8001f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f86:	2303      	movs	r3, #3
 8001f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f8e:	f107 0314 	add.w	r3, r7, #20
 8001f92:	4619      	mov	r1, r3
 8001f94:	4809      	ldr	r0, [pc, #36]	; (8001fbc <HAL_ADC_MspInit+0x8c>)
 8001f96:	f001 fbab 	bl	80036f0 <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	2012      	movs	r0, #18
 8001fa0:	f001 faf9 	bl	8003596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001fa4:	2012      	movs	r0, #18
 8001fa6:	f001 fb12 	bl	80035ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001faa:	bf00      	nop
 8001fac:	3728      	adds	r7, #40	; 0x28
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	50000100 	.word	0x50000100
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	48000800 	.word	0x48000800

08001fc0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a0d      	ldr	r2, [pc, #52]	; (8002004 <HAL_RTC_MspInit+0x44>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d111      	bne.n	8001ff6 <HAL_RTC_MspInit+0x36>
 8001fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fd6:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fe0:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001fe2:	fab3 f383 	clz	r3, r3
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b07      	ldr	r3, [pc, #28]	; (8002008 <HAL_RTC_MspInit+0x48>)
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ff6:	bf00      	nop
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40002800 	.word	0x40002800
 8002008:	10908100 	.word	0x10908100

0800200c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08a      	sub	sp, #40	; 0x28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a1b      	ldr	r2, [pc, #108]	; (8002098 <HAL_UART_MspInit+0x8c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d130      	bne.n	8002090 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800202e:	4b1b      	ldr	r3, [pc, #108]	; (800209c <HAL_UART_MspInit+0x90>)
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	4a1a      	ldr	r2, [pc, #104]	; (800209c <HAL_UART_MspInit+0x90>)
 8002034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002038:	61d3      	str	r3, [r2, #28]
 800203a:	4b18      	ldr	r3, [pc, #96]	; (800209c <HAL_UART_MspInit+0x90>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002046:	4b15      	ldr	r3, [pc, #84]	; (800209c <HAL_UART_MspInit+0x90>)
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	4a14      	ldr	r2, [pc, #80]	; (800209c <HAL_UART_MspInit+0x90>)
 800204c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002050:	6153      	str	r3, [r2, #20]
 8002052:	4b12      	ldr	r3, [pc, #72]	; (800209c <HAL_UART_MspInit+0x90>)
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800205e:	230c      	movs	r3, #12
 8002060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002062:	2302      	movs	r3, #2
 8002064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800206a:	2303      	movs	r3, #3
 800206c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800206e:	2307      	movs	r3, #7
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002072:	f107 0314 	add.w	r3, r7, #20
 8002076:	4619      	mov	r1, r3
 8002078:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800207c:	f001 fb38 	bl	80036f0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002080:	2200      	movs	r2, #0
 8002082:	2100      	movs	r1, #0
 8002084:	2026      	movs	r0, #38	; 0x26
 8002086:	f001 fa86 	bl	8003596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800208a:	2026      	movs	r0, #38	; 0x26
 800208c:	f001 fa9f 	bl	80035ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002090:	bf00      	nop
 8002092:	3728      	adds	r7, #40	; 0x28
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40004400 	.word	0x40004400
 800209c:	40021000 	.word	0x40021000

080020a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020b2:	e7fe      	b.n	80020b2 <HardFault_Handler+0x4>

080020b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b8:	e7fe      	b.n	80020b8 <MemManage_Handler+0x4>

080020ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ba:	b480      	push	{r7}
 80020bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020be:	e7fe      	b.n	80020be <BusFault_Handler+0x4>

080020c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020c4:	e7fe      	b.n	80020c4 <UsageFault_Handler+0x4>

080020c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020c6:	b480      	push	{r7}
 80020c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020e2:	b480      	push	{r7}
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020f4:	f000 f8d6 	bl	80022a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020f8:	bf00      	nop
 80020fa:	bd80      	pop	{r7, pc}

080020fc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8002100:	4802      	ldr	r0, [pc, #8]	; (800210c <ADC1_2_IRQHandler+0x10>)
 8002102:	f000 fba5 	bl	8002850 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	2000023c 	.word	0x2000023c

08002110 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002114:	4802      	ldr	r0, [pc, #8]	; (8002120 <USART2_IRQHandler+0x10>)
 8002116:	f003 fb63 	bl	80057e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200002c4 	.word	0x200002c4

08002124 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002128:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800212c:	f001 fc6a 	bl	8003a04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}

08002134 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800213c:	4a14      	ldr	r2, [pc, #80]	; (8002190 <_sbrk+0x5c>)
 800213e:	4b15      	ldr	r3, [pc, #84]	; (8002194 <_sbrk+0x60>)
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002148:	4b13      	ldr	r3, [pc, #76]	; (8002198 <_sbrk+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d102      	bne.n	8002156 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <_sbrk+0x64>)
 8002152:	4a12      	ldr	r2, [pc, #72]	; (800219c <_sbrk+0x68>)
 8002154:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002156:	4b10      	ldr	r3, [pc, #64]	; (8002198 <_sbrk+0x64>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	429a      	cmp	r2, r3
 8002162:	d207      	bcs.n	8002174 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002164:	f004 f9c0 	bl	80064e8 <__errno>
 8002168:	4602      	mov	r2, r0
 800216a:	230c      	movs	r3, #12
 800216c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800216e:	f04f 33ff 	mov.w	r3, #4294967295
 8002172:	e009      	b.n	8002188 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002174:	4b08      	ldr	r3, [pc, #32]	; (8002198 <_sbrk+0x64>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800217a:	4b07      	ldr	r3, [pc, #28]	; (8002198 <_sbrk+0x64>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	4a05      	ldr	r2, [pc, #20]	; (8002198 <_sbrk+0x64>)
 8002184:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002186:	68fb      	ldr	r3, [r7, #12]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20003000 	.word	0x20003000
 8002194:	00000400 	.word	0x00000400
 8002198:	20000230 	.word	0x20000230
 800219c:	20000578 	.word	0x20000578

080021a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <SystemInit+0x20>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021aa:	4a05      	ldr	r2, [pc, #20]	; (80021c0 <SystemInit+0x20>)
 80021ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80021c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021fc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021c8:	480d      	ldr	r0, [pc, #52]	; (8002200 <LoopForever+0x6>)
  ldr r1, =_edata
 80021ca:	490e      	ldr	r1, [pc, #56]	; (8002204 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021cc:	4a0e      	ldr	r2, [pc, #56]	; (8002208 <LoopForever+0xe>)
  movs r3, #0
 80021ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d0:	e002      	b.n	80021d8 <LoopCopyDataInit>

080021d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021d6:	3304      	adds	r3, #4

080021d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021dc:	d3f9      	bcc.n	80021d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021de:	4a0b      	ldr	r2, [pc, #44]	; (800220c <LoopForever+0x12>)
  ldr r4, =_ebss
 80021e0:	4c0b      	ldr	r4, [pc, #44]	; (8002210 <LoopForever+0x16>)
  movs r3, #0
 80021e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e4:	e001      	b.n	80021ea <LoopFillZerobss>

080021e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e8:	3204      	adds	r2, #4

080021ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ec:	d3fb      	bcc.n	80021e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021ee:	f7ff ffd7 	bl	80021a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021f2:	f004 f97f 	bl	80064f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021f6:	f7fe fd37 	bl	8000c68 <main>

080021fa <LoopForever>:

LoopForever:
    b LoopForever
 80021fa:	e7fe      	b.n	80021fa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80021fc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002204:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002208:	0800919c 	.word	0x0800919c
  ldr r2, =_sbss
 800220c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002210:	20000574 	.word	0x20000574

08002214 <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002214:	e7fe      	b.n	8002214 <CAN_RX0_IRQHandler>
	...

08002218 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800221c:	4b08      	ldr	r3, [pc, #32]	; (8002240 <HAL_Init+0x28>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a07      	ldr	r2, [pc, #28]	; (8002240 <HAL_Init+0x28>)
 8002222:	f043 0310 	orr.w	r3, r3, #16
 8002226:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002228:	2003      	movs	r0, #3
 800222a:	f001 f9a9 	bl	8003580 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800222e:	2000      	movs	r0, #0
 8002230:	f000 f808 	bl	8002244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002234:	f7ff fe58 	bl	8001ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40022000 	.word	0x40022000

08002244 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800224c:	4b12      	ldr	r3, [pc, #72]	; (8002298 <HAL_InitTick+0x54>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <HAL_InitTick+0x58>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	4619      	mov	r1, r3
 8002256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800225a:	fbb3 f3f1 	udiv	r3, r3, r1
 800225e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002262:	4618      	mov	r0, r3
 8002264:	f001 f9c1 	bl	80035ea <HAL_SYSTICK_Config>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e00e      	b.n	8002290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b0f      	cmp	r3, #15
 8002276:	d80a      	bhi.n	800228e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002278:	2200      	movs	r2, #0
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	f04f 30ff 	mov.w	r0, #4294967295
 8002280:	f001 f989 	bl	8003596 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002284:	4a06      	ldr	r2, [pc, #24]	; (80022a0 <HAL_InitTick+0x5c>)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	e000      	b.n	8002290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
}
 8002290:	4618      	mov	r0, r3
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	2000000c 	.word	0x2000000c
 800229c:	20000014 	.word	0x20000014
 80022a0:	20000010 	.word	0x20000010

080022a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_IncTick+0x20>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <HAL_IncTick+0x24>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4413      	add	r3, r2
 80022b4:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <HAL_IncTick+0x24>)
 80022b6:	6013      	str	r3, [r2, #0]
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	20000014 	.word	0x20000014
 80022c8:	2000056c 	.word	0x2000056c

080022cc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return uwTick;  
 80022d0:	4b03      	ldr	r3, [pc, #12]	; (80022e0 <HAL_GetTick+0x14>)
 80022d2:	681b      	ldr	r3, [r3, #0]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	2000056c 	.word	0x2000056c

080022e4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022ec:	f7ff ffee 	bl	80022cc <HAL_GetTick>
 80022f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fc:	d005      	beq.n	800230a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <HAL_Delay+0x40>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4413      	add	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800230a:	bf00      	nop
 800230c:	f7ff ffde 	bl	80022cc <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	429a      	cmp	r2, r3
 800231a:	d8f7      	bhi.n	800230c <HAL_Delay+0x28>
  {
  }
}
 800231c:	bf00      	nop
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20000014 	.word	0x20000014

08002328 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b09a      	sub	sp, #104	; 0x68
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800235e:	2300      	movs	r3, #0
 8002360:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e172      	b.n	8002656 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f003 0310 	and.w	r3, r3, #16
 800237e:	2b00      	cmp	r3, #0
 8002380:	d176      	bne.n	8002470 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	2b00      	cmp	r3, #0
 8002388:	d152      	bne.n	8002430 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff fdc3 	bl	8001f30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d13b      	bne.n	8002430 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 ffb1 	bl	8003320 <ADC_Disable>
 80023be:	4603      	mov	r3, r0
 80023c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	f003 0310 	and.w	r3, r3, #16
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d12f      	bne.n	8002430 <HAL_ADC_Init+0xe0>
 80023d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d12b      	bne.n	8002430 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023e0:	f023 0302 	bic.w	r3, r3, #2
 80023e4:	f043 0202 	orr.w	r2, r3, #2
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023fa:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800240a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800240c:	4b94      	ldr	r3, [pc, #592]	; (8002660 <HAL_ADC_Init+0x310>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a94      	ldr	r2, [pc, #592]	; (8002664 <HAL_ADC_Init+0x314>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	0c9a      	lsrs	r2, r3, #18
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002422:	e002      	b.n	800242a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	3b01      	subs	r3, #1
 8002428:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1f9      	bne.n	8002424 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d007      	beq.n	800244e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800244c:	d110      	bne.n	8002470 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	f023 0312 	bic.w	r3, r3, #18
 8002456:	f043 0210 	orr.w	r2, r3, #16
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	f043 0201 	orr.w	r2, r3, #1
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	f003 0310 	and.w	r3, r3, #16
 8002478:	2b00      	cmp	r3, #0
 800247a:	f040 80df 	bne.w	800263c <HAL_ADC_Init+0x2ec>
 800247e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002482:	2b00      	cmp	r3, #0
 8002484:	f040 80da 	bne.w	800263c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002492:	2b00      	cmp	r3, #0
 8002494:	f040 80d2 	bne.w	800263c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024a0:	f043 0202 	orr.w	r2, r3, #2
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024a8:	4b6f      	ldr	r3, [pc, #444]	; (8002668 <HAL_ADC_Init+0x318>)
 80024aa:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024b4:	d102      	bne.n	80024bc <HAL_ADC_Init+0x16c>
 80024b6:	4b6d      	ldr	r3, [pc, #436]	; (800266c <HAL_ADC_Init+0x31c>)
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	e002      	b.n	80024c2 <HAL_ADC_Init+0x172>
 80024bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024c0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d108      	bne.n	80024e2 <HAL_ADC_Init+0x192>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_ADC_Init+0x192>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <HAL_ADC_Init+0x194>
 80024e2:	2300      	movs	r3, #0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d11c      	bne.n	8002522 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80024e8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d010      	beq.n	8002510 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d107      	bne.n	800250a <HAL_ADC_Init+0x1ba>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <HAL_ADC_Init+0x1ba>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <HAL_ADC_Init+0x1bc>
 800250a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800250c:	2b00      	cmp	r3, #0
 800250e:	d108      	bne.n	8002522 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002510:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	431a      	orrs	r2, r3
 800251e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002520:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	7e5b      	ldrb	r3, [r3, #25]
 8002526:	035b      	lsls	r3, r3, #13
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800252c:	2a01      	cmp	r2, #1
 800252e:	d002      	beq.n	8002536 <HAL_ADC_Init+0x1e6>
 8002530:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002534:	e000      	b.n	8002538 <HAL_ADC_Init+0x1e8>
 8002536:	2200      	movs	r2, #0
 8002538:	431a      	orrs	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4313      	orrs	r3, r2
 8002546:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002548:	4313      	orrs	r3, r2
 800254a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d11b      	bne.n	800258e <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	7e5b      	ldrb	r3, [r3, #25]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d109      	bne.n	8002572 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	3b01      	subs	r3, #1
 8002564:	045a      	lsls	r2, r3, #17
 8002566:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002568:	4313      	orrs	r3, r2
 800256a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800256e:	663b      	str	r3, [r7, #96]	; 0x60
 8002570:	e00d      	b.n	800258e <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800257a:	f043 0220 	orr.w	r2, r3, #32
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	f043 0201 	orr.w	r2, r3, #1
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002592:	2b01      	cmp	r3, #1
 8002594:	d007      	beq.n	80025a6 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259e:	4313      	orrs	r3, r2
 80025a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80025a2:	4313      	orrs	r3, r2
 80025a4:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 030c 	and.w	r3, r3, #12
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d114      	bne.n	80025de <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025c2:	f023 0302 	bic.w	r3, r3, #2
 80025c6:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	7e1b      	ldrb	r3, [r3, #24]
 80025cc:	039a      	lsls	r2, r3, #14
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	4313      	orrs	r3, r2
 80025d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80025da:	4313      	orrs	r3, r2
 80025dc:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	4b22      	ldr	r3, [pc, #136]	; (8002670 <HAL_ADC_Init+0x320>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80025ee:	430b      	orrs	r3, r1
 80025f0:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d10c      	bne.n	8002614 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	f023 010f 	bic.w	r1, r3, #15
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	1e5a      	subs	r2, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	631a      	str	r2, [r3, #48]	; 0x30
 8002612:	e007      	b.n	8002624 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 020f 	bic.w	r2, r2, #15
 8002622:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f023 0303 	bic.w	r3, r3, #3
 8002632:	f043 0201 	orr.w	r2, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	641a      	str	r2, [r3, #64]	; 0x40
 800263a:	e00a      	b.n	8002652 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	f023 0312 	bic.w	r3, r3, #18
 8002644:	f043 0210 	orr.w	r2, r3, #16
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800264c:	2301      	movs	r3, #1
 800264e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002652:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002656:	4618      	mov	r0, r3
 8002658:	3768      	adds	r7, #104	; 0x68
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	2000000c 	.word	0x2000000c
 8002664:	431bde83 	.word	0x431bde83
 8002668:	50000300 	.word	0x50000300
 800266c:	50000100 	.word	0x50000100
 8002670:	fff0c007 	.word	0xfff0c007

08002674 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	2b00      	cmp	r3, #0
 800268c:	f040 80c6 	bne.w	800281c <HAL_ADC_Start_IT+0x1a8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <HAL_ADC_Start_IT+0x2a>
 800269a:	2302      	movs	r3, #2
 800269c:	e0c1      	b.n	8002822 <HAL_ADC_Start_IT+0x1ae>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 fddc 	bl	8003264 <ADC_Enable>
 80026ac:	4603      	mov	r3, r0
 80026ae:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f040 80ad 	bne.w	8002812 <HAL_ADC_Start_IT+0x19e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026c0:	f023 0301 	bic.w	r3, r3, #1
 80026c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80026cc:	4b57      	ldr	r3, [pc, #348]	; (800282c <HAL_ADC_Start_IT+0x1b8>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 031f 	and.w	r3, r3, #31
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d004      	beq.n	80026e2 <HAL_ADC_Start_IT+0x6e>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026e0:	d115      	bne.n	800270e <HAL_ADC_Start_IT+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d027      	beq.n	800274c <HAL_ADC_Start_IT+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002704:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800270c:	e01e      	b.n	800274c <HAL_ADC_Start_IT+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002722:	d004      	beq.n	800272e <HAL_ADC_Start_IT+0xba>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a41      	ldr	r2, [pc, #260]	; (8002830 <HAL_ADC_Start_IT+0x1bc>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d10e      	bne.n	800274c <HAL_ADC_Start_IT+0xd8>
 800272e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d007      	beq.n	800274c <HAL_ADC_Start_IT+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002744:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002758:	d106      	bne.n	8002768 <HAL_ADC_Start_IT+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	f023 0206 	bic.w	r2, r3, #6
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	645a      	str	r2, [r3, #68]	; 0x44
 8002766:	e002      	b.n	800276e <HAL_ADC_Start_IT+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	221c      	movs	r2, #28
 800277c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	2b08      	cmp	r3, #8
 8002784:	d110      	bne.n	80027a8 <HAL_ADC_Start_IT+0x134>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0204 	bic.w	r2, r2, #4
 8002794:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f042 0208 	orr.w	r2, r2, #8
 80027a4:	605a      	str	r2, [r3, #4]
          break;
 80027a6:	e008      	b.n	80027ba <HAL_ADC_Start_IT+0x146>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 020c 	orr.w	r2, r2, #12
 80027b6:	605a      	str	r2, [r3, #4]
          break;
 80027b8:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d107      	bne.n	80027d2 <HAL_ADC_Start_IT+0x15e>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0210 	bic.w	r2, r2, #16
 80027d0:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80027d2:	4b16      	ldr	r3, [pc, #88]	; (800282c <HAL_ADC_Start_IT+0x1b8>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 031f 	and.w	r3, r3, #31
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d010      	beq.n	8002800 <HAL_ADC_Start_IT+0x18c>
 80027de:	4b13      	ldr	r3, [pc, #76]	; (800282c <HAL_ADC_Start_IT+0x1b8>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 031f 	and.w	r3, r3, #31
 80027e6:	2b05      	cmp	r3, #5
 80027e8:	d00a      	beq.n	8002800 <HAL_ADC_Start_IT+0x18c>
 80027ea:	4b10      	ldr	r3, [pc, #64]	; (800282c <HAL_ADC_Start_IT+0x1b8>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 031f 	and.w	r3, r3, #31
 80027f2:	2b09      	cmp	r3, #9
 80027f4:	d004      	beq.n	8002800 <HAL_ADC_Start_IT+0x18c>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027fe:	d10f      	bne.n	8002820 <HAL_ADC_Start_IT+0x1ac>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0204 	orr.w	r2, r2, #4
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	e006      	b.n	8002820 <HAL_ADC_Start_IT+0x1ac>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800281a:	e001      	b.n	8002820 <HAL_ADC_Start_IT+0x1ac>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800281c:	2302      	movs	r3, #2
 800281e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002820:	7bfb      	ldrb	r3, [r7, #15]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	50000300 	.word	0x50000300
 8002830:	50000100 	.word	0x50000100

08002834 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002842:	4618      	mov	r0, r3
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800285c:	2300      	movs	r3, #0
 800285e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8002860:	2300      	movs	r3, #0
 8002862:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	2b04      	cmp	r3, #4
 8002870:	d106      	bne.n	8002880 <HAL_ADC_IRQHandler+0x30>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b04      	cmp	r3, #4
 800287e:	d00d      	beq.n	800289c <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800288a:	2b08      	cmp	r3, #8
 800288c:	d17a      	bne.n	8002984 <HAL_ADC_IRQHandler+0x134>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 0308 	and.w	r3, r3, #8
 8002898:	2b08      	cmp	r3, #8
 800289a:	d173      	bne.n	8002984 <HAL_ADC_IRQHandler+0x134>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	f003 0310 	and.w	r3, r3, #16
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d105      	bne.n	80028b4 <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80028b4:	4b88      	ldr	r3, [pc, #544]	; (8002ad8 <HAL_ADC_IRQHandler+0x288>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 031f 	and.w	r3, r3, #31
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d010      	beq.n	80028e2 <HAL_ADC_IRQHandler+0x92>
 80028c0:	4b85      	ldr	r3, [pc, #532]	; (8002ad8 <HAL_ADC_IRQHandler+0x288>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 031f 	and.w	r3, r3, #31
 80028c8:	2b05      	cmp	r3, #5
 80028ca:	d00a      	beq.n	80028e2 <HAL_ADC_IRQHandler+0x92>
 80028cc:	4b82      	ldr	r3, [pc, #520]	; (8002ad8 <HAL_ADC_IRQHandler+0x288>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 031f 	and.w	r3, r3, #31
 80028d4:	2b09      	cmp	r3, #9
 80028d6:	d004      	beq.n	80028e2 <HAL_ADC_IRQHandler+0x92>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028e0:	d104      	bne.n	80028ec <HAL_ADC_IRQHandler+0x9c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	613b      	str	r3, [r7, #16]
 80028ea:	e003      	b.n	80028f4 <HAL_ADC_IRQHandler+0xa4>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80028ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d139      	bne.n	8002976 <HAL_ADC_IRQHandler+0x126>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002908:	2b00      	cmp	r3, #0
 800290a:	d134      	bne.n	8002976 <HAL_ADC_IRQHandler+0x126>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b08      	cmp	r3, #8
 8002918:	d12d      	bne.n	8002976 <HAL_ADC_IRQHandler+0x126>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d11a      	bne.n	800295e <HAL_ADC_IRQHandler+0x10e>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 020c 	bic.w	r2, r2, #12
 8002936:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d112      	bne.n	8002976 <HAL_ADC_IRQHandler+0x126>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	f043 0201 	orr.w	r2, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	641a      	str	r2, [r3, #64]	; 0x40
 800295c:	e00b      	b.n	8002976 <HAL_ADC_IRQHandler+0x126>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f043 0210 	orr.w	r2, r3, #16
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	f043 0201 	orr.w	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7fe fd5a 	bl	8001430 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	220c      	movs	r2, #12
 8002982:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0320 	and.w	r3, r3, #32
 800298e:	2b20      	cmp	r3, #32
 8002990:	d106      	bne.n	80029a0 <HAL_ADC_IRQHandler+0x150>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0320 	and.w	r3, r3, #32
 800299c:	2b20      	cmp	r3, #32
 800299e:	d00f      	beq.n	80029c0 <HAL_ADC_IRQHandler+0x170>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80029aa:	2b40      	cmp	r3, #64	; 0x40
 80029ac:	f040 80a9 	bne.w	8002b02 <HAL_ADC_IRQHandler+0x2b2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ba:	2b40      	cmp	r3, #64	; 0x40
 80029bc:	f040 80a1 	bne.w	8002b02 <HAL_ADC_IRQHandler+0x2b2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80029cc:	4b42      	ldr	r3, [pc, #264]	; (8002ad8 <HAL_ADC_IRQHandler+0x288>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 031f 	and.w	r3, r3, #31
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d010      	beq.n	80029fa <HAL_ADC_IRQHandler+0x1aa>
 80029d8:	4b3f      	ldr	r3, [pc, #252]	; (8002ad8 <HAL_ADC_IRQHandler+0x288>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	2b05      	cmp	r3, #5
 80029e2:	d00a      	beq.n	80029fa <HAL_ADC_IRQHandler+0x1aa>
 80029e4:	4b3c      	ldr	r3, [pc, #240]	; (8002ad8 <HAL_ADC_IRQHandler+0x288>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 031f 	and.w	r3, r3, #31
 80029ec:	2b09      	cmp	r3, #9
 80029ee:	d004      	beq.n	80029fa <HAL_ADC_IRQHandler+0x1aa>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029f8:	d104      	bne.n	8002a04 <HAL_ADC_IRQHandler+0x1b4>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	e003      	b.n	8002a0c <HAL_ADC_IRQHandler+0x1bc>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002a04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d16c      	bne.n	8002af4 <HAL_ADC_IRQHandler+0x2a4>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00b      	beq.n	8002a3c <HAL_ADC_IRQHandler+0x1ec>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d160      	bne.n	8002af4 <HAL_ADC_IRQHandler+0x2a4>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d15b      	bne.n	8002af4 <HAL_ADC_IRQHandler+0x2a4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a46:	2b40      	cmp	r3, #64	; 0x40
 8002a48:	d154      	bne.n	8002af4 <HAL_ADC_IRQHandler+0x2a4>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002a4a:	4b23      	ldr	r3, [pc, #140]	; (8002ad8 <HAL_ADC_IRQHandler+0x288>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d010      	beq.n	8002a78 <HAL_ADC_IRQHandler+0x228>
 8002a56:	4b20      	ldr	r3, [pc, #128]	; (8002ad8 <HAL_ADC_IRQHandler+0x288>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 031f 	and.w	r3, r3, #31
 8002a5e:	2b06      	cmp	r3, #6
 8002a60:	d00a      	beq.n	8002a78 <HAL_ADC_IRQHandler+0x228>
 8002a62:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <HAL_ADC_IRQHandler+0x288>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 031f 	and.w	r3, r3, #31
 8002a6a:	2b07      	cmp	r3, #7
 8002a6c:	d004      	beq.n	8002a78 <HAL_ADC_IRQHandler+0x228>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a76:	d104      	bne.n	8002a82 <HAL_ADC_IRQHandler+0x232>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	e003      	b.n	8002a8a <HAL_ADC_IRQHandler+0x23a>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002a82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d12f      	bne.n	8002af4 <HAL_ADC_IRQHandler+0x2a4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d11c      	bne.n	8002adc <HAL_ADC_IRQHandler+0x28c>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ab0:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d114      	bne.n	8002af4 <HAL_ADC_IRQHandler+0x2a4>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	f043 0201 	orr.w	r2, r3, #1
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	641a      	str	r2, [r3, #64]	; 0x40
 8002ad6:	e00d      	b.n	8002af4 <HAL_ADC_IRQHandler+0x2a4>
 8002ad8:	50000300 	.word	0x50000300
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	f043 0210 	orr.w	r2, r3, #16
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aec:	f043 0201 	orr.w	r2, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f8cb 	bl	8002c90 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2260      	movs	r2, #96	; 0x60
 8002b00:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0c:	2b80      	cmp	r3, #128	; 0x80
 8002b0e:	d113      	bne.n	8002b38 <HAL_ADC_IRQHandler+0x2e8>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1a:	2b80      	cmp	r3, #128	; 0x80
 8002b1c:	d10c      	bne.n	8002b38 <HAL_ADC_IRQHandler+0x2e8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff fbfc 	bl	8002328 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2280      	movs	r2, #128	; 0x80
 8002b36:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b46:	d115      	bne.n	8002b74 <HAL_ADC_IRQHandler+0x324>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b56:	d10d      	bne.n	8002b74 <HAL_ADC_IRQHandler+0x324>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f8a7 	bl	8002cb8 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b72:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b82:	d115      	bne.n	8002bb0 <HAL_ADC_IRQHandler+0x360>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b92:	d10d      	bne.n	8002bb0 <HAL_ADC_IRQHandler+0x360>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f893 	bl	8002ccc <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bae:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b10      	cmp	r3, #16
 8002bbc:	d13d      	bne.n	8002c3a <HAL_ADC_IRQHandler+0x3ea>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b10      	cmp	r3, #16
 8002bca:	d136      	bne.n	8002c3a <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d102      	bne.n	8002bda <HAL_ADC_IRQHandler+0x38a>
    {
      overrun_error = 1U;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	e019      	b.n	8002c0e <HAL_ADC_IRQHandler+0x3be>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bda:	4b2c      	ldr	r3, [pc, #176]	; (8002c8c <HAL_ADC_IRQHandler+0x43c>)
 8002bdc:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 031f 	and.w	r3, r3, #31
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d109      	bne.n	8002bfe <HAL_ADC_IRQHandler+0x3ae>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d10a      	bne.n	8002c0e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	e007      	b.n	8002c0e <HAL_ADC_IRQHandler+0x3be>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d10e      	bne.n	8002c32 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c24:	f043 0202 	orr.w	r2, r3, #2
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff fb85 	bl	800233c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2210      	movs	r2, #16
 8002c38:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c48:	d11b      	bne.n	8002c82 <HAL_ADC_IRQHandler+0x432>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c58:	d113      	bne.n	8002c82 <HAL_ADC_IRQHandler+0x432>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	f043 0208 	orr.w	r2, r3, #8
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c7a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f811 	bl	8002ca4 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002c82:	bf00      	nop
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	50000300 	.word	0x50000300

08002c90 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b09b      	sub	sp, #108	; 0x6c
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cea:	2300      	movs	r3, #0
 8002cec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x22>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e2a5      	b.n	800324e <HAL_ADC_ConfigChannel+0x56e>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f040 8289 	bne.w	800322c <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d81c      	bhi.n	8002d5c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	4413      	add	r3, r2
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	461a      	mov	r2, r3
 8002d36:	231f      	movs	r3, #31
 8002d38:	4093      	lsls	r3, r2
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	4019      	ands	r1, r3
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	4413      	add	r3, r2
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	fa00 f203 	lsl.w	r2, r0, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	631a      	str	r2, [r3, #48]	; 0x30
 8002d5a:	e063      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2b09      	cmp	r3, #9
 8002d62:	d81e      	bhi.n	8002da2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	4413      	add	r3, r2
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	3b1e      	subs	r3, #30
 8002d78:	221f      	movs	r2, #31
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	4019      	ands	r1, r3
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	6818      	ldr	r0, [r3, #0]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	4413      	add	r3, r2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	3b1e      	subs	r3, #30
 8002d94:	fa00 f203 	lsl.w	r2, r0, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	635a      	str	r2, [r3, #52]	; 0x34
 8002da0:	e040      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b0e      	cmp	r3, #14
 8002da8:	d81e      	bhi.n	8002de8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	4413      	add	r3, r2
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	3b3c      	subs	r3, #60	; 0x3c
 8002dbe:	221f      	movs	r2, #31
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	4019      	ands	r1, r3
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	4413      	add	r3, r2
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	3b3c      	subs	r3, #60	; 0x3c
 8002dda:	fa00 f203 	lsl.w	r2, r0, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	639a      	str	r2, [r3, #56]	; 0x38
 8002de6:	e01d      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	4613      	mov	r3, r2
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	4413      	add	r3, r2
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	3b5a      	subs	r3, #90	; 0x5a
 8002dfc:	221f      	movs	r2, #31
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	4019      	ands	r1, r3
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	6818      	ldr	r0, [r3, #0]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	4413      	add	r3, r2
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	3b5a      	subs	r3, #90	; 0x5a
 8002e18:	fa00 f203 	lsl.w	r2, r0, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f040 80e5 	bne.w	8002ffe <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b09      	cmp	r3, #9
 8002e3a:	d91c      	bls.n	8002e76 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6999      	ldr	r1, [r3, #24]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	4613      	mov	r3, r2
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3b1e      	subs	r3, #30
 8002e4e:	2207      	movs	r2, #7
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	43db      	mvns	r3, r3
 8002e56:	4019      	ands	r1, r3
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	6898      	ldr	r0, [r3, #8]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4613      	mov	r3, r2
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	4413      	add	r3, r2
 8002e66:	3b1e      	subs	r3, #30
 8002e68:	fa00 f203 	lsl.w	r2, r0, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	619a      	str	r2, [r3, #24]
 8002e74:	e019      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6959      	ldr	r1, [r3, #20]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	4613      	mov	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4413      	add	r3, r2
 8002e86:	2207      	movs	r2, #7
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	4019      	ands	r1, r3
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	6898      	ldr	r0, [r3, #8]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	4413      	add	r3, r2
 8002e9e:	fa00 f203 	lsl.w	r2, r0, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	08db      	lsrs	r3, r3, #3
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	2b03      	cmp	r3, #3
 8002eca:	d84f      	bhi.n	8002f6c <HAL_ADC_ConfigChannel+0x28c>
 8002ecc:	a201      	add	r2, pc, #4	; (adr r2, 8002ed4 <HAL_ADC_ConfigChannel+0x1f4>)
 8002ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed2:	bf00      	nop
 8002ed4:	08002ee5 	.word	0x08002ee5
 8002ed8:	08002f07 	.word	0x08002f07
 8002edc:	08002f29 	.word	0x08002f29
 8002ee0:	08002f4b 	.word	0x08002f4b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002eea:	4b9e      	ldr	r3, [pc, #632]	; (8003164 <HAL_ADC_ConfigChannel+0x484>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	6812      	ldr	r2, [r2, #0]
 8002ef2:	0691      	lsls	r1, r2, #26
 8002ef4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f02:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f04:	e07e      	b.n	8003004 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002f0c:	4b95      	ldr	r3, [pc, #596]	; (8003164 <HAL_ADC_ConfigChannel+0x484>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	0691      	lsls	r1, r2, #26
 8002f16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f24:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f26:	e06d      	b.n	8003004 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002f2e:	4b8d      	ldr	r3, [pc, #564]	; (8003164 <HAL_ADC_ConfigChannel+0x484>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	0691      	lsls	r1, r2, #26
 8002f38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f46:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f48:	e05c      	b.n	8003004 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f50:	4b84      	ldr	r3, [pc, #528]	; (8003164 <HAL_ADC_ConfigChannel+0x484>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	6812      	ldr	r2, [r2, #0]
 8002f58:	0691      	lsls	r1, r2, #26
 8002f5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f68:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f6a:	e04b      	b.n	8003004 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	069b      	lsls	r3, r3, #26
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d107      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f8e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	069b      	lsls	r3, r3, #26
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d107      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002fb2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	069b      	lsls	r3, r3, #26
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d107      	bne.n	8002fd8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002fd6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	069b      	lsls	r3, r3, #26
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d10a      	bne.n	8003002 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ffa:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002ffc:	e001      	b.n	8003002 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002ffe:	bf00      	nop
 8003000:	e000      	b.n	8003004 <HAL_ADC_ConfigChannel+0x324>
      break;
 8003002:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	2b01      	cmp	r3, #1
 8003010:	d108      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x344>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x344>
 8003020:	2301      	movs	r3, #1
 8003022:	e000      	b.n	8003026 <HAL_ADC_ConfigChannel+0x346>
 8003024:	2300      	movs	r3, #0
 8003026:	2b00      	cmp	r3, #0
 8003028:	f040 810b 	bne.w	8003242 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d00f      	beq.n	8003054 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2201      	movs	r2, #1
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43da      	mvns	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	400a      	ands	r2, r1
 800304e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003052:	e049      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2201      	movs	r2, #1
 8003062:	409a      	lsls	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b09      	cmp	r3, #9
 8003074:	d91c      	bls.n	80030b0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6999      	ldr	r1, [r3, #24]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	4613      	mov	r3, r2
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	4413      	add	r3, r2
 8003086:	3b1b      	subs	r3, #27
 8003088:	2207      	movs	r2, #7
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43db      	mvns	r3, r3
 8003090:	4019      	ands	r1, r3
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	6898      	ldr	r0, [r3, #8]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	4613      	mov	r3, r2
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	4413      	add	r3, r2
 80030a0:	3b1b      	subs	r3, #27
 80030a2:	fa00 f203 	lsl.w	r2, r0, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	619a      	str	r2, [r3, #24]
 80030ae:	e01b      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6959      	ldr	r1, [r3, #20]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	4613      	mov	r3, r2
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	4413      	add	r3, r2
 80030c2:	2207      	movs	r2, #7
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	4019      	ands	r1, r3
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	6898      	ldr	r0, [r3, #8]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	1c5a      	adds	r2, r3, #1
 80030d6:	4613      	mov	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	4413      	add	r3, r2
 80030dc:	fa00 f203 	lsl.w	r2, r0, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030e8:	4b1f      	ldr	r3, [pc, #124]	; (8003168 <HAL_ADC_ConfigChannel+0x488>)
 80030ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	d105      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80030f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d015      	beq.n	800312c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003104:	2b11      	cmp	r3, #17
 8003106:	d105      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003108:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00b      	beq.n	800312c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003118:	2b12      	cmp	r3, #18
 800311a:	f040 8092 	bne.w	8003242 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800311e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003126:	2b00      	cmp	r3, #0
 8003128:	f040 808b 	bne.w	8003242 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003134:	d102      	bne.n	800313c <HAL_ADC_ConfigChannel+0x45c>
 8003136:	4b0d      	ldr	r3, [pc, #52]	; (800316c <HAL_ADC_ConfigChannel+0x48c>)
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	e002      	b.n	8003142 <HAL_ADC_ConfigChannel+0x462>
 800313c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003140:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	2b01      	cmp	r3, #1
 800314e:	d10f      	bne.n	8003170 <HAL_ADC_ConfigChannel+0x490>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b01      	cmp	r3, #1
 800315c:	d108      	bne.n	8003170 <HAL_ADC_ConfigChannel+0x490>
 800315e:	2301      	movs	r3, #1
 8003160:	e007      	b.n	8003172 <HAL_ADC_ConfigChannel+0x492>
 8003162:	bf00      	nop
 8003164:	83fff000 	.word	0x83fff000
 8003168:	50000300 	.word	0x50000300
 800316c:	50000100 	.word	0x50000100
 8003170:	2300      	movs	r3, #0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d150      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003176:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003178:	2b00      	cmp	r3, #0
 800317a:	d010      	beq.n	800319e <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 0303 	and.w	r3, r3, #3
 8003184:	2b01      	cmp	r3, #1
 8003186:	d107      	bne.n	8003198 <HAL_ADC_ConfigChannel+0x4b8>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_ADC_ConfigChannel+0x4b8>
 8003194:	2301      	movs	r3, #1
 8003196:	e000      	b.n	800319a <HAL_ADC_ConfigChannel+0x4ba>
 8003198:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800319a:	2b00      	cmp	r3, #0
 800319c:	d13c      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2b10      	cmp	r3, #16
 80031a4:	d11d      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x502>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031ae:	d118      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80031b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80031b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031ba:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031bc:	4b27      	ldr	r3, [pc, #156]	; (800325c <HAL_ADC_ConfigChannel+0x57c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a27      	ldr	r2, [pc, #156]	; (8003260 <HAL_ADC_ConfigChannel+0x580>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	0c9a      	lsrs	r2, r3, #18
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031d2:	e002      	b.n	80031da <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1f9      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80031e0:	e02e      	b.n	8003240 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b11      	cmp	r3, #17
 80031e8:	d10b      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x522>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031f2:	d106      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80031f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80031fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031fe:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003200:	e01e      	b.n	8003240 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b12      	cmp	r3, #18
 8003208:	d11a      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800320a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003214:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003216:	e013      	b.n	8003240 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	f043 0220 	orr.w	r2, r3, #32
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800322a:	e00a      	b.n	8003242 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003230:	f043 0220 	orr.w	r2, r3, #32
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800323e:	e000      	b.n	8003242 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003240:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800324a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800324e:	4618      	mov	r0, r3
 8003250:	376c      	adds	r7, #108	; 0x6c
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	2000000c 	.word	0x2000000c
 8003260:	431bde83 	.word	0x431bde83

08003264 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	2b01      	cmp	r3, #1
 800327c:	d108      	bne.n	8003290 <ADC_Enable+0x2c>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <ADC_Enable+0x2c>
 800328c:	2301      	movs	r3, #1
 800328e:	e000      	b.n	8003292 <ADC_Enable+0x2e>
 8003290:	2300      	movs	r3, #0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d13c      	bne.n	8003310 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	4b1f      	ldr	r3, [pc, #124]	; (800331c <ADC_Enable+0xb8>)
 800329e:	4013      	ands	r3, r2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00d      	beq.n	80032c0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	f043 0210 	orr.w	r2, r3, #16
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b4:	f043 0201 	orr.w	r2, r3, #1
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e028      	b.n	8003312 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80032d0:	f7fe fffc 	bl	80022cc <HAL_GetTick>
 80032d4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80032d6:	e014      	b.n	8003302 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032d8:	f7fe fff8 	bl	80022cc <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d90d      	bls.n	8003302 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	f043 0210 	orr.w	r2, r3, #16
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	f043 0201 	orr.w	r2, r3, #1
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e007      	b.n	8003312 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b01      	cmp	r3, #1
 800330e:	d1e3      	bne.n	80032d8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	8000003f 	.word	0x8000003f

08003320 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003328:	2300      	movs	r3, #0
 800332a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	2b01      	cmp	r3, #1
 8003338:	d108      	bne.n	800334c <ADC_Disable+0x2c>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <ADC_Disable+0x2c>
 8003348:	2301      	movs	r3, #1
 800334a:	e000      	b.n	800334e <ADC_Disable+0x2e>
 800334c:	2300      	movs	r3, #0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d040      	beq.n	80033d4 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 030d 	and.w	r3, r3, #13
 800335c:	2b01      	cmp	r3, #1
 800335e:	d10f      	bne.n	8003380 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0202 	orr.w	r2, r2, #2
 800336e:	609a      	str	r2, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2203      	movs	r2, #3
 8003376:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003378:	f7fe ffa8 	bl	80022cc <HAL_GetTick>
 800337c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800337e:	e022      	b.n	80033c6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	f043 0210 	orr.w	r2, r3, #16
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003390:	f043 0201 	orr.w	r2, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e01c      	b.n	80033d6 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800339c:	f7fe ff96 	bl	80022cc <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d90d      	bls.n	80033c6 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	f043 0210 	orr.w	r2, r3, #16
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ba:	f043 0201 	orr.w	r2, r3, #1
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e007      	b.n	80033d6 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d0e3      	beq.n	800339c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
	...

080033e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033f0:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <__NVIC_SetPriorityGrouping+0x44>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033fc:	4013      	ands	r3, r2
 80033fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800340c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003412:	4a04      	ldr	r2, [pc, #16]	; (8003424 <__NVIC_SetPriorityGrouping+0x44>)
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	60d3      	str	r3, [r2, #12]
}
 8003418:	bf00      	nop
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	e000ed00 	.word	0xe000ed00

08003428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800342c:	4b04      	ldr	r3, [pc, #16]	; (8003440 <__NVIC_GetPriorityGrouping+0x18>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	0a1b      	lsrs	r3, r3, #8
 8003432:	f003 0307 	and.w	r3, r3, #7
}
 8003436:	4618      	mov	r0, r3
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	e000ed00 	.word	0xe000ed00

08003444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800344e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003452:	2b00      	cmp	r3, #0
 8003454:	db0b      	blt.n	800346e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	f003 021f 	and.w	r2, r3, #31
 800345c:	4907      	ldr	r1, [pc, #28]	; (800347c <__NVIC_EnableIRQ+0x38>)
 800345e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	2001      	movs	r0, #1
 8003466:	fa00 f202 	lsl.w	r2, r0, r2
 800346a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	e000e100 	.word	0xe000e100

08003480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	6039      	str	r1, [r7, #0]
 800348a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800348c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003490:	2b00      	cmp	r3, #0
 8003492:	db0a      	blt.n	80034aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	b2da      	uxtb	r2, r3
 8003498:	490c      	ldr	r1, [pc, #48]	; (80034cc <__NVIC_SetPriority+0x4c>)
 800349a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349e:	0112      	lsls	r2, r2, #4
 80034a0:	b2d2      	uxtb	r2, r2
 80034a2:	440b      	add	r3, r1
 80034a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034a8:	e00a      	b.n	80034c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	4908      	ldr	r1, [pc, #32]	; (80034d0 <__NVIC_SetPriority+0x50>)
 80034b0:	79fb      	ldrb	r3, [r7, #7]
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	3b04      	subs	r3, #4
 80034b8:	0112      	lsls	r2, r2, #4
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	440b      	add	r3, r1
 80034be:	761a      	strb	r2, [r3, #24]
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	e000e100 	.word	0xe000e100
 80034d0:	e000ed00 	.word	0xe000ed00

080034d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b089      	sub	sp, #36	; 0x24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f1c3 0307 	rsb	r3, r3, #7
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	bf28      	it	cs
 80034f2:	2304      	movcs	r3, #4
 80034f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	3304      	adds	r3, #4
 80034fa:	2b06      	cmp	r3, #6
 80034fc:	d902      	bls.n	8003504 <NVIC_EncodePriority+0x30>
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	3b03      	subs	r3, #3
 8003502:	e000      	b.n	8003506 <NVIC_EncodePriority+0x32>
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003508:	f04f 32ff 	mov.w	r2, #4294967295
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43da      	mvns	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	401a      	ands	r2, r3
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800351c:	f04f 31ff 	mov.w	r1, #4294967295
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	fa01 f303 	lsl.w	r3, r1, r3
 8003526:	43d9      	mvns	r1, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800352c:	4313      	orrs	r3, r2
         );
}
 800352e:	4618      	mov	r0, r3
 8003530:	3724      	adds	r7, #36	; 0x24
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
	...

0800353c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3b01      	subs	r3, #1
 8003548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800354c:	d301      	bcc.n	8003552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800354e:	2301      	movs	r3, #1
 8003550:	e00f      	b.n	8003572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003552:	4a0a      	ldr	r2, [pc, #40]	; (800357c <SysTick_Config+0x40>)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3b01      	subs	r3, #1
 8003558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800355a:	210f      	movs	r1, #15
 800355c:	f04f 30ff 	mov.w	r0, #4294967295
 8003560:	f7ff ff8e 	bl	8003480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003564:	4b05      	ldr	r3, [pc, #20]	; (800357c <SysTick_Config+0x40>)
 8003566:	2200      	movs	r2, #0
 8003568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800356a:	4b04      	ldr	r3, [pc, #16]	; (800357c <SysTick_Config+0x40>)
 800356c:	2207      	movs	r2, #7
 800356e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	e000e010 	.word	0xe000e010

08003580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f7ff ff29 	bl	80033e0 <__NVIC_SetPriorityGrouping>
}
 800358e:	bf00      	nop
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b086      	sub	sp, #24
 800359a:	af00      	add	r7, sp, #0
 800359c:	4603      	mov	r3, r0
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	607a      	str	r2, [r7, #4]
 80035a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035a8:	f7ff ff3e 	bl	8003428 <__NVIC_GetPriorityGrouping>
 80035ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	6978      	ldr	r0, [r7, #20]
 80035b4:	f7ff ff8e 	bl	80034d4 <NVIC_EncodePriority>
 80035b8:	4602      	mov	r2, r0
 80035ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035be:	4611      	mov	r1, r2
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff ff5d 	bl	8003480 <__NVIC_SetPriority>
}
 80035c6:	bf00      	nop
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	4603      	mov	r3, r0
 80035d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff ff31 	bl	8003444 <__NVIC_EnableIRQ>
}
 80035e2:	bf00      	nop
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b082      	sub	sp, #8
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7ff ffa2 	bl	800353c <SysTick_Config>
 80035f8:	4603      	mov	r3, r0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003610:	2b02      	cmp	r3, #2
 8003612:	d008      	beq.n	8003626 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2204      	movs	r2, #4
 8003618:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e020      	b.n	8003668 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 020e 	bic.w	r2, r2, #14
 8003634:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0201 	bic.w	r2, r2, #1
 8003644:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364e:	2101      	movs	r1, #1
 8003650:	fa01 f202 	lsl.w	r2, r1, r2
 8003654:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003686:	2b02      	cmp	r3, #2
 8003688:	d005      	beq.n	8003696 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2204      	movs	r2, #4
 800368e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
 8003694:	e027      	b.n	80036e6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 020e 	bic.w	r2, r2, #14
 80036a4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 0201 	bic.w	r2, r2, #1
 80036b4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036be:	2101      	movs	r1, #1
 80036c0:	fa01 f202 	lsl.w	r2, r1, r2
 80036c4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	4798      	blx	r3
    } 
  }
  return status;
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b087      	sub	sp, #28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036fe:	e14e      	b.n	800399e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	2101      	movs	r1, #1
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	fa01 f303 	lsl.w	r3, r1, r3
 800370c:	4013      	ands	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 8140 	beq.w	8003998 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d00b      	beq.n	8003738 <HAL_GPIO_Init+0x48>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b02      	cmp	r3, #2
 8003726:	d007      	beq.n	8003738 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800372c:	2b11      	cmp	r3, #17
 800372e:	d003      	beq.n	8003738 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b12      	cmp	r3, #18
 8003736:	d130      	bne.n	800379a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	2203      	movs	r2, #3
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	43db      	mvns	r3, r3
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4013      	ands	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	4313      	orrs	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800376e:	2201      	movs	r2, #1
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43db      	mvns	r3, r3
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	4013      	ands	r3, r2
 800377c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	091b      	lsrs	r3, r3, #4
 8003784:	f003 0201 	and.w	r2, r3, #1
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	2203      	movs	r2, #3
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	43db      	mvns	r3, r3
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4013      	ands	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d003      	beq.n	80037da <HAL_GPIO_Init+0xea>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b12      	cmp	r3, #18
 80037d8:	d123      	bne.n	8003822 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	08da      	lsrs	r2, r3, #3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3208      	adds	r2, #8
 80037e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	220f      	movs	r2, #15
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	43db      	mvns	r3, r3
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4013      	ands	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	691a      	ldr	r2, [r3, #16]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4313      	orrs	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	08da      	lsrs	r2, r3, #3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3208      	adds	r2, #8
 800381c:	6939      	ldr	r1, [r7, #16]
 800381e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	2203      	movs	r2, #3
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	43db      	mvns	r3, r3
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4013      	ands	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f003 0203 	and.w	r2, r3, #3
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 809a 	beq.w	8003998 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003864:	4b55      	ldr	r3, [pc, #340]	; (80039bc <HAL_GPIO_Init+0x2cc>)
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	4a54      	ldr	r2, [pc, #336]	; (80039bc <HAL_GPIO_Init+0x2cc>)
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	6193      	str	r3, [r2, #24]
 8003870:	4b52      	ldr	r3, [pc, #328]	; (80039bc <HAL_GPIO_Init+0x2cc>)
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	60bb      	str	r3, [r7, #8]
 800387a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800387c:	4a50      	ldr	r2, [pc, #320]	; (80039c0 <HAL_GPIO_Init+0x2d0>)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	089b      	lsrs	r3, r3, #2
 8003882:	3302      	adds	r3, #2
 8003884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003888:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f003 0303 	and.w	r3, r3, #3
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	220f      	movs	r2, #15
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	43db      	mvns	r3, r3
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	4013      	ands	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038a6:	d013      	beq.n	80038d0 <HAL_GPIO_Init+0x1e0>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a46      	ldr	r2, [pc, #280]	; (80039c4 <HAL_GPIO_Init+0x2d4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d00d      	beq.n	80038cc <HAL_GPIO_Init+0x1dc>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a45      	ldr	r2, [pc, #276]	; (80039c8 <HAL_GPIO_Init+0x2d8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d007      	beq.n	80038c8 <HAL_GPIO_Init+0x1d8>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a44      	ldr	r2, [pc, #272]	; (80039cc <HAL_GPIO_Init+0x2dc>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d101      	bne.n	80038c4 <HAL_GPIO_Init+0x1d4>
 80038c0:	2303      	movs	r3, #3
 80038c2:	e006      	b.n	80038d2 <HAL_GPIO_Init+0x1e2>
 80038c4:	2305      	movs	r3, #5
 80038c6:	e004      	b.n	80038d2 <HAL_GPIO_Init+0x1e2>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e002      	b.n	80038d2 <HAL_GPIO_Init+0x1e2>
 80038cc:	2301      	movs	r3, #1
 80038ce:	e000      	b.n	80038d2 <HAL_GPIO_Init+0x1e2>
 80038d0:	2300      	movs	r3, #0
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	f002 0203 	and.w	r2, r2, #3
 80038d8:	0092      	lsls	r2, r2, #2
 80038da:	4093      	lsls	r3, r2
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4313      	orrs	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038e2:	4937      	ldr	r1, [pc, #220]	; (80039c0 <HAL_GPIO_Init+0x2d0>)
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	089b      	lsrs	r3, r3, #2
 80038e8:	3302      	adds	r3, #2
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038f0:	4b37      	ldr	r3, [pc, #220]	; (80039d0 <HAL_GPIO_Init+0x2e0>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	43db      	mvns	r3, r3
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4013      	ands	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4313      	orrs	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003914:	4a2e      	ldr	r2, [pc, #184]	; (80039d0 <HAL_GPIO_Init+0x2e0>)
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800391a:	4b2d      	ldr	r3, [pc, #180]	; (80039d0 <HAL_GPIO_Init+0x2e0>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	43db      	mvns	r3, r3
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4013      	ands	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4313      	orrs	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800393e:	4a24      	ldr	r2, [pc, #144]	; (80039d0 <HAL_GPIO_Init+0x2e0>)
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003944:	4b22      	ldr	r3, [pc, #136]	; (80039d0 <HAL_GPIO_Init+0x2e0>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	43db      	mvns	r3, r3
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4013      	ands	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003968:	4a19      	ldr	r2, [pc, #100]	; (80039d0 <HAL_GPIO_Init+0x2e0>)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800396e:	4b18      	ldr	r3, [pc, #96]	; (80039d0 <HAL_GPIO_Init+0x2e0>)
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	43db      	mvns	r3, r3
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4013      	ands	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003992:	4a0f      	ldr	r2, [pc, #60]	; (80039d0 <HAL_GPIO_Init+0x2e0>)
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	3301      	adds	r3, #1
 800399c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	fa22 f303 	lsr.w	r3, r2, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f47f aea9 	bne.w	8003700 <HAL_GPIO_Init+0x10>
  }
}
 80039ae:	bf00      	nop
 80039b0:	371c      	adds	r7, #28
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40021000 	.word	0x40021000
 80039c0:	40010000 	.word	0x40010000
 80039c4:	48000400 	.word	0x48000400
 80039c8:	48000800 	.word	0x48000800
 80039cc:	48000c00 	.word	0x48000c00
 80039d0:	40010400 	.word	0x40010400

080039d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	807b      	strh	r3, [r7, #2]
 80039e0:	4613      	mov	r3, r2
 80039e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039e4:	787b      	ldrb	r3, [r7, #1]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039ea:	887a      	ldrh	r2, [r7, #2]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039f0:	e002      	b.n	80039f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039f2:	887a      	ldrh	r2, [r7, #2]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a0e:	4b08      	ldr	r3, [pc, #32]	; (8003a30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a10:	695a      	ldr	r2, [r3, #20]
 8003a12:	88fb      	ldrh	r3, [r7, #6]
 8003a14:	4013      	ands	r3, r2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d006      	beq.n	8003a28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a1a:	4a05      	ldr	r2, [pc, #20]	; (8003a30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a1c:	88fb      	ldrh	r3, [r7, #6]
 8003a1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a20:	88fb      	ldrh	r3, [r7, #6]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fd fcf8 	bl	8001418 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a28:	bf00      	nop
 8003a2a:	3708      	adds	r7, #8
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40010400 	.word	0x40010400

08003a34 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8003a38:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a04      	ldr	r2, [pc, #16]	; (8003a50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a42:	6013      	str	r3, [r2, #0]
}
 8003a44:	bf00      	nop
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	40007000 	.word	0x40007000

08003a54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	1d3b      	adds	r3, r7, #4
 8003a5e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a60:	1d3b      	adds	r3, r7, #4
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d102      	bne.n	8003a6e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	f000 bef4 	b.w	8004856 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a6e:	1d3b      	adds	r3, r7, #4
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 816a 	beq.w	8003d52 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003a7e:	4bb3      	ldr	r3, [pc, #716]	; (8003d4c <HAL_RCC_OscConfig+0x2f8>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f003 030c 	and.w	r3, r3, #12
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	d00c      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a8a:	4bb0      	ldr	r3, [pc, #704]	; (8003d4c <HAL_RCC_OscConfig+0x2f8>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d159      	bne.n	8003b4a <HAL_RCC_OscConfig+0xf6>
 8003a96:	4bad      	ldr	r3, [pc, #692]	; (8003d4c <HAL_RCC_OscConfig+0x2f8>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa2:	d152      	bne.n	8003b4a <HAL_RCC_OscConfig+0xf6>
 8003aa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aa8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aac:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003ab0:	fa93 f3a3 	rbit	r3, r3
 8003ab4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8003ab8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003abc:	fab3 f383 	clz	r3, r3
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d102      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x82>
 8003ad0:	4b9e      	ldr	r3, [pc, #632]	; (8003d4c <HAL_RCC_OscConfig+0x2f8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	e015      	b.n	8003b02 <HAL_RCC_OscConfig+0xae>
 8003ad6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ada:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ade:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003ae2:	fa93 f3a3 	rbit	r3, r3
 8003ae6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003aea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aee:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003af2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003af6:	fa93 f3a3 	rbit	r3, r3
 8003afa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003afe:	4b93      	ldr	r3, [pc, #588]	; (8003d4c <HAL_RCC_OscConfig+0x2f8>)
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b06:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003b0a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003b0e:	fa92 f2a2 	rbit	r2, r2
 8003b12:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003b16:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003b1a:	fab2 f282 	clz	r2, r2
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	f042 0220 	orr.w	r2, r2, #32
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	f002 021f 	and.w	r2, r2, #31
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b30:	4013      	ands	r3, r2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 810c 	beq.w	8003d50 <HAL_RCC_OscConfig+0x2fc>
 8003b38:	1d3b      	adds	r3, r7, #4
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f040 8106 	bne.w	8003d50 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	f000 be86 	b.w	8004856 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b4a:	1d3b      	adds	r3, r7, #4
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b54:	d106      	bne.n	8003b64 <HAL_RCC_OscConfig+0x110>
 8003b56:	4b7d      	ldr	r3, [pc, #500]	; (8003d4c <HAL_RCC_OscConfig+0x2f8>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a7c      	ldr	r2, [pc, #496]	; (8003d4c <HAL_RCC_OscConfig+0x2f8>)
 8003b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	e030      	b.n	8003bc6 <HAL_RCC_OscConfig+0x172>
 8003b64:	1d3b      	adds	r3, r7, #4
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10c      	bne.n	8003b88 <HAL_RCC_OscConfig+0x134>
 8003b6e:	4b77      	ldr	r3, [pc, #476]	; (8003d4c <HAL_RCC_OscConfig+0x2f8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a76      	ldr	r2, [pc, #472]	; (8003d4c <HAL_RCC_OscConfig+0x2f8>)
 8003b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	4b74      	ldr	r3, [pc, #464]	; (8003d4c <HAL_RCC_OscConfig+0x2f8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a73      	ldr	r2, [pc, #460]	; (8003d4c <HAL_RCC_OscConfig+0x2f8>)
 8003b80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	e01e      	b.n	8003bc6 <HAL_RCC_OscConfig+0x172>
 8003b88:	1d3b      	adds	r3, r7, #4
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b92:	d10c      	bne.n	8003bae <HAL_RCC_OscConfig+0x15a>
 8003b94:	4b6d      	ldr	r3, [pc, #436]	; (8003d4c <HAL_RCC_OscConfig+0x2f8>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a6c      	ldr	r2, [pc, #432]	; (8003d4c <HAL_RCC_OscConfig+0x2f8>)
 8003b9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	4b6a      	ldr	r3, [pc, #424]	; (8003d4c <HAL_RCC_OscConfig+0x2f8>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a69      	ldr	r2, [pc, #420]	; (8003d4c <HAL_RCC_OscConfig+0x2f8>)
 8003ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003baa:	6013      	str	r3, [r2, #0]
 8003bac:	e00b      	b.n	8003bc6 <HAL_RCC_OscConfig+0x172>
 8003bae:	4b67      	ldr	r3, [pc, #412]	; (8003d4c <HAL_RCC_OscConfig+0x2f8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a66      	ldr	r2, [pc, #408]	; (8003d4c <HAL_RCC_OscConfig+0x2f8>)
 8003bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	4b64      	ldr	r3, [pc, #400]	; (8003d4c <HAL_RCC_OscConfig+0x2f8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a63      	ldr	r2, [pc, #396]	; (8003d4c <HAL_RCC_OscConfig+0x2f8>)
 8003bc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bc4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bc6:	4b61      	ldr	r3, [pc, #388]	; (8003d4c <HAL_RCC_OscConfig+0x2f8>)
 8003bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bca:	f023 020f 	bic.w	r2, r3, #15
 8003bce:	1d3b      	adds	r3, r7, #4
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	495d      	ldr	r1, [pc, #372]	; (8003d4c <HAL_RCC_OscConfig+0x2f8>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bda:	1d3b      	adds	r3, r7, #4
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d059      	beq.n	8003c98 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be4:	f7fe fb72 	bl	80022cc <HAL_GetTick>
 8003be8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bec:	e00a      	b.n	8003c04 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bee:	f7fe fb6d 	bl	80022cc <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b64      	cmp	r3, #100	; 0x64
 8003bfc:	d902      	bls.n	8003c04 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	f000 be29 	b.w	8004856 <HAL_RCC_OscConfig+0xe02>
 8003c04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c08:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003c10:	fa93 f3a3 	rbit	r3, r3
 8003c14:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003c18:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1c:	fab3 f383 	clz	r3, r3
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	f043 0301 	orr.w	r3, r3, #1
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d102      	bne.n	8003c36 <HAL_RCC_OscConfig+0x1e2>
 8003c30:	4b46      	ldr	r3, [pc, #280]	; (8003d4c <HAL_RCC_OscConfig+0x2f8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	e015      	b.n	8003c62 <HAL_RCC_OscConfig+0x20e>
 8003c36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c3a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003c42:	fa93 f3a3 	rbit	r3, r3
 8003c46:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003c4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c4e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003c52:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003c56:	fa93 f3a3 	rbit	r3, r3
 8003c5a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003c5e:	4b3b      	ldr	r3, [pc, #236]	; (8003d4c <HAL_RCC_OscConfig+0x2f8>)
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c66:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003c6a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003c6e:	fa92 f2a2 	rbit	r2, r2
 8003c72:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003c76:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003c7a:	fab2 f282 	clz	r2, r2
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	f042 0220 	orr.w	r2, r2, #32
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	f002 021f 	and.w	r2, r2, #31
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c90:	4013      	ands	r3, r2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0ab      	beq.n	8003bee <HAL_RCC_OscConfig+0x19a>
 8003c96:	e05c      	b.n	8003d52 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c98:	f7fe fb18 	bl	80022cc <HAL_GetTick>
 8003c9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ca0:	e00a      	b.n	8003cb8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ca2:	f7fe fb13 	bl	80022cc <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b64      	cmp	r3, #100	; 0x64
 8003cb0:	d902      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	f000 bdcf 	b.w	8004856 <HAL_RCC_OscConfig+0xe02>
 8003cb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cbc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003cc4:	fa93 f3a3 	rbit	r3, r3
 8003cc8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003ccc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cd0:	fab3 f383 	clz	r3, r3
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	095b      	lsrs	r3, r3, #5
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	f043 0301 	orr.w	r3, r3, #1
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d102      	bne.n	8003cea <HAL_RCC_OscConfig+0x296>
 8003ce4:	4b19      	ldr	r3, [pc, #100]	; (8003d4c <HAL_RCC_OscConfig+0x2f8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	e015      	b.n	8003d16 <HAL_RCC_OscConfig+0x2c2>
 8003cea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cee:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003cf6:	fa93 f3a3 	rbit	r3, r3
 8003cfa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003cfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d02:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003d06:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003d0a:	fa93 f3a3 	rbit	r3, r3
 8003d0e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003d12:	4b0e      	ldr	r3, [pc, #56]	; (8003d4c <HAL_RCC_OscConfig+0x2f8>)
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d1a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003d1e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003d22:	fa92 f2a2 	rbit	r2, r2
 8003d26:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003d2a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003d2e:	fab2 f282 	clz	r2, r2
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	f042 0220 	orr.w	r2, r2, #32
 8003d38:	b2d2      	uxtb	r2, r2
 8003d3a:	f002 021f 	and.w	r2, r2, #31
 8003d3e:	2101      	movs	r1, #1
 8003d40:	fa01 f202 	lsl.w	r2, r1, r2
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1ab      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x24e>
 8003d4a:	e002      	b.n	8003d52 <HAL_RCC_OscConfig+0x2fe>
 8003d4c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d52:	1d3b      	adds	r3, r7, #4
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 816f 	beq.w	8004040 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003d62:	4bd0      	ldr	r3, [pc, #832]	; (80040a4 <HAL_RCC_OscConfig+0x650>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f003 030c 	and.w	r3, r3, #12
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00b      	beq.n	8003d86 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003d6e:	4bcd      	ldr	r3, [pc, #820]	; (80040a4 <HAL_RCC_OscConfig+0x650>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f003 030c 	and.w	r3, r3, #12
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d16c      	bne.n	8003e54 <HAL_RCC_OscConfig+0x400>
 8003d7a:	4bca      	ldr	r3, [pc, #808]	; (80040a4 <HAL_RCC_OscConfig+0x650>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d166      	bne.n	8003e54 <HAL_RCC_OscConfig+0x400>
 8003d86:	2302      	movs	r3, #2
 8003d88:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003d90:	fa93 f3a3 	rbit	r3, r3
 8003d94:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003d98:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d9c:	fab3 f383 	clz	r3, r3
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	095b      	lsrs	r3, r3, #5
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	f043 0301 	orr.w	r3, r3, #1
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d102      	bne.n	8003db6 <HAL_RCC_OscConfig+0x362>
 8003db0:	4bbc      	ldr	r3, [pc, #752]	; (80040a4 <HAL_RCC_OscConfig+0x650>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	e013      	b.n	8003dde <HAL_RCC_OscConfig+0x38a>
 8003db6:	2302      	movs	r3, #2
 8003db8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003dc0:	fa93 f3a3 	rbit	r3, r3
 8003dc4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003dc8:	2302      	movs	r3, #2
 8003dca:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003dce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003dd2:	fa93 f3a3 	rbit	r3, r3
 8003dd6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003dda:	4bb2      	ldr	r3, [pc, #712]	; (80040a4 <HAL_RCC_OscConfig+0x650>)
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	2202      	movs	r2, #2
 8003de0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003de4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003de8:	fa92 f2a2 	rbit	r2, r2
 8003dec:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003df0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003df4:	fab2 f282 	clz	r2, r2
 8003df8:	b2d2      	uxtb	r2, r2
 8003dfa:	f042 0220 	orr.w	r2, r2, #32
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	f002 021f 	and.w	r2, r2, #31
 8003e04:	2101      	movs	r1, #1
 8003e06:	fa01 f202 	lsl.w	r2, r1, r2
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d007      	beq.n	8003e20 <HAL_RCC_OscConfig+0x3cc>
 8003e10:	1d3b      	adds	r3, r7, #4
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d002      	beq.n	8003e20 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	f000 bd1b 	b.w	8004856 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e20:	4ba0      	ldr	r3, [pc, #640]	; (80040a4 <HAL_RCC_OscConfig+0x650>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e28:	1d3b      	adds	r3, r7, #4
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	21f8      	movs	r1, #248	; 0xf8
 8003e30:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e34:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003e38:	fa91 f1a1 	rbit	r1, r1
 8003e3c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003e40:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003e44:	fab1 f181 	clz	r1, r1
 8003e48:	b2c9      	uxtb	r1, r1
 8003e4a:	408b      	lsls	r3, r1
 8003e4c:	4995      	ldr	r1, [pc, #596]	; (80040a4 <HAL_RCC_OscConfig+0x650>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e52:	e0f5      	b.n	8004040 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e54:	1d3b      	adds	r3, r7, #4
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 8085 	beq.w	8003f6a <HAL_RCC_OscConfig+0x516>
 8003e60:	2301      	movs	r3, #1
 8003e62:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e66:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003e6a:	fa93 f3a3 	rbit	r3, r3
 8003e6e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003e72:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e76:	fab3 f383 	clz	r3, r3
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	461a      	mov	r2, r3
 8003e88:	2301      	movs	r3, #1
 8003e8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8c:	f7fe fa1e 	bl	80022cc <HAL_GetTick>
 8003e90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e94:	e00a      	b.n	8003eac <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e96:	f7fe fa19 	bl	80022cc <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d902      	bls.n	8003eac <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	f000 bcd5 	b.w	8004856 <HAL_RCC_OscConfig+0xe02>
 8003eac:	2302      	movs	r3, #2
 8003eae:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003eb6:	fa93 f3a3 	rbit	r3, r3
 8003eba:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003ebe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec2:	fab3 f383 	clz	r3, r3
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	095b      	lsrs	r3, r3, #5
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	f043 0301 	orr.w	r3, r3, #1
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d102      	bne.n	8003edc <HAL_RCC_OscConfig+0x488>
 8003ed6:	4b73      	ldr	r3, [pc, #460]	; (80040a4 <HAL_RCC_OscConfig+0x650>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	e013      	b.n	8003f04 <HAL_RCC_OscConfig+0x4b0>
 8003edc:	2302      	movs	r3, #2
 8003ede:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003ee6:	fa93 f3a3 	rbit	r3, r3
 8003eea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003eee:	2302      	movs	r3, #2
 8003ef0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003ef4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003ef8:	fa93 f3a3 	rbit	r3, r3
 8003efc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003f00:	4b68      	ldr	r3, [pc, #416]	; (80040a4 <HAL_RCC_OscConfig+0x650>)
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	2202      	movs	r2, #2
 8003f06:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003f0a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003f0e:	fa92 f2a2 	rbit	r2, r2
 8003f12:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003f16:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003f1a:	fab2 f282 	clz	r2, r2
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	f042 0220 	orr.w	r2, r2, #32
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	f002 021f 	and.w	r2, r2, #31
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f30:	4013      	ands	r3, r2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0af      	beq.n	8003e96 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f36:	4b5b      	ldr	r3, [pc, #364]	; (80040a4 <HAL_RCC_OscConfig+0x650>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f3e:	1d3b      	adds	r3, r7, #4
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	21f8      	movs	r1, #248	; 0xf8
 8003f46:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003f4e:	fa91 f1a1 	rbit	r1, r1
 8003f52:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003f56:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003f5a:	fab1 f181 	clz	r1, r1
 8003f5e:	b2c9      	uxtb	r1, r1
 8003f60:	408b      	lsls	r3, r1
 8003f62:	4950      	ldr	r1, [pc, #320]	; (80040a4 <HAL_RCC_OscConfig+0x650>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	600b      	str	r3, [r1, #0]
 8003f68:	e06a      	b.n	8004040 <HAL_RCC_OscConfig+0x5ec>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f70:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f74:	fa93 f3a3 	rbit	r3, r3
 8003f78:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003f7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f80:	fab3 f383 	clz	r3, r3
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f8a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	461a      	mov	r2, r3
 8003f92:	2300      	movs	r3, #0
 8003f94:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f96:	f7fe f999 	bl	80022cc <HAL_GetTick>
 8003f9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f9e:	e00a      	b.n	8003fb6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fa0:	f7fe f994 	bl	80022cc <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d902      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	f000 bc50 	b.w	8004856 <HAL_RCC_OscConfig+0xe02>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003fc0:	fa93 f3a3 	rbit	r3, r3
 8003fc4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003fc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fcc:	fab3 f383 	clz	r3, r3
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	f043 0301 	orr.w	r3, r3, #1
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d102      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x592>
 8003fe0:	4b30      	ldr	r3, [pc, #192]	; (80040a4 <HAL_RCC_OscConfig+0x650>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	e013      	b.n	800400e <HAL_RCC_OscConfig+0x5ba>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ff0:	fa93 f3a3 	rbit	r3, r3
 8003ff4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003ffe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004002:	fa93 f3a3 	rbit	r3, r3
 8004006:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800400a:	4b26      	ldr	r3, [pc, #152]	; (80040a4 <HAL_RCC_OscConfig+0x650>)
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	2202      	movs	r2, #2
 8004010:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004014:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004018:	fa92 f2a2 	rbit	r2, r2
 800401c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004020:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004024:	fab2 f282 	clz	r2, r2
 8004028:	b2d2      	uxtb	r2, r2
 800402a:	f042 0220 	orr.w	r2, r2, #32
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	f002 021f 	and.w	r2, r2, #31
 8004034:	2101      	movs	r1, #1
 8004036:	fa01 f202 	lsl.w	r2, r1, r2
 800403a:	4013      	ands	r3, r2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1af      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004040:	1d3b      	adds	r3, r7, #4
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 80da 	beq.w	8004204 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004050:	1d3b      	adds	r3, r7, #4
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d069      	beq.n	800412e <HAL_RCC_OscConfig+0x6da>
 800405a:	2301      	movs	r3, #1
 800405c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004060:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004064:	fa93 f3a3 	rbit	r3, r3
 8004068:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800406c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004070:	fab3 f383 	clz	r3, r3
 8004074:	b2db      	uxtb	r3, r3
 8004076:	461a      	mov	r2, r3
 8004078:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <HAL_RCC_OscConfig+0x654>)
 800407a:	4413      	add	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	461a      	mov	r2, r3
 8004080:	2301      	movs	r3, #1
 8004082:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004084:	f7fe f922 	bl	80022cc <HAL_GetTick>
 8004088:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800408c:	e00e      	b.n	80040ac <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800408e:	f7fe f91d 	bl	80022cc <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d906      	bls.n	80040ac <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e3d9      	b.n	8004856 <HAL_RCC_OscConfig+0xe02>
 80040a2:	bf00      	nop
 80040a4:	40021000 	.word	0x40021000
 80040a8:	10908120 	.word	0x10908120
 80040ac:	2302      	movs	r3, #2
 80040ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80040b6:	fa93 f3a3 	rbit	r3, r3
 80040ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80040be:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80040c2:	2202      	movs	r2, #2
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	fa93 f2a3 	rbit	r2, r3
 80040d0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80040da:	2202      	movs	r2, #2
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	fa93 f2a3 	rbit	r2, r3
 80040e8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80040ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ee:	4ba5      	ldr	r3, [pc, #660]	; (8004384 <HAL_RCC_OscConfig+0x930>)
 80040f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040f2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80040f6:	2102      	movs	r1, #2
 80040f8:	6019      	str	r1, [r3, #0]
 80040fa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	fa93 f1a3 	rbit	r1, r3
 8004104:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004108:	6019      	str	r1, [r3, #0]
  return result;
 800410a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	fab3 f383 	clz	r3, r3
 8004114:	b2db      	uxtb	r3, r3
 8004116:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800411a:	b2db      	uxtb	r3, r3
 800411c:	f003 031f 	and.w	r3, r3, #31
 8004120:	2101      	movs	r1, #1
 8004122:	fa01 f303 	lsl.w	r3, r1, r3
 8004126:	4013      	ands	r3, r2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0b0      	beq.n	800408e <HAL_RCC_OscConfig+0x63a>
 800412c:	e06a      	b.n	8004204 <HAL_RCC_OscConfig+0x7b0>
 800412e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004132:	2201      	movs	r2, #1
 8004134:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004136:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	fa93 f2a3 	rbit	r2, r3
 8004140:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004144:	601a      	str	r2, [r3, #0]
  return result;
 8004146:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800414a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800414c:	fab3 f383 	clz	r3, r3
 8004150:	b2db      	uxtb	r3, r3
 8004152:	461a      	mov	r2, r3
 8004154:	4b8c      	ldr	r3, [pc, #560]	; (8004388 <HAL_RCC_OscConfig+0x934>)
 8004156:	4413      	add	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	461a      	mov	r2, r3
 800415c:	2300      	movs	r3, #0
 800415e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004160:	f7fe f8b4 	bl	80022cc <HAL_GetTick>
 8004164:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004168:	e009      	b.n	800417e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800416a:	f7fe f8af 	bl	80022cc <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e36b      	b.n	8004856 <HAL_RCC_OscConfig+0xe02>
 800417e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004182:	2202      	movs	r2, #2
 8004184:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004186:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	fa93 f2a3 	rbit	r2, r3
 8004190:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800419a:	2202      	movs	r2, #2
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	fa93 f2a3 	rbit	r2, r3
 80041a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80041b2:	2202      	movs	r2, #2
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	fa93 f2a3 	rbit	r2, r3
 80041c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80041c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c6:	4b6f      	ldr	r3, [pc, #444]	; (8004384 <HAL_RCC_OscConfig+0x930>)
 80041c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041ca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80041ce:	2102      	movs	r1, #2
 80041d0:	6019      	str	r1, [r3, #0]
 80041d2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	fa93 f1a3 	rbit	r1, r3
 80041dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80041e0:	6019      	str	r1, [r3, #0]
  return result;
 80041e2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	fab3 f383 	clz	r3, r3
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	f003 031f 	and.w	r3, r3, #31
 80041f8:	2101      	movs	r1, #1
 80041fa:	fa01 f303 	lsl.w	r3, r1, r3
 80041fe:	4013      	ands	r3, r2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1b2      	bne.n	800416a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004204:	1d3b      	adds	r3, r7, #4
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0304 	and.w	r3, r3, #4
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 8158 	beq.w	80044c4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004214:	2300      	movs	r3, #0
 8004216:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800421a:	4b5a      	ldr	r3, [pc, #360]	; (8004384 <HAL_RCC_OscConfig+0x930>)
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d112      	bne.n	800424c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004226:	4b57      	ldr	r3, [pc, #348]	; (8004384 <HAL_RCC_OscConfig+0x930>)
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	4a56      	ldr	r2, [pc, #344]	; (8004384 <HAL_RCC_OscConfig+0x930>)
 800422c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004230:	61d3      	str	r3, [r2, #28]
 8004232:	4b54      	ldr	r3, [pc, #336]	; (8004384 <HAL_RCC_OscConfig+0x930>)
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800423a:	f107 0308 	add.w	r3, r7, #8
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	f107 0308 	add.w	r3, r7, #8
 8004244:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004246:	2301      	movs	r3, #1
 8004248:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424c:	4b4f      	ldr	r3, [pc, #316]	; (800438c <HAL_RCC_OscConfig+0x938>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004254:	2b00      	cmp	r3, #0
 8004256:	d11a      	bne.n	800428e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004258:	4b4c      	ldr	r3, [pc, #304]	; (800438c <HAL_RCC_OscConfig+0x938>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a4b      	ldr	r2, [pc, #300]	; (800438c <HAL_RCC_OscConfig+0x938>)
 800425e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004262:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004264:	f7fe f832 	bl	80022cc <HAL_GetTick>
 8004268:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800426c:	e009      	b.n	8004282 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800426e:	f7fe f82d 	bl	80022cc <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b64      	cmp	r3, #100	; 0x64
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e2e9      	b.n	8004856 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004282:	4b42      	ldr	r3, [pc, #264]	; (800438c <HAL_RCC_OscConfig+0x938>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0ef      	beq.n	800426e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800428e:	1d3b      	adds	r3, r7, #4
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d106      	bne.n	80042a6 <HAL_RCC_OscConfig+0x852>
 8004298:	4b3a      	ldr	r3, [pc, #232]	; (8004384 <HAL_RCC_OscConfig+0x930>)
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	4a39      	ldr	r2, [pc, #228]	; (8004384 <HAL_RCC_OscConfig+0x930>)
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	6213      	str	r3, [r2, #32]
 80042a4:	e02f      	b.n	8004306 <HAL_RCC_OscConfig+0x8b2>
 80042a6:	1d3b      	adds	r3, r7, #4
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10c      	bne.n	80042ca <HAL_RCC_OscConfig+0x876>
 80042b0:	4b34      	ldr	r3, [pc, #208]	; (8004384 <HAL_RCC_OscConfig+0x930>)
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	4a33      	ldr	r2, [pc, #204]	; (8004384 <HAL_RCC_OscConfig+0x930>)
 80042b6:	f023 0301 	bic.w	r3, r3, #1
 80042ba:	6213      	str	r3, [r2, #32]
 80042bc:	4b31      	ldr	r3, [pc, #196]	; (8004384 <HAL_RCC_OscConfig+0x930>)
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	4a30      	ldr	r2, [pc, #192]	; (8004384 <HAL_RCC_OscConfig+0x930>)
 80042c2:	f023 0304 	bic.w	r3, r3, #4
 80042c6:	6213      	str	r3, [r2, #32]
 80042c8:	e01d      	b.n	8004306 <HAL_RCC_OscConfig+0x8b2>
 80042ca:	1d3b      	adds	r3, r7, #4
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	2b05      	cmp	r3, #5
 80042d2:	d10c      	bne.n	80042ee <HAL_RCC_OscConfig+0x89a>
 80042d4:	4b2b      	ldr	r3, [pc, #172]	; (8004384 <HAL_RCC_OscConfig+0x930>)
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	4a2a      	ldr	r2, [pc, #168]	; (8004384 <HAL_RCC_OscConfig+0x930>)
 80042da:	f043 0304 	orr.w	r3, r3, #4
 80042de:	6213      	str	r3, [r2, #32]
 80042e0:	4b28      	ldr	r3, [pc, #160]	; (8004384 <HAL_RCC_OscConfig+0x930>)
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	4a27      	ldr	r2, [pc, #156]	; (8004384 <HAL_RCC_OscConfig+0x930>)
 80042e6:	f043 0301 	orr.w	r3, r3, #1
 80042ea:	6213      	str	r3, [r2, #32]
 80042ec:	e00b      	b.n	8004306 <HAL_RCC_OscConfig+0x8b2>
 80042ee:	4b25      	ldr	r3, [pc, #148]	; (8004384 <HAL_RCC_OscConfig+0x930>)
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	4a24      	ldr	r2, [pc, #144]	; (8004384 <HAL_RCC_OscConfig+0x930>)
 80042f4:	f023 0301 	bic.w	r3, r3, #1
 80042f8:	6213      	str	r3, [r2, #32]
 80042fa:	4b22      	ldr	r3, [pc, #136]	; (8004384 <HAL_RCC_OscConfig+0x930>)
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	4a21      	ldr	r2, [pc, #132]	; (8004384 <HAL_RCC_OscConfig+0x930>)
 8004300:	f023 0304 	bic.w	r3, r3, #4
 8004304:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004306:	1d3b      	adds	r3, r7, #4
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d06b      	beq.n	80043e8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004310:	f7fd ffdc 	bl	80022cc <HAL_GetTick>
 8004314:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004318:	e00b      	b.n	8004332 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800431a:	f7fd ffd7 	bl	80022cc <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	f241 3288 	movw	r2, #5000	; 0x1388
 800432a:	4293      	cmp	r3, r2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e291      	b.n	8004856 <HAL_RCC_OscConfig+0xe02>
 8004332:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004336:	2202      	movs	r2, #2
 8004338:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	fa93 f2a3 	rbit	r2, r3
 8004344:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800434e:	2202      	movs	r2, #2
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	fa93 f2a3 	rbit	r2, r3
 800435c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004360:	601a      	str	r2, [r3, #0]
  return result;
 8004362:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004366:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004368:	fab3 f383 	clz	r3, r3
 800436c:	b2db      	uxtb	r3, r3
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	b2db      	uxtb	r3, r3
 8004372:	f043 0302 	orr.w	r3, r3, #2
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d109      	bne.n	8004390 <HAL_RCC_OscConfig+0x93c>
 800437c:	4b01      	ldr	r3, [pc, #4]	; (8004384 <HAL_RCC_OscConfig+0x930>)
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	e014      	b.n	80043ac <HAL_RCC_OscConfig+0x958>
 8004382:	bf00      	nop
 8004384:	40021000 	.word	0x40021000
 8004388:	10908120 	.word	0x10908120
 800438c:	40007000 	.word	0x40007000
 8004390:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004394:	2202      	movs	r2, #2
 8004396:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004398:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	fa93 f2a3 	rbit	r2, r3
 80043a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	4bbb      	ldr	r3, [pc, #748]	; (8004698 <HAL_RCC_OscConfig+0xc44>)
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80043b0:	2102      	movs	r1, #2
 80043b2:	6011      	str	r1, [r2, #0]
 80043b4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80043b8:	6812      	ldr	r2, [r2, #0]
 80043ba:	fa92 f1a2 	rbit	r1, r2
 80043be:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80043c2:	6011      	str	r1, [r2, #0]
  return result;
 80043c4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80043c8:	6812      	ldr	r2, [r2, #0]
 80043ca:	fab2 f282 	clz	r2, r2
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043d4:	b2d2      	uxtb	r2, r2
 80043d6:	f002 021f 	and.w	r2, r2, #31
 80043da:	2101      	movs	r1, #1
 80043dc:	fa01 f202 	lsl.w	r2, r1, r2
 80043e0:	4013      	ands	r3, r2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d099      	beq.n	800431a <HAL_RCC_OscConfig+0x8c6>
 80043e6:	e063      	b.n	80044b0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e8:	f7fd ff70 	bl	80022cc <HAL_GetTick>
 80043ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f0:	e00b      	b.n	800440a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043f2:	f7fd ff6b 	bl	80022cc <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004402:	4293      	cmp	r3, r2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e225      	b.n	8004856 <HAL_RCC_OscConfig+0xe02>
 800440a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800440e:	2202      	movs	r2, #2
 8004410:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004412:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	fa93 f2a3 	rbit	r2, r3
 800441c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004426:	2202      	movs	r2, #2
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	fa93 f2a3 	rbit	r2, r3
 8004434:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004438:	601a      	str	r2, [r3, #0]
  return result;
 800443a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800443e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004440:	fab3 f383 	clz	r3, r3
 8004444:	b2db      	uxtb	r3, r3
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	b2db      	uxtb	r3, r3
 800444a:	f043 0302 	orr.w	r3, r3, #2
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d102      	bne.n	800445a <HAL_RCC_OscConfig+0xa06>
 8004454:	4b90      	ldr	r3, [pc, #576]	; (8004698 <HAL_RCC_OscConfig+0xc44>)
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	e00d      	b.n	8004476 <HAL_RCC_OscConfig+0xa22>
 800445a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800445e:	2202      	movs	r2, #2
 8004460:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004462:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	fa93 f2a3 	rbit	r2, r3
 800446c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	4b89      	ldr	r3, [pc, #548]	; (8004698 <HAL_RCC_OscConfig+0xc44>)
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800447a:	2102      	movs	r1, #2
 800447c:	6011      	str	r1, [r2, #0]
 800447e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004482:	6812      	ldr	r2, [r2, #0]
 8004484:	fa92 f1a2 	rbit	r1, r2
 8004488:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800448c:	6011      	str	r1, [r2, #0]
  return result;
 800448e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004492:	6812      	ldr	r2, [r2, #0]
 8004494:	fab2 f282 	clz	r2, r2
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	f002 021f 	and.w	r2, r2, #31
 80044a4:	2101      	movs	r1, #1
 80044a6:	fa01 f202 	lsl.w	r2, r1, r2
 80044aa:	4013      	ands	r3, r2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1a0      	bne.n	80043f2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044b0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d105      	bne.n	80044c4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044b8:	4b77      	ldr	r3, [pc, #476]	; (8004698 <HAL_RCC_OscConfig+0xc44>)
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	4a76      	ldr	r2, [pc, #472]	; (8004698 <HAL_RCC_OscConfig+0xc44>)
 80044be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044c2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044c4:	1d3b      	adds	r3, r7, #4
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 81c2 	beq.w	8004854 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044d0:	4b71      	ldr	r3, [pc, #452]	; (8004698 <HAL_RCC_OscConfig+0xc44>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f003 030c 	and.w	r3, r3, #12
 80044d8:	2b08      	cmp	r3, #8
 80044da:	f000 819c 	beq.w	8004816 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044de:	1d3b      	adds	r3, r7, #4
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	f040 8114 	bne.w	8004712 <HAL_RCC_OscConfig+0xcbe>
 80044ea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80044ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	fa93 f2a3 	rbit	r2, r3
 80044fe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004502:	601a      	str	r2, [r3, #0]
  return result;
 8004504:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004508:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800450a:	fab3 f383 	clz	r3, r3
 800450e:	b2db      	uxtb	r3, r3
 8004510:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004514:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	461a      	mov	r2, r3
 800451c:	2300      	movs	r3, #0
 800451e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004520:	f7fd fed4 	bl	80022cc <HAL_GetTick>
 8004524:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004528:	e009      	b.n	800453e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800452a:	f7fd fecf 	bl	80022cc <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e18b      	b.n	8004856 <HAL_RCC_OscConfig+0xe02>
 800453e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004542:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004546:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004548:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	fa93 f2a3 	rbit	r2, r3
 8004552:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004556:	601a      	str	r2, [r3, #0]
  return result;
 8004558:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800455c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800455e:	fab3 f383 	clz	r3, r3
 8004562:	b2db      	uxtb	r3, r3
 8004564:	095b      	lsrs	r3, r3, #5
 8004566:	b2db      	uxtb	r3, r3
 8004568:	f043 0301 	orr.w	r3, r3, #1
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b01      	cmp	r3, #1
 8004570:	d102      	bne.n	8004578 <HAL_RCC_OscConfig+0xb24>
 8004572:	4b49      	ldr	r3, [pc, #292]	; (8004698 <HAL_RCC_OscConfig+0xc44>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	e01b      	b.n	80045b0 <HAL_RCC_OscConfig+0xb5c>
 8004578:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800457c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004580:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004582:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	fa93 f2a3 	rbit	r2, r3
 800458c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004596:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	fa93 f2a3 	rbit	r2, r3
 80045a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	4b3a      	ldr	r3, [pc, #232]	; (8004698 <HAL_RCC_OscConfig+0xc44>)
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80045b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80045b8:	6011      	str	r1, [r2, #0]
 80045ba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80045be:	6812      	ldr	r2, [r2, #0]
 80045c0:	fa92 f1a2 	rbit	r1, r2
 80045c4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80045c8:	6011      	str	r1, [r2, #0]
  return result;
 80045ca:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80045ce:	6812      	ldr	r2, [r2, #0]
 80045d0:	fab2 f282 	clz	r2, r2
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	f042 0220 	orr.w	r2, r2, #32
 80045da:	b2d2      	uxtb	r2, r2
 80045dc:	f002 021f 	and.w	r2, r2, #31
 80045e0:	2101      	movs	r1, #1
 80045e2:	fa01 f202 	lsl.w	r2, r1, r2
 80045e6:	4013      	ands	r3, r2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d19e      	bne.n	800452a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045ec:	4b2a      	ldr	r3, [pc, #168]	; (8004698 <HAL_RCC_OscConfig+0xc44>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80045f4:	1d3b      	adds	r3, r7, #4
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80045fa:	1d3b      	adds	r3, r7, #4
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	430b      	orrs	r3, r1
 8004602:	4925      	ldr	r1, [pc, #148]	; (8004698 <HAL_RCC_OscConfig+0xc44>)
 8004604:	4313      	orrs	r3, r2
 8004606:	604b      	str	r3, [r1, #4]
 8004608:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800460c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004610:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004612:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	fa93 f2a3 	rbit	r2, r3
 800461c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004620:	601a      	str	r2, [r3, #0]
  return result;
 8004622:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004626:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004628:	fab3 f383 	clz	r3, r3
 800462c:	b2db      	uxtb	r3, r3
 800462e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004632:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	461a      	mov	r2, r3
 800463a:	2301      	movs	r3, #1
 800463c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463e:	f7fd fe45 	bl	80022cc <HAL_GetTick>
 8004642:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004646:	e009      	b.n	800465c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004648:	f7fd fe40 	bl	80022cc <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e0fc      	b.n	8004856 <HAL_RCC_OscConfig+0xe02>
 800465c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004660:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004664:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004666:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	fa93 f2a3 	rbit	r2, r3
 8004670:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004674:	601a      	str	r2, [r3, #0]
  return result;
 8004676:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800467a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800467c:	fab3 f383 	clz	r3, r3
 8004680:	b2db      	uxtb	r3, r3
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	b2db      	uxtb	r3, r3
 8004686:	f043 0301 	orr.w	r3, r3, #1
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b01      	cmp	r3, #1
 800468e:	d105      	bne.n	800469c <HAL_RCC_OscConfig+0xc48>
 8004690:	4b01      	ldr	r3, [pc, #4]	; (8004698 <HAL_RCC_OscConfig+0xc44>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	e01e      	b.n	80046d4 <HAL_RCC_OscConfig+0xc80>
 8004696:	bf00      	nop
 8004698:	40021000 	.word	0x40021000
 800469c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80046a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	fa93 f2a3 	rbit	r2, r3
 80046b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80046ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	fa93 f2a3 	rbit	r2, r3
 80046ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	4b63      	ldr	r3, [pc, #396]	; (8004860 <HAL_RCC_OscConfig+0xe0c>)
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80046d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80046dc:	6011      	str	r1, [r2, #0]
 80046de:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80046e2:	6812      	ldr	r2, [r2, #0]
 80046e4:	fa92 f1a2 	rbit	r1, r2
 80046e8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80046ec:	6011      	str	r1, [r2, #0]
  return result;
 80046ee:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80046f2:	6812      	ldr	r2, [r2, #0]
 80046f4:	fab2 f282 	clz	r2, r2
 80046f8:	b2d2      	uxtb	r2, r2
 80046fa:	f042 0220 	orr.w	r2, r2, #32
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	f002 021f 	and.w	r2, r2, #31
 8004704:	2101      	movs	r1, #1
 8004706:	fa01 f202 	lsl.w	r2, r1, r2
 800470a:	4013      	ands	r3, r2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d09b      	beq.n	8004648 <HAL_RCC_OscConfig+0xbf4>
 8004710:	e0a0      	b.n	8004854 <HAL_RCC_OscConfig+0xe00>
 8004712:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004716:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800471a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	fa93 f2a3 	rbit	r2, r3
 8004726:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800472a:	601a      	str	r2, [r3, #0]
  return result;
 800472c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004730:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004732:	fab3 f383 	clz	r3, r3
 8004736:	b2db      	uxtb	r3, r3
 8004738:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800473c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	461a      	mov	r2, r3
 8004744:	2300      	movs	r3, #0
 8004746:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004748:	f7fd fdc0 	bl	80022cc <HAL_GetTick>
 800474c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004750:	e009      	b.n	8004766 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004752:	f7fd fdbb 	bl	80022cc <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e077      	b.n	8004856 <HAL_RCC_OscConfig+0xe02>
 8004766:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800476a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800476e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004770:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	fa93 f2a3 	rbit	r2, r3
 800477a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800477e:	601a      	str	r2, [r3, #0]
  return result;
 8004780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004784:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004786:	fab3 f383 	clz	r3, r3
 800478a:	b2db      	uxtb	r3, r3
 800478c:	095b      	lsrs	r3, r3, #5
 800478e:	b2db      	uxtb	r3, r3
 8004790:	f043 0301 	orr.w	r3, r3, #1
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b01      	cmp	r3, #1
 8004798:	d102      	bne.n	80047a0 <HAL_RCC_OscConfig+0xd4c>
 800479a:	4b31      	ldr	r3, [pc, #196]	; (8004860 <HAL_RCC_OscConfig+0xe0c>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	e01b      	b.n	80047d8 <HAL_RCC_OscConfig+0xd84>
 80047a0:	f107 0320 	add.w	r3, r7, #32
 80047a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047aa:	f107 0320 	add.w	r3, r7, #32
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	fa93 f2a3 	rbit	r2, r3
 80047b4:	f107 031c 	add.w	r3, r7, #28
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	f107 0318 	add.w	r3, r7, #24
 80047be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	f107 0318 	add.w	r3, r7, #24
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	fa93 f2a3 	rbit	r2, r3
 80047ce:	f107 0314 	add.w	r3, r7, #20
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	4b22      	ldr	r3, [pc, #136]	; (8004860 <HAL_RCC_OscConfig+0xe0c>)
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	f107 0210 	add.w	r2, r7, #16
 80047dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80047e0:	6011      	str	r1, [r2, #0]
 80047e2:	f107 0210 	add.w	r2, r7, #16
 80047e6:	6812      	ldr	r2, [r2, #0]
 80047e8:	fa92 f1a2 	rbit	r1, r2
 80047ec:	f107 020c 	add.w	r2, r7, #12
 80047f0:	6011      	str	r1, [r2, #0]
  return result;
 80047f2:	f107 020c 	add.w	r2, r7, #12
 80047f6:	6812      	ldr	r2, [r2, #0]
 80047f8:	fab2 f282 	clz	r2, r2
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	f042 0220 	orr.w	r2, r2, #32
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	f002 021f 	and.w	r2, r2, #31
 8004808:	2101      	movs	r1, #1
 800480a:	fa01 f202 	lsl.w	r2, r1, r2
 800480e:	4013      	ands	r3, r2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d19e      	bne.n	8004752 <HAL_RCC_OscConfig+0xcfe>
 8004814:	e01e      	b.n	8004854 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004816:	1d3b      	adds	r3, r7, #4
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d101      	bne.n	8004824 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e018      	b.n	8004856 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004824:	4b0e      	ldr	r3, [pc, #56]	; (8004860 <HAL_RCC_OscConfig+0xe0c>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800482c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004830:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004834:	1d3b      	adds	r3, r7, #4
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	429a      	cmp	r2, r3
 800483c:	d108      	bne.n	8004850 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800483e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004842:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004846:	1d3b      	adds	r3, r7, #4
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800484c:	429a      	cmp	r2, r3
 800484e:	d001      	beq.n	8004854 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e000      	b.n	8004856 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40021000 	.word	0x40021000

08004864 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b09e      	sub	sp, #120	; 0x78
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e162      	b.n	8004b42 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800487c:	4b90      	ldr	r3, [pc, #576]	; (8004ac0 <HAL_RCC_ClockConfig+0x25c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d910      	bls.n	80048ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800488a:	4b8d      	ldr	r3, [pc, #564]	; (8004ac0 <HAL_RCC_ClockConfig+0x25c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f023 0207 	bic.w	r2, r3, #7
 8004892:	498b      	ldr	r1, [pc, #556]	; (8004ac0 <HAL_RCC_ClockConfig+0x25c>)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	4313      	orrs	r3, r2
 8004898:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800489a:	4b89      	ldr	r3, [pc, #548]	; (8004ac0 <HAL_RCC_ClockConfig+0x25c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0307 	and.w	r3, r3, #7
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d001      	beq.n	80048ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e14a      	b.n	8004b42 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d008      	beq.n	80048ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048b8:	4b82      	ldr	r3, [pc, #520]	; (8004ac4 <HAL_RCC_ClockConfig+0x260>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	497f      	ldr	r1, [pc, #508]	; (8004ac4 <HAL_RCC_ClockConfig+0x260>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 80dc 	beq.w	8004a90 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d13c      	bne.n	800495a <HAL_RCC_ClockConfig+0xf6>
 80048e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048e8:	fa93 f3a3 	rbit	r3, r3
 80048ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80048ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048f0:	fab3 f383 	clz	r3, r3
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	095b      	lsrs	r3, r3, #5
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	f043 0301 	orr.w	r3, r3, #1
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b01      	cmp	r3, #1
 8004902:	d102      	bne.n	800490a <HAL_RCC_ClockConfig+0xa6>
 8004904:	4b6f      	ldr	r3, [pc, #444]	; (8004ac4 <HAL_RCC_ClockConfig+0x260>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	e00f      	b.n	800492a <HAL_RCC_ClockConfig+0xc6>
 800490a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800490e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004910:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004912:	fa93 f3a3 	rbit	r3, r3
 8004916:	667b      	str	r3, [r7, #100]	; 0x64
 8004918:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800491c:	663b      	str	r3, [r7, #96]	; 0x60
 800491e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004920:	fa93 f3a3 	rbit	r3, r3
 8004924:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004926:	4b67      	ldr	r3, [pc, #412]	; (8004ac4 <HAL_RCC_ClockConfig+0x260>)
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800492e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004930:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004932:	fa92 f2a2 	rbit	r2, r2
 8004936:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004938:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800493a:	fab2 f282 	clz	r2, r2
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	f042 0220 	orr.w	r2, r2, #32
 8004944:	b2d2      	uxtb	r2, r2
 8004946:	f002 021f 	and.w	r2, r2, #31
 800494a:	2101      	movs	r1, #1
 800494c:	fa01 f202 	lsl.w	r2, r1, r2
 8004950:	4013      	ands	r3, r2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d17b      	bne.n	8004a4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e0f3      	b.n	8004b42 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2b02      	cmp	r3, #2
 8004960:	d13c      	bne.n	80049dc <HAL_RCC_ClockConfig+0x178>
 8004962:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004966:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800496a:	fa93 f3a3 	rbit	r3, r3
 800496e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004972:	fab3 f383 	clz	r3, r3
 8004976:	b2db      	uxtb	r3, r3
 8004978:	095b      	lsrs	r3, r3, #5
 800497a:	b2db      	uxtb	r3, r3
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b01      	cmp	r3, #1
 8004984:	d102      	bne.n	800498c <HAL_RCC_ClockConfig+0x128>
 8004986:	4b4f      	ldr	r3, [pc, #316]	; (8004ac4 <HAL_RCC_ClockConfig+0x260>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	e00f      	b.n	80049ac <HAL_RCC_ClockConfig+0x148>
 800498c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004990:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004994:	fa93 f3a3 	rbit	r3, r3
 8004998:	647b      	str	r3, [r7, #68]	; 0x44
 800499a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800499e:	643b      	str	r3, [r7, #64]	; 0x40
 80049a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049a2:	fa93 f3a3 	rbit	r3, r3
 80049a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049a8:	4b46      	ldr	r3, [pc, #280]	; (8004ac4 <HAL_RCC_ClockConfig+0x260>)
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80049b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049b4:	fa92 f2a2 	rbit	r2, r2
 80049b8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80049ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049bc:	fab2 f282 	clz	r2, r2
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	f042 0220 	orr.w	r2, r2, #32
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	f002 021f 	and.w	r2, r2, #31
 80049cc:	2101      	movs	r1, #1
 80049ce:	fa01 f202 	lsl.w	r2, r1, r2
 80049d2:	4013      	ands	r3, r2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d13a      	bne.n	8004a4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e0b2      	b.n	8004b42 <HAL_RCC_ClockConfig+0x2de>
 80049dc:	2302      	movs	r3, #2
 80049de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e2:	fa93 f3a3 	rbit	r3, r3
 80049e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80049e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ea:	fab3 f383 	clz	r3, r3
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	095b      	lsrs	r3, r3, #5
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	f043 0301 	orr.w	r3, r3, #1
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d102      	bne.n	8004a04 <HAL_RCC_ClockConfig+0x1a0>
 80049fe:	4b31      	ldr	r3, [pc, #196]	; (8004ac4 <HAL_RCC_ClockConfig+0x260>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	e00d      	b.n	8004a20 <HAL_RCC_ClockConfig+0x1bc>
 8004a04:	2302      	movs	r3, #2
 8004a06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0a:	fa93 f3a3 	rbit	r3, r3
 8004a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a10:	2302      	movs	r3, #2
 8004a12:	623b      	str	r3, [r7, #32]
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	fa93 f3a3 	rbit	r3, r3
 8004a1a:	61fb      	str	r3, [r7, #28]
 8004a1c:	4b29      	ldr	r3, [pc, #164]	; (8004ac4 <HAL_RCC_ClockConfig+0x260>)
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	2202      	movs	r2, #2
 8004a22:	61ba      	str	r2, [r7, #24]
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	fa92 f2a2 	rbit	r2, r2
 8004a2a:	617a      	str	r2, [r7, #20]
  return result;
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	fab2 f282 	clz	r2, r2
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	f042 0220 	orr.w	r2, r2, #32
 8004a38:	b2d2      	uxtb	r2, r2
 8004a3a:	f002 021f 	and.w	r2, r2, #31
 8004a3e:	2101      	movs	r1, #1
 8004a40:	fa01 f202 	lsl.w	r2, r1, r2
 8004a44:	4013      	ands	r3, r2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e079      	b.n	8004b42 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a4e:	4b1d      	ldr	r3, [pc, #116]	; (8004ac4 <HAL_RCC_ClockConfig+0x260>)
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f023 0203 	bic.w	r2, r3, #3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	491a      	ldr	r1, [pc, #104]	; (8004ac4 <HAL_RCC_ClockConfig+0x260>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a60:	f7fd fc34 	bl	80022cc <HAL_GetTick>
 8004a64:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a66:	e00a      	b.n	8004a7e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a68:	f7fd fc30 	bl	80022cc <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e061      	b.n	8004b42 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7e:	4b11      	ldr	r3, [pc, #68]	; (8004ac4 <HAL_RCC_ClockConfig+0x260>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f003 020c 	and.w	r2, r3, #12
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d1eb      	bne.n	8004a68 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a90:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <HAL_RCC_ClockConfig+0x25c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d214      	bcs.n	8004ac8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a9e:	4b08      	ldr	r3, [pc, #32]	; (8004ac0 <HAL_RCC_ClockConfig+0x25c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f023 0207 	bic.w	r2, r3, #7
 8004aa6:	4906      	ldr	r1, [pc, #24]	; (8004ac0 <HAL_RCC_ClockConfig+0x25c>)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aae:	4b04      	ldr	r3, [pc, #16]	; (8004ac0 <HAL_RCC_ClockConfig+0x25c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d005      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e040      	b.n	8004b42 <HAL_RCC_ClockConfig+0x2de>
 8004ac0:	40022000 	.word	0x40022000
 8004ac4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0304 	and.w	r3, r3, #4
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d008      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ad4:	4b1d      	ldr	r3, [pc, #116]	; (8004b4c <HAL_RCC_ClockConfig+0x2e8>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	491a      	ldr	r1, [pc, #104]	; (8004b4c <HAL_RCC_ClockConfig+0x2e8>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0308 	and.w	r3, r3, #8
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d009      	beq.n	8004b06 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004af2:	4b16      	ldr	r3, [pc, #88]	; (8004b4c <HAL_RCC_ClockConfig+0x2e8>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	4912      	ldr	r1, [pc, #72]	; (8004b4c <HAL_RCC_ClockConfig+0x2e8>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004b06:	f000 f829 	bl	8004b5c <HAL_RCC_GetSysClockFreq>
 8004b0a:	4601      	mov	r1, r0
 8004b0c:	4b0f      	ldr	r3, [pc, #60]	; (8004b4c <HAL_RCC_ClockConfig+0x2e8>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b14:	22f0      	movs	r2, #240	; 0xf0
 8004b16:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	fa92 f2a2 	rbit	r2, r2
 8004b1e:	60fa      	str	r2, [r7, #12]
  return result;
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	fab2 f282 	clz	r2, r2
 8004b26:	b2d2      	uxtb	r2, r2
 8004b28:	40d3      	lsrs	r3, r2
 8004b2a:	4a09      	ldr	r2, [pc, #36]	; (8004b50 <HAL_RCC_ClockConfig+0x2ec>)
 8004b2c:	5cd3      	ldrb	r3, [r2, r3]
 8004b2e:	fa21 f303 	lsr.w	r3, r1, r3
 8004b32:	4a08      	ldr	r2, [pc, #32]	; (8004b54 <HAL_RCC_ClockConfig+0x2f0>)
 8004b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004b36:	4b08      	ldr	r3, [pc, #32]	; (8004b58 <HAL_RCC_ClockConfig+0x2f4>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fd fb82 	bl	8002244 <HAL_InitTick>
  
  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3778      	adds	r7, #120	; 0x78
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	08008efc 	.word	0x08008efc
 8004b54:	2000000c 	.word	0x2000000c
 8004b58:	20000010 	.word	0x20000010

08004b5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b08b      	sub	sp, #44	; 0x2c
 8004b60:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	61fb      	str	r3, [r7, #28]
 8004b66:	2300      	movs	r3, #0
 8004b68:	61bb      	str	r3, [r7, #24]
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b6e:	2300      	movs	r3, #0
 8004b70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b72:	2300      	movs	r3, #0
 8004b74:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004b76:	4b29      	ldr	r3, [pc, #164]	; (8004c1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	f003 030c 	and.w	r3, r3, #12
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	d002      	beq.n	8004b8c <HAL_RCC_GetSysClockFreq+0x30>
 8004b86:	2b08      	cmp	r3, #8
 8004b88:	d003      	beq.n	8004b92 <HAL_RCC_GetSysClockFreq+0x36>
 8004b8a:	e03c      	b.n	8004c06 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b8c:	4b24      	ldr	r3, [pc, #144]	; (8004c20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004b8e:	623b      	str	r3, [r7, #32]
      break;
 8004b90:	e03c      	b.n	8004c0c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004b98:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004b9c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	fa92 f2a2 	rbit	r2, r2
 8004ba4:	607a      	str	r2, [r7, #4]
  return result;
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	fab2 f282 	clz	r2, r2
 8004bac:	b2d2      	uxtb	r2, r2
 8004bae:	40d3      	lsrs	r3, r2
 8004bb0:	4a1c      	ldr	r2, [pc, #112]	; (8004c24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004bb2:	5cd3      	ldrb	r3, [r2, r3]
 8004bb4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004bb6:	4b19      	ldr	r3, [pc, #100]	; (8004c1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	220f      	movs	r2, #15
 8004bc0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	fa92 f2a2 	rbit	r2, r2
 8004bc8:	60fa      	str	r2, [r7, #12]
  return result;
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	fab2 f282 	clz	r2, r2
 8004bd0:	b2d2      	uxtb	r2, r2
 8004bd2:	40d3      	lsrs	r3, r2
 8004bd4:	4a14      	ldr	r2, [pc, #80]	; (8004c28 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004bd6:	5cd3      	ldrb	r3, [r2, r3]
 8004bd8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d008      	beq.n	8004bf6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004be4:	4a0e      	ldr	r2, [pc, #56]	; (8004c20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	fb02 f303 	mul.w	r3, r2, r3
 8004bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf4:	e004      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	4a0c      	ldr	r2, [pc, #48]	; (8004c2c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004bfa:	fb02 f303 	mul.w	r3, r2, r3
 8004bfe:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	623b      	str	r3, [r7, #32]
      break;
 8004c04:	e002      	b.n	8004c0c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c06:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c08:	623b      	str	r3, [r7, #32]
      break;
 8004c0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	372c      	adds	r7, #44	; 0x2c
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	007a1200 	.word	0x007a1200
 8004c24:	08008f14 	.word	0x08008f14
 8004c28:	08008f24 	.word	0x08008f24
 8004c2c:	003d0900 	.word	0x003d0900

08004c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c34:	4b03      	ldr	r3, [pc, #12]	; (8004c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c36:	681b      	ldr	r3, [r3, #0]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	2000000c 	.word	0x2000000c

08004c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004c4e:	f7ff ffef 	bl	8004c30 <HAL_RCC_GetHCLKFreq>
 8004c52:	4601      	mov	r1, r0
 8004c54:	4b0b      	ldr	r3, [pc, #44]	; (8004c84 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c5c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004c60:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	fa92 f2a2 	rbit	r2, r2
 8004c68:	603a      	str	r2, [r7, #0]
  return result;
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	fab2 f282 	clz	r2, r2
 8004c70:	b2d2      	uxtb	r2, r2
 8004c72:	40d3      	lsrs	r3, r2
 8004c74:	4a04      	ldr	r2, [pc, #16]	; (8004c88 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004c76:	5cd3      	ldrb	r3, [r2, r3]
 8004c78:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	40021000 	.word	0x40021000
 8004c88:	08008f0c 	.word	0x08008f0c

08004c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004c92:	f7ff ffcd 	bl	8004c30 <HAL_RCC_GetHCLKFreq>
 8004c96:	4601      	mov	r1, r0
 8004c98:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004ca0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004ca4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	fa92 f2a2 	rbit	r2, r2
 8004cac:	603a      	str	r2, [r7, #0]
  return result;
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	fab2 f282 	clz	r2, r2
 8004cb4:	b2d2      	uxtb	r2, r2
 8004cb6:	40d3      	lsrs	r3, r2
 8004cb8:	4a04      	ldr	r2, [pc, #16]	; (8004ccc <HAL_RCC_GetPCLK2Freq+0x40>)
 8004cba:	5cd3      	ldrb	r3, [r2, r3]
 8004cbc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	08008f0c 	.word	0x08008f0c

08004cd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b092      	sub	sp, #72	; 0x48
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 80cd 	beq.w	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cf4:	4b8e      	ldr	r3, [pc, #568]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10e      	bne.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d00:	4b8b      	ldr	r3, [pc, #556]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	4a8a      	ldr	r2, [pc, #552]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d0a:	61d3      	str	r3, [r2, #28]
 8004d0c:	4b88      	ldr	r3, [pc, #544]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d14:	60bb      	str	r3, [r7, #8]
 8004d16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d1e:	4b85      	ldr	r3, [pc, #532]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d118      	bne.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d2a:	4b82      	ldr	r3, [pc, #520]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a81      	ldr	r2, [pc, #516]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d36:	f7fd fac9 	bl	80022cc <HAL_GetTick>
 8004d3a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d3c:	e008      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d3e:	f7fd fac5 	bl	80022cc <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b64      	cmp	r3, #100	; 0x64
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e0ea      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d50:	4b78      	ldr	r3, [pc, #480]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0f0      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d5c:	4b74      	ldr	r3, [pc, #464]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d64:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d07d      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d076      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d7a:	4b6d      	ldr	r3, [pc, #436]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d88:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8c:	fa93 f3a3 	rbit	r3, r3
 8004d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d94:	fab3 f383 	clz	r3, r3
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	4b66      	ldr	r3, [pc, #408]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d9e:	4413      	add	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	461a      	mov	r2, r3
 8004da4:	2301      	movs	r3, #1
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004dac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db0:	fa93 f3a3 	rbit	r3, r3
 8004db4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004db8:	fab3 f383 	clz	r3, r3
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	4b5d      	ldr	r3, [pc, #372]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dc2:	4413      	add	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	2300      	movs	r3, #0
 8004dca:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004dcc:	4a58      	ldr	r2, [pc, #352]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d045      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ddc:	f7fd fa76 	bl	80022cc <HAL_GetTick>
 8004de0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de2:	e00a      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de4:	f7fd fa72 	bl	80022cc <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e095      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e00:	fa93 f3a3 	rbit	r3, r3
 8004e04:	627b      	str	r3, [r7, #36]	; 0x24
 8004e06:	2302      	movs	r3, #2
 8004e08:	623b      	str	r3, [r7, #32]
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	fa93 f3a3 	rbit	r3, r3
 8004e10:	61fb      	str	r3, [r7, #28]
  return result;
 8004e12:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e14:	fab3 f383 	clz	r3, r3
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	095b      	lsrs	r3, r3, #5
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	f043 0302 	orr.w	r3, r3, #2
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d102      	bne.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004e28:	4b41      	ldr	r3, [pc, #260]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	e007      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004e2e:	2302      	movs	r3, #2
 8004e30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	fa93 f3a3 	rbit	r3, r3
 8004e38:	617b      	str	r3, [r7, #20]
 8004e3a:	4b3d      	ldr	r3, [pc, #244]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	2202      	movs	r2, #2
 8004e40:	613a      	str	r2, [r7, #16]
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	fa92 f2a2 	rbit	r2, r2
 8004e48:	60fa      	str	r2, [r7, #12]
  return result;
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	fab2 f282 	clz	r2, r2
 8004e50:	b2d2      	uxtb	r2, r2
 8004e52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e56:	b2d2      	uxtb	r2, r2
 8004e58:	f002 021f 	and.w	r2, r2, #31
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8004e62:	4013      	ands	r3, r2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0bd      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004e68:	4b31      	ldr	r3, [pc, #196]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	492e      	ldr	r1, [pc, #184]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d105      	bne.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e82:	4b2b      	ldr	r3, [pc, #172]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	4a2a      	ldr	r2, [pc, #168]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e8c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d008      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e9a:	4b25      	ldr	r3, [pc, #148]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	f023 0203 	bic.w	r2, r3, #3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	4922      	ldr	r1, [pc, #136]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0320 	and.w	r3, r3, #32
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d008      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004eb8:	4b1d      	ldr	r3, [pc, #116]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebc:	f023 0210 	bic.w	r2, r3, #16
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	491a      	ldr	r1, [pc, #104]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d008      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ed6:	4b16      	ldr	r3, [pc, #88]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eda:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	4913      	ldr	r1, [pc, #76]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d008      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004ef4:	4b0e      	ldr	r3, [pc, #56]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	490b      	ldr	r1, [pc, #44]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d008      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004f12:	4b07      	ldr	r3, [pc, #28]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	4904      	ldr	r1, [pc, #16]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3748      	adds	r7, #72	; 0x48
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	40021000 	.word	0x40021000
 8004f34:	40007000 	.word	0x40007000
 8004f38:	10908100 	.word	0x10908100

08004f3c <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e083      	b.n	8005056 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	7f5b      	ldrb	r3, [r3, #29]
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d105      	bne.n	8004f64 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7fd f82e 	bl	8001fc0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	22ca      	movs	r2, #202	; 0xca
 8004f70:	625a      	str	r2, [r3, #36]	; 0x24
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2253      	movs	r2, #83	; 0x53
 8004f78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 faa8 	bl	80054d0 <RTC_EnterInitMode>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d008      	beq.n	8004f98 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	22ff      	movs	r2, #255	; 0xff
 8004f8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2204      	movs	r2, #4
 8004f92:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e05e      	b.n	8005056 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	6812      	ldr	r2, [r2, #0]
 8004fa2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004faa:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6899      	ldr	r1, [r3, #8]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	68d2      	ldr	r2, [r2, #12]
 8004fd2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6919      	ldr	r1, [r3, #16]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	041a      	lsls	r2, r3, #16
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68da      	ldr	r2, [r3, #12]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ff6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f003 0320 	and.w	r3, r3, #32
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10e      	bne.n	8005024 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fa3a 	bl	8005480 <HAL_RTC_WaitForSynchro>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d008      	beq.n	8005024 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	22ff      	movs	r2, #255	; 0xff
 8005018:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2204      	movs	r2, #4
 800501e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e018      	b.n	8005056 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005032:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	699a      	ldr	r2, [r3, #24]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	22ff      	movs	r2, #255	; 0xff
 800504c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005054:	2300      	movs	r3, #0
  }
}
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800505e:	b590      	push	{r4, r7, lr}
 8005060:	b087      	sub	sp, #28
 8005062:	af00      	add	r7, sp, #0
 8005064:	60f8      	str	r0, [r7, #12]
 8005066:	60b9      	str	r1, [r7, #8]
 8005068:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800506a:	2300      	movs	r3, #0
 800506c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	7f1b      	ldrb	r3, [r3, #28]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d101      	bne.n	800507a <HAL_RTC_SetTime+0x1c>
 8005076:	2302      	movs	r3, #2
 8005078:	e0aa      	b.n	80051d0 <HAL_RTC_SetTime+0x172>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2201      	movs	r2, #1
 800507e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2202      	movs	r2, #2
 8005084:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d126      	bne.n	80050da <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005096:	2b00      	cmp	r3, #0
 8005098:	d102      	bne.n	80050a0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2200      	movs	r2, #0
 800509e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 fa3f 	bl	8005528 <RTC_ByteToBcd2>
 80050aa:	4603      	mov	r3, r0
 80050ac:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	785b      	ldrb	r3, [r3, #1]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 fa38 	bl	8005528 <RTC_ByteToBcd2>
 80050b8:	4603      	mov	r3, r0
 80050ba:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80050bc:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	789b      	ldrb	r3, [r3, #2]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fa30 	bl	8005528 <RTC_ByteToBcd2>
 80050c8:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80050ca:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	78db      	ldrb	r3, [r3, #3]
 80050d2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80050d4:	4313      	orrs	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]
 80050d8:	e018      	b.n	800510c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d102      	bne.n	80050ee <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	2200      	movs	r2, #0
 80050ec:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	785b      	ldrb	r3, [r3, #1]
 80050f8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80050fa:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005100:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	78db      	ldrb	r3, [r3, #3]
 8005106:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005108:	4313      	orrs	r3, r2
 800510a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	22ca      	movs	r2, #202	; 0xca
 8005112:	625a      	str	r2, [r3, #36]	; 0x24
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2253      	movs	r2, #83	; 0x53
 800511a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 f9d7 	bl	80054d0 <RTC_EnterInitMode>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00b      	beq.n	8005140 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	22ff      	movs	r2, #255	; 0xff
 800512e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2204      	movs	r2, #4
 8005134:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e047      	b.n	80051d0 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800514a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800514e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689a      	ldr	r2, [r3, #8]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800515e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6899      	ldr	r1, [r3, #8]
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	68da      	ldr	r2, [r3, #12]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	431a      	orrs	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005186:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 0320 	and.w	r3, r3, #32
 8005192:	2b00      	cmp	r3, #0
 8005194:	d111      	bne.n	80051ba <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f000 f972 	bl	8005480 <HAL_RTC_WaitForSynchro>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00b      	beq.n	80051ba <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	22ff      	movs	r2, #255	; 0xff
 80051a8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2204      	movs	r2, #4
 80051ae:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e00a      	b.n	80051d0 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	22ff      	movs	r2, #255	; 0xff
 80051c0:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2201      	movs	r2, #1
 80051c6:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80051ce:	2300      	movs	r3, #0
  }
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	371c      	adds	r7, #28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd90      	pop	{r4, r7, pc}

080051d8 <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800520a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800520e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	0c1b      	lsrs	r3, r3, #16
 8005214:	b2db      	uxtb	r3, r3
 8005216:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800521a:	b2da      	uxtb	r2, r3
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	0a1b      	lsrs	r3, r3, #8
 8005224:	b2db      	uxtb	r3, r3
 8005226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800522a:	b2da      	uxtb	r2, r3
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	b2db      	uxtb	r3, r3
 8005234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005238:	b2da      	uxtb	r2, r3
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	0c1b      	lsrs	r3, r3, #16
 8005242:	b2db      	uxtb	r3, r3
 8005244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005248:	b2da      	uxtb	r2, r3
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d11a      	bne.n	800528a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	4618      	mov	r0, r3
 800525a:	f000 f983 	bl	8005564 <RTC_Bcd2ToByte>
 800525e:	4603      	mov	r3, r0
 8005260:	461a      	mov	r2, r3
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	785b      	ldrb	r3, [r3, #1]
 800526a:	4618      	mov	r0, r3
 800526c:	f000 f97a 	bl	8005564 <RTC_Bcd2ToByte>
 8005270:	4603      	mov	r3, r0
 8005272:	461a      	mov	r2, r3
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	789b      	ldrb	r3, [r3, #2]
 800527c:	4618      	mov	r0, r3
 800527e:	f000 f971 	bl	8005564 <RTC_Bcd2ToByte>
 8005282:	4603      	mov	r3, r0
 8005284:	461a      	mov	r2, r3
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3718      	adds	r7, #24
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005294:	b590      	push	{r4, r7, lr}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	7f1b      	ldrb	r3, [r3, #28]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d101      	bne.n	80052b0 <HAL_RTC_SetDate+0x1c>
 80052ac:	2302      	movs	r3, #2
 80052ae:	e094      	b.n	80053da <HAL_RTC_SetDate+0x146>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2201      	movs	r2, #1
 80052b4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2202      	movs	r2, #2
 80052ba:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10e      	bne.n	80052e0 <HAL_RTC_SetDate+0x4c>
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	785b      	ldrb	r3, [r3, #1]
 80052c6:	f003 0310 	and.w	r3, r3, #16
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d008      	beq.n	80052e0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	785b      	ldrb	r3, [r3, #1]
 80052d2:	f023 0310 	bic.w	r3, r3, #16
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	330a      	adds	r3, #10
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d11c      	bne.n	8005320 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	78db      	ldrb	r3, [r3, #3]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 f91c 	bl	8005528 <RTC_ByteToBcd2>
 80052f0:	4603      	mov	r3, r0
 80052f2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	785b      	ldrb	r3, [r3, #1]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f000 f915 	bl	8005528 <RTC_ByteToBcd2>
 80052fe:	4603      	mov	r3, r0
 8005300:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005302:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	789b      	ldrb	r3, [r3, #2]
 8005308:	4618      	mov	r0, r3
 800530a:	f000 f90d 	bl	8005528 <RTC_ByteToBcd2>
 800530e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005310:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800531a:	4313      	orrs	r3, r2
 800531c:	617b      	str	r3, [r7, #20]
 800531e:	e00e      	b.n	800533e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	78db      	ldrb	r3, [r3, #3]
 8005324:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	785b      	ldrb	r3, [r3, #1]
 800532a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800532c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005332:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800533a:	4313      	orrs	r3, r2
 800533c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	22ca      	movs	r2, #202	; 0xca
 8005344:	625a      	str	r2, [r3, #36]	; 0x24
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2253      	movs	r2, #83	; 0x53
 800534c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 f8be 	bl	80054d0 <RTC_EnterInitMode>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00b      	beq.n	8005372 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	22ff      	movs	r2, #255	; 0xff
 8005360:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2204      	movs	r2, #4
 8005366:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e033      	b.n	80053da <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800537c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005380:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005390:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f003 0320 	and.w	r3, r3, #32
 800539c:	2b00      	cmp	r3, #0
 800539e:	d111      	bne.n	80053c4 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f000 f86d 	bl	8005480 <HAL_RTC_WaitForSynchro>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00b      	beq.n	80053c4 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	22ff      	movs	r2, #255	; 0xff
 80053b2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2204      	movs	r2, #4
 80053b8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e00a      	b.n	80053da <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	22ff      	movs	r2, #255	; 0xff
 80053ca:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2201      	movs	r2, #1
 80053d0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80053d8:	2300      	movs	r3, #0
  }
}
 80053da:	4618      	mov	r0, r3
 80053dc:	371c      	adds	r7, #28
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd90      	pop	{r4, r7, pc}

080053e2 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b086      	sub	sp, #24
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	60f8      	str	r0, [r7, #12]
 80053ea:	60b9      	str	r1, [r7, #8]
 80053ec:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80053ee:	2300      	movs	r3, #0
 80053f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80053fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005400:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	0c1b      	lsrs	r3, r3, #16
 8005406:	b2da      	uxtb	r2, r3
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	0a1b      	lsrs	r3, r3, #8
 8005410:	b2db      	uxtb	r3, r3
 8005412:	f003 031f 	and.w	r3, r3, #31
 8005416:	b2da      	uxtb	r2, r3
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	b2db      	uxtb	r3, r3
 8005420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005424:	b2da      	uxtb	r2, r3
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	0b5b      	lsrs	r3, r3, #13
 800542e:	b2db      	uxtb	r3, r3
 8005430:	f003 0307 	and.w	r3, r3, #7
 8005434:	b2da      	uxtb	r2, r3
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d11a      	bne.n	8005476 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	78db      	ldrb	r3, [r3, #3]
 8005444:	4618      	mov	r0, r3
 8005446:	f000 f88d 	bl	8005564 <RTC_Bcd2ToByte>
 800544a:	4603      	mov	r3, r0
 800544c:	461a      	mov	r2, r3
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	785b      	ldrb	r3, [r3, #1]
 8005456:	4618      	mov	r0, r3
 8005458:	f000 f884 	bl	8005564 <RTC_Bcd2ToByte>
 800545c:	4603      	mov	r3, r0
 800545e:	461a      	mov	r2, r3
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	789b      	ldrb	r3, [r3, #2]
 8005468:	4618      	mov	r0, r3
 800546a:	f000 f87b 	bl	8005564 <RTC_Bcd2ToByte>
 800546e:	4603      	mov	r3, r0
 8005470:	461a      	mov	r2, r3
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005488:	2300      	movs	r3, #0
 800548a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800549a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800549c:	f7fc ff16 	bl	80022cc <HAL_GetTick>
 80054a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80054a2:	e009      	b.n	80054b8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80054a4:	f7fc ff12 	bl	80022cc <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054b2:	d901      	bls.n	80054b8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e007      	b.n	80054c8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f003 0320 	and.w	r3, r3, #32
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d0ee      	beq.n	80054a4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d119      	bne.n	800551e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f04f 32ff 	mov.w	r2, #4294967295
 80054f2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80054f4:	f7fc feea 	bl	80022cc <HAL_GetTick>
 80054f8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80054fa:	e009      	b.n	8005510 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80054fc:	f7fc fee6 	bl	80022cc <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800550a:	d901      	bls.n	8005510 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e007      	b.n	8005520 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551a:	2b00      	cmp	r3, #0
 800551c:	d0ee      	beq.n	80054fc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	4603      	mov	r3, r0
 8005530:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005532:	2300      	movs	r3, #0
 8005534:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005536:	e005      	b.n	8005544 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	3301      	adds	r3, #1
 800553c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800553e:	79fb      	ldrb	r3, [r7, #7]
 8005540:	3b0a      	subs	r3, #10
 8005542:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005544:	79fb      	ldrb	r3, [r7, #7]
 8005546:	2b09      	cmp	r3, #9
 8005548:	d8f6      	bhi.n	8005538 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	b2db      	uxtb	r3, r3
 800554e:	011b      	lsls	r3, r3, #4
 8005550:	b2da      	uxtb	r2, r3
 8005552:	79fb      	ldrb	r3, [r7, #7]
 8005554:	4313      	orrs	r3, r2
 8005556:	b2db      	uxtb	r3, r3
}
 8005558:	4618      	mov	r0, r3
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	4603      	mov	r3, r0
 800556c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800556e:	2300      	movs	r3, #0
 8005570:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8005572:	79fb      	ldrb	r3, [r7, #7]
 8005574:	091b      	lsrs	r3, r3, #4
 8005576:	b2db      	uxtb	r3, r3
 8005578:	461a      	mov	r2, r3
 800557a:	4613      	mov	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4413      	add	r3, r2
 8005580:	005b      	lsls	r3, r3, #1
 8005582:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8005584:	79fb      	ldrb	r3, [r7, #7]
 8005586:	f003 030f 	and.w	r3, r3, #15
 800558a:	b2da      	uxtb	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	b2db      	uxtb	r3, r3
 8005590:	4413      	add	r3, r2
 8005592:	b2db      	uxtb	r3, r3
}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e040      	b.n	8005634 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d106      	bne.n	80055c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7fc fd22 	bl	800200c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2224      	movs	r2, #36	; 0x24
 80055cc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 0201 	bic.w	r2, r2, #1
 80055dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fb1e 	bl	8005c20 <UART_SetConfig>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d101      	bne.n	80055ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e022      	b.n	8005634 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d002      	beq.n	80055fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fc4a 	bl	8005e90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800560a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689a      	ldr	r2, [r3, #8]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800561a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f042 0201 	orr.w	r2, r2, #1
 800562a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 fcd1 	bl	8005fd4 <UART_CheckIdleState>
 8005632:	4603      	mov	r3, r0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b08a      	sub	sp, #40	; 0x28
 8005640:	af02      	add	r7, sp, #8
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	603b      	str	r3, [r7, #0]
 8005648:	4613      	mov	r3, r2
 800564a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005650:	2b20      	cmp	r3, #32
 8005652:	f040 8082 	bne.w	800575a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d002      	beq.n	8005662 <HAL_UART_Transmit+0x26>
 800565c:	88fb      	ldrh	r3, [r7, #6]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e07a      	b.n	800575c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <HAL_UART_Transmit+0x38>
 8005670:	2302      	movs	r3, #2
 8005672:	e073      	b.n	800575c <HAL_UART_Transmit+0x120>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2221      	movs	r2, #33	; 0x21
 8005688:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800568a:	f7fc fe1f 	bl	80022cc <HAL_GetTick>
 800568e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	88fa      	ldrh	r2, [r7, #6]
 8005694:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	88fa      	ldrh	r2, [r7, #6]
 800569c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a8:	d108      	bne.n	80056bc <HAL_UART_Transmit+0x80>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d104      	bne.n	80056bc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80056b2:	2300      	movs	r3, #0
 80056b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	61bb      	str	r3, [r7, #24]
 80056ba:	e003      	b.n	80056c4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056c0:	2300      	movs	r3, #0
 80056c2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80056cc:	e02d      	b.n	800572a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2200      	movs	r2, #0
 80056d6:	2180      	movs	r1, #128	; 0x80
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f000 fcc4 	bl	8006066 <UART_WaitOnFlagUntilTimeout>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e039      	b.n	800575c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10b      	bne.n	8005706 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	881a      	ldrh	r2, [r3, #0]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056fa:	b292      	uxth	r2, r2
 80056fc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	3302      	adds	r3, #2
 8005702:	61bb      	str	r3, [r7, #24]
 8005704:	e008      	b.n	8005718 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	781a      	ldrb	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	b292      	uxth	r2, r2
 8005710:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	3301      	adds	r3, #1
 8005716:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800571e:	b29b      	uxth	r3, r3
 8005720:	3b01      	subs	r3, #1
 8005722:	b29a      	uxth	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005730:	b29b      	uxth	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1cb      	bne.n	80056ce <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	2200      	movs	r2, #0
 800573e:	2140      	movs	r1, #64	; 0x40
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 fc90 	bl	8006066 <UART_WaitOnFlagUntilTimeout>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d001      	beq.n	8005750 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e005      	b.n	800575c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2220      	movs	r2, #32
 8005754:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	e000      	b.n	800575c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800575a:	2302      	movs	r3, #2
  }
}
 800575c:	4618      	mov	r0, r3
 800575e:	3720      	adds	r7, #32
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	4613      	mov	r3, r2
 8005770:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005776:	2b20      	cmp	r3, #32
 8005778:	d12c      	bne.n	80057d4 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <HAL_UART_Receive_IT+0x22>
 8005780:	88fb      	ldrh	r3, [r7, #6]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e025      	b.n	80057d6 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005790:	2b01      	cmp	r3, #1
 8005792:	d101      	bne.n	8005798 <HAL_UART_Receive_IT+0x34>
 8005794:	2302      	movs	r3, #2
 8005796:	e01e      	b.n	80057d6 <HAL_UART_Receive_IT+0x72>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d007      	beq.n	80057c4 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80057c2:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80057c4:	88fb      	ldrh	r3, [r7, #6]
 80057c6:	461a      	mov	r2, r3
 80057c8:	68b9      	ldr	r1, [r7, #8]
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f000 fcc8 	bl	8006160 <UART_Start_Receive_IT>
 80057d0:	4603      	mov	r3, r0
 80057d2:	e000      	b.n	80057d6 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 80057d4:	2302      	movs	r3, #2
  }
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
	...

080057e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b088      	sub	sp, #32
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	69db      	ldr	r3, [r3, #28]
 80057ee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005800:	69fa      	ldr	r2, [r7, #28]
 8005802:	f640 030f 	movw	r3, #2063	; 0x80f
 8005806:	4013      	ands	r3, r2
 8005808:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d113      	bne.n	8005838 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	f003 0320 	and.w	r3, r3, #32
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00e      	beq.n	8005838 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	f003 0320 	and.w	r3, r3, #32
 8005820:	2b00      	cmp	r3, #0
 8005822:	d009      	beq.n	8005838 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 81cd 	beq.w	8005bc8 <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	4798      	blx	r3
      }
      return;
 8005836:	e1c7      	b.n	8005bc8 <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 80e3 	beq.w	8005a06 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	d105      	bne.n	8005856 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	4ba5      	ldr	r3, [pc, #660]	; (8005ae4 <HAL_UART_IRQHandler+0x304>)
 800584e:	4013      	ands	r3, r2
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 80d8 	beq.w	8005a06 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b00      	cmp	r3, #0
 800585e:	d010      	beq.n	8005882 <HAL_UART_IRQHandler+0xa2>
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00b      	beq.n	8005882 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2201      	movs	r2, #1
 8005870:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005878:	f043 0201 	orr.w	r2, r3, #1
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d010      	beq.n	80058ae <HAL_UART_IRQHandler+0xce>
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00b      	beq.n	80058ae <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2202      	movs	r2, #2
 800589c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058a4:	f043 0204 	orr.w	r2, r3, #4
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	f003 0304 	and.w	r3, r3, #4
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d010      	beq.n	80058da <HAL_UART_IRQHandler+0xfa>
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00b      	beq.n	80058da <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2204      	movs	r2, #4
 80058c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058d0:	f043 0202 	orr.w	r2, r3, #2
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	f003 0308 	and.w	r3, r3, #8
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d015      	beq.n	8005910 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	f003 0320 	and.w	r3, r3, #32
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d104      	bne.n	80058f8 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00b      	beq.n	8005910 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2208      	movs	r2, #8
 80058fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005906:	f043 0208 	orr.w	r2, r3, #8
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005916:	2b00      	cmp	r3, #0
 8005918:	d011      	beq.n	800593e <HAL_UART_IRQHandler+0x15e>
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00c      	beq.n	800593e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800592c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005934:	f043 0220 	orr.w	r2, r3, #32
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 8141 	beq.w	8005bcc <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	f003 0320 	and.w	r3, r3, #32
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00c      	beq.n	800596e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	f003 0320 	and.w	r3, r3, #32
 800595a:	2b00      	cmp	r3, #0
 800595c:	d007      	beq.n	800596e <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005974:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005980:	2b40      	cmp	r3, #64	; 0x40
 8005982:	d004      	beq.n	800598e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800598a:	2b00      	cmp	r3, #0
 800598c:	d031      	beq.n	80059f2 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fc6e 	bl	8006270 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599e:	2b40      	cmp	r3, #64	; 0x40
 80059a0:	d123      	bne.n	80059ea <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	689a      	ldr	r2, [r3, #8]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059b0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d013      	beq.n	80059e2 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059be:	4a4a      	ldr	r2, [pc, #296]	; (8005ae8 <HAL_UART_IRQHandler+0x308>)
 80059c0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fd fe54 	bl	8003674 <HAL_DMA_Abort_IT>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d017      	beq.n	8005a02 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80059dc:	4610      	mov	r0, r2
 80059de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e0:	e00f      	b.n	8005a02 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f906 	bl	8005bf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e8:	e00b      	b.n	8005a02 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f902 	bl	8005bf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f0:	e007      	b.n	8005a02 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f8fe 	bl	8005bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005a00:	e0e4      	b.n	8005bcc <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a02:	bf00      	nop
    return;
 8005a04:	e0e2      	b.n	8005bcc <HAL_UART_IRQHandler+0x3ec>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	f040 80a7 	bne.w	8005b5e <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	f003 0310 	and.w	r3, r3, #16
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f000 80a1 	beq.w	8005b5e <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	f003 0310 	and.w	r3, r3, #16
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 809b 	beq.w	8005b5e <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2210      	movs	r2, #16
 8005a2e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3a:	2b40      	cmp	r3, #64	; 0x40
 8005a3c:	d156      	bne.n	8005aec <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8005a48:	893b      	ldrh	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f000 80c0 	beq.w	8005bd0 <HAL_UART_IRQHandler+0x3f0>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a56:	893a      	ldrh	r2, [r7, #8]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	f080 80b9 	bcs.w	8005bd0 <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	893a      	ldrh	r2, [r7, #8]
 8005a62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	2b20      	cmp	r3, #32
 8005a6e:	d02a      	beq.n	8005ac6 <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a7e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689a      	ldr	r2, [r3, #8]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0201 	bic.w	r2, r2, #1
 8005a8e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689a      	ldr	r2, [r3, #8]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a9e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 0210 	bic.w	r2, r2, #16
 8005aba:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7fd fd9e 	bl	8003602 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	4619      	mov	r1, r3
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f894 	bl	8005c08 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005ae0:	e076      	b.n	8005bd0 <HAL_UART_IRQHandler+0x3f0>
 8005ae2:	bf00      	nop
 8005ae4:	04000120 	.word	0x04000120
 8005ae8:	080062cf 	.word	0x080062cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d064      	beq.n	8005bd4 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_rx_data > 0U) )
 8005b0a:	897b      	ldrh	r3, [r7, #10]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d061      	beq.n	8005bd4 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b1e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689a      	ldr	r2, [r3, #8]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 0201 	bic.w	r2, r2, #1
 8005b2e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2220      	movs	r2, #32
 8005b34:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f022 0210 	bic.w	r2, r2, #16
 8005b50:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b52:	897b      	ldrh	r3, [r7, #10]
 8005b54:	4619      	mov	r1, r3
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f856 	bl	8005c08 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005b5c:	e03a      	b.n	8005bd4 <HAL_UART_IRQHandler+0x3f4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00d      	beq.n	8005b84 <HAL_UART_IRQHandler+0x3a4>
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d008      	beq.n	8005b84 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005b7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 fca9 	bl	80064d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b82:	e02a      	b.n	8005bda <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00d      	beq.n	8005baa <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d008      	beq.n	8005baa <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d01b      	beq.n	8005bd8 <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	4798      	blx	r3
    }
    return;
 8005ba8:	e016      	b.n	8005bd8 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d012      	beq.n	8005bda <HAL_UART_IRQHandler+0x3fa>
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00d      	beq.n	8005bda <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fb9b 	bl	80062fa <UART_EndTransmit_IT>
    return;
 8005bc4:	bf00      	nop
 8005bc6:	e008      	b.n	8005bda <HAL_UART_IRQHandler+0x3fa>
      return;
 8005bc8:	bf00      	nop
 8005bca:	e006      	b.n	8005bda <HAL_UART_IRQHandler+0x3fa>
    return;
 8005bcc:	bf00      	nop
 8005bce:	e004      	b.n	8005bda <HAL_UART_IRQHandler+0x3fa>
      return;
 8005bd0:	bf00      	nop
 8005bd2:	e002      	b.n	8005bda <HAL_UART_IRQHandler+0x3fa>
      return;
 8005bd4:	bf00      	nop
 8005bd6:	e000      	b.n	8005bda <HAL_UART_IRQHandler+0x3fa>
    return;
 8005bd8:	bf00      	nop
  }

}
 8005bda:	3720      	adds	r7, #32
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b088      	sub	sp, #32
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689a      	ldr	r2, [r3, #8]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	431a      	orrs	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	4b8b      	ldr	r3, [pc, #556]	; (8005e78 <UART_SetConfig+0x258>)
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	6812      	ldr	r2, [r2, #0]
 8005c52:	6979      	ldr	r1, [r7, #20]
 8005c54:	430b      	orrs	r3, r1
 8005c56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68da      	ldr	r2, [r3, #12]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a79      	ldr	r2, [pc, #484]	; (8005e7c <UART_SetConfig+0x25c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d121      	bne.n	8005ce0 <UART_SetConfig+0xc0>
 8005c9c:	4b78      	ldr	r3, [pc, #480]	; (8005e80 <UART_SetConfig+0x260>)
 8005c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca0:	f003 0303 	and.w	r3, r3, #3
 8005ca4:	2b03      	cmp	r3, #3
 8005ca6:	d817      	bhi.n	8005cd8 <UART_SetConfig+0xb8>
 8005ca8:	a201      	add	r2, pc, #4	; (adr r2, 8005cb0 <UART_SetConfig+0x90>)
 8005caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cae:	bf00      	nop
 8005cb0:	08005cc1 	.word	0x08005cc1
 8005cb4:	08005ccd 	.word	0x08005ccd
 8005cb8:	08005cd3 	.word	0x08005cd3
 8005cbc:	08005cc7 	.word	0x08005cc7
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	77fb      	strb	r3, [r7, #31]
 8005cc4:	e01e      	b.n	8005d04 <UART_SetConfig+0xe4>
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	77fb      	strb	r3, [r7, #31]
 8005cca:	e01b      	b.n	8005d04 <UART_SetConfig+0xe4>
 8005ccc:	2304      	movs	r3, #4
 8005cce:	77fb      	strb	r3, [r7, #31]
 8005cd0:	e018      	b.n	8005d04 <UART_SetConfig+0xe4>
 8005cd2:	2308      	movs	r3, #8
 8005cd4:	77fb      	strb	r3, [r7, #31]
 8005cd6:	e015      	b.n	8005d04 <UART_SetConfig+0xe4>
 8005cd8:	2310      	movs	r3, #16
 8005cda:	77fb      	strb	r3, [r7, #31]
 8005cdc:	bf00      	nop
 8005cde:	e011      	b.n	8005d04 <UART_SetConfig+0xe4>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a67      	ldr	r2, [pc, #412]	; (8005e84 <UART_SetConfig+0x264>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d102      	bne.n	8005cf0 <UART_SetConfig+0xd0>
 8005cea:	2300      	movs	r3, #0
 8005cec:	77fb      	strb	r3, [r7, #31]
 8005cee:	e009      	b.n	8005d04 <UART_SetConfig+0xe4>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a64      	ldr	r2, [pc, #400]	; (8005e88 <UART_SetConfig+0x268>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d102      	bne.n	8005d00 <UART_SetConfig+0xe0>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	77fb      	strb	r3, [r7, #31]
 8005cfe:	e001      	b.n	8005d04 <UART_SetConfig+0xe4>
 8005d00:	2310      	movs	r3, #16
 8005d02:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	69db      	ldr	r3, [r3, #28]
 8005d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d0c:	d15c      	bne.n	8005dc8 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8005d0e:	7ffb      	ldrb	r3, [r7, #31]
 8005d10:	2b08      	cmp	r3, #8
 8005d12:	d828      	bhi.n	8005d66 <UART_SetConfig+0x146>
 8005d14:	a201      	add	r2, pc, #4	; (adr r2, 8005d1c <UART_SetConfig+0xfc>)
 8005d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d1a:	bf00      	nop
 8005d1c:	08005d41 	.word	0x08005d41
 8005d20:	08005d49 	.word	0x08005d49
 8005d24:	08005d51 	.word	0x08005d51
 8005d28:	08005d67 	.word	0x08005d67
 8005d2c:	08005d57 	.word	0x08005d57
 8005d30:	08005d67 	.word	0x08005d67
 8005d34:	08005d67 	.word	0x08005d67
 8005d38:	08005d67 	.word	0x08005d67
 8005d3c:	08005d5f 	.word	0x08005d5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d40:	f7fe ff82 	bl	8004c48 <HAL_RCC_GetPCLK1Freq>
 8005d44:	61b8      	str	r0, [r7, #24]
        break;
 8005d46:	e013      	b.n	8005d70 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d48:	f7fe ffa0 	bl	8004c8c <HAL_RCC_GetPCLK2Freq>
 8005d4c:	61b8      	str	r0, [r7, #24]
        break;
 8005d4e:	e00f      	b.n	8005d70 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d50:	4b4e      	ldr	r3, [pc, #312]	; (8005e8c <UART_SetConfig+0x26c>)
 8005d52:	61bb      	str	r3, [r7, #24]
        break;
 8005d54:	e00c      	b.n	8005d70 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d56:	f7fe ff01 	bl	8004b5c <HAL_RCC_GetSysClockFreq>
 8005d5a:	61b8      	str	r0, [r7, #24]
        break;
 8005d5c:	e008      	b.n	8005d70 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d62:	61bb      	str	r3, [r7, #24]
        break;
 8005d64:	e004      	b.n	8005d70 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 8005d66:	2300      	movs	r3, #0
 8005d68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	77bb      	strb	r3, [r7, #30]
        break;
 8005d6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d074      	beq.n	8005e60 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	005a      	lsls	r2, r3, #1
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	085b      	lsrs	r3, r3, #1
 8005d80:	441a      	add	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	2b0f      	cmp	r3, #15
 8005d92:	d916      	bls.n	8005dc2 <UART_SetConfig+0x1a2>
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d9a:	d212      	bcs.n	8005dc2 <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	f023 030f 	bic.w	r3, r3, #15
 8005da4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	085b      	lsrs	r3, r3, #1
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	f003 0307 	and.w	r3, r3, #7
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	89fb      	ldrh	r3, [r7, #14]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	89fa      	ldrh	r2, [r7, #14]
 8005dbe:	60da      	str	r2, [r3, #12]
 8005dc0:	e04e      	b.n	8005e60 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	77bb      	strb	r3, [r7, #30]
 8005dc6:	e04b      	b.n	8005e60 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005dc8:	7ffb      	ldrb	r3, [r7, #31]
 8005dca:	2b08      	cmp	r3, #8
 8005dcc:	d827      	bhi.n	8005e1e <UART_SetConfig+0x1fe>
 8005dce:	a201      	add	r2, pc, #4	; (adr r2, 8005dd4 <UART_SetConfig+0x1b4>)
 8005dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd4:	08005df9 	.word	0x08005df9
 8005dd8:	08005e01 	.word	0x08005e01
 8005ddc:	08005e09 	.word	0x08005e09
 8005de0:	08005e1f 	.word	0x08005e1f
 8005de4:	08005e0f 	.word	0x08005e0f
 8005de8:	08005e1f 	.word	0x08005e1f
 8005dec:	08005e1f 	.word	0x08005e1f
 8005df0:	08005e1f 	.word	0x08005e1f
 8005df4:	08005e17 	.word	0x08005e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005df8:	f7fe ff26 	bl	8004c48 <HAL_RCC_GetPCLK1Freq>
 8005dfc:	61b8      	str	r0, [r7, #24]
        break;
 8005dfe:	e013      	b.n	8005e28 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e00:	f7fe ff44 	bl	8004c8c <HAL_RCC_GetPCLK2Freq>
 8005e04:	61b8      	str	r0, [r7, #24]
        break;
 8005e06:	e00f      	b.n	8005e28 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e08:	4b20      	ldr	r3, [pc, #128]	; (8005e8c <UART_SetConfig+0x26c>)
 8005e0a:	61bb      	str	r3, [r7, #24]
        break;
 8005e0c:	e00c      	b.n	8005e28 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e0e:	f7fe fea5 	bl	8004b5c <HAL_RCC_GetSysClockFreq>
 8005e12:	61b8      	str	r0, [r7, #24]
        break;
 8005e14:	e008      	b.n	8005e28 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e1a:	61bb      	str	r3, [r7, #24]
        break;
 8005e1c:	e004      	b.n	8005e28 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	77bb      	strb	r3, [r7, #30]
        break;
 8005e26:	bf00      	nop
    }

    if (pclk != 0U)
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d018      	beq.n	8005e60 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	085a      	lsrs	r2, r3, #1
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	441a      	add	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	2b0f      	cmp	r3, #15
 8005e48:	d908      	bls.n	8005e5c <UART_SetConfig+0x23c>
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e50:	d204      	bcs.n	8005e5c <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	60da      	str	r2, [r3, #12]
 8005e5a:	e001      	b.n	8005e60 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005e6c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3720      	adds	r7, #32
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	efff69f3 	.word	0xefff69f3
 8005e7c:	40013800 	.word	0x40013800
 8005e80:	40021000 	.word	0x40021000
 8005e84:	40004400 	.word	0x40004400
 8005e88:	40004800 	.word	0x40004800
 8005e8c:	007a1200 	.word	0x007a1200

08005e90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00a      	beq.n	8005eba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00a      	beq.n	8005edc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee0:	f003 0304 	and.w	r3, r3, #4
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00a      	beq.n	8005efe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f02:	f003 0308 	and.w	r3, r3, #8
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00a      	beq.n	8005f20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	f003 0310 	and.w	r3, r3, #16
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00a      	beq.n	8005f42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f46:	f003 0320 	and.w	r3, r3, #32
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00a      	beq.n	8005f64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d01a      	beq.n	8005fa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f8e:	d10a      	bne.n	8005fa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00a      	beq.n	8005fc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	605a      	str	r2, [r3, #4]
  }
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af02      	add	r7, sp, #8
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fe4:	f7fc f972 	bl	80022cc <HAL_GetTick>
 8005fe8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0308 	and.w	r3, r3, #8
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	d10e      	bne.n	8006016 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ff8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f82d 	bl	8006066 <UART_WaitOnFlagUntilTimeout>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e023      	b.n	800605e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0304 	and.w	r3, r3, #4
 8006020:	2b04      	cmp	r3, #4
 8006022:	d10e      	bne.n	8006042 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006024:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f817 	bl	8006066 <UART_WaitOnFlagUntilTimeout>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d001      	beq.n	8006042 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e00d      	b.n	800605e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2220      	movs	r2, #32
 8006046:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2220      	movs	r2, #32
 800604c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b084      	sub	sp, #16
 800606a:	af00      	add	r7, sp, #0
 800606c:	60f8      	str	r0, [r7, #12]
 800606e:	60b9      	str	r1, [r7, #8]
 8006070:	603b      	str	r3, [r7, #0]
 8006072:	4613      	mov	r3, r2
 8006074:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006076:	e05e      	b.n	8006136 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607e:	d05a      	beq.n	8006136 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006080:	f7fc f924 	bl	80022cc <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	429a      	cmp	r2, r3
 800608e:	d302      	bcc.n	8006096 <UART_WaitOnFlagUntilTimeout+0x30>
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d11b      	bne.n	80060ce <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80060a4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0201 	bic.w	r2, r2, #1
 80060b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2220      	movs	r2, #32
 80060ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2220      	movs	r2, #32
 80060c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e043      	b.n	8006156 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0304 	and.w	r3, r3, #4
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d02c      	beq.n	8006136 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ea:	d124      	bne.n	8006136 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006104:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 0201 	bic.w	r2, r2, #1
 8006114:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2220      	movs	r2, #32
 800611a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2220      	movs	r2, #32
 8006120:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2220      	movs	r2, #32
 8006126:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e00f      	b.n	8006156 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	69da      	ldr	r2, [r3, #28]
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	4013      	ands	r3, r2
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	429a      	cmp	r2, r3
 8006144:	bf0c      	ite	eq
 8006146:	2301      	moveq	r3, #1
 8006148:	2300      	movne	r3, #0
 800614a:	b2db      	uxtb	r3, r3
 800614c:	461a      	mov	r2, r3
 800614e:	79fb      	ldrb	r3, [r7, #7]
 8006150:	429a      	cmp	r2, r3
 8006152:	d091      	beq.n	8006078 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
	...

08006160 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	4613      	mov	r3, r2
 800616c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	88fa      	ldrh	r2, [r7, #6]
 8006178:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	88fa      	ldrh	r2, [r7, #6]
 8006180:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006192:	d10e      	bne.n	80061b2 <UART_Start_Receive_IT+0x52>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d105      	bne.n	80061a8 <UART_Start_Receive_IT+0x48>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80061a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061a6:	e02d      	b.n	8006204 <UART_Start_Receive_IT+0xa4>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	22ff      	movs	r2, #255	; 0xff
 80061ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061b0:	e028      	b.n	8006204 <UART_Start_Receive_IT+0xa4>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10d      	bne.n	80061d6 <UART_Start_Receive_IT+0x76>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d104      	bne.n	80061cc <UART_Start_Receive_IT+0x6c>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	22ff      	movs	r2, #255	; 0xff
 80061c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061ca:	e01b      	b.n	8006204 <UART_Start_Receive_IT+0xa4>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	227f      	movs	r2, #127	; 0x7f
 80061d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061d4:	e016      	b.n	8006204 <UART_Start_Receive_IT+0xa4>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061de:	d10d      	bne.n	80061fc <UART_Start_Receive_IT+0x9c>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d104      	bne.n	80061f2 <UART_Start_Receive_IT+0x92>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	227f      	movs	r2, #127	; 0x7f
 80061ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061f0:	e008      	b.n	8006204 <UART_Start_Receive_IT+0xa4>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	223f      	movs	r2, #63	; 0x3f
 80061f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061fa:	e003      	b.n	8006204 <UART_Start_Receive_IT+0xa4>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2222      	movs	r2, #34	; 0x22
 8006210:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	689a      	ldr	r2, [r3, #8]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f042 0201 	orr.w	r2, r2, #1
 8006220:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800622a:	d107      	bne.n	800623c <UART_Start_Receive_IT+0xdc>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d103      	bne.n	800623c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	4a0c      	ldr	r2, [pc, #48]	; (8006268 <UART_Start_Receive_IT+0x108>)
 8006238:	665a      	str	r2, [r3, #100]	; 0x64
 800623a:	e002      	b.n	8006242 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	4a0b      	ldr	r2, [pc, #44]	; (800626c <UART_Start_Receive_IT+0x10c>)
 8006240:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006258:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	08006401 	.word	0x08006401
 800626c:	0800632d 	.word	0x0800632d

08006270 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006286:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689a      	ldr	r2, [r3, #8]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0201 	bic.w	r2, r2, #1
 8006296:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800629c:	2b01      	cmp	r3, #1
 800629e:	d107      	bne.n	80062b0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 0210 	bic.w	r2, r2, #16
 80062ae:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2220      	movs	r2, #32
 80062b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80062c2:	bf00      	nop
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b084      	sub	sp, #16
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f7ff fc81 	bl	8005bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062f2:	bf00      	nop
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b082      	sub	sp, #8
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006310:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2220      	movs	r2, #32
 8006316:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f7ff fc5e 	bl	8005be0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006324:	bf00      	nop
 8006326:	3708      	adds	r7, #8
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800633a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006340:	2b22      	cmp	r3, #34	; 0x22
 8006342:	d151      	bne.n	80063e8 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800634a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800634c:	89bb      	ldrh	r3, [r7, #12]
 800634e:	b2d9      	uxtb	r1, r3
 8006350:	89fb      	ldrh	r3, [r7, #14]
 8006352:	b2da      	uxtb	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006358:	400a      	ands	r2, r1
 800635a:	b2d2      	uxtb	r2, r2
 800635c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006362:	1c5a      	adds	r2, r3, #1
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800636e:	b29b      	uxth	r3, r3
 8006370:	3b01      	subs	r3, #1
 8006372:	b29a      	uxth	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006380:	b29b      	uxth	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d138      	bne.n	80063f8 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006394:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f022 0201 	bic.w	r2, r2, #1
 80063a4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2220      	movs	r2, #32
 80063aa:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d10f      	bne.n	80063da <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f022 0210 	bic.w	r2, r2, #16
 80063c8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80063d0:	4619      	mov	r1, r3
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7ff fc18 	bl	8005c08 <HAL_UARTEx_RxEventCallback>
 80063d8:	e002      	b.n	80063e0 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f7fb f83a 	bl	8001454 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80063e6:	e007      	b.n	80063f8 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	699a      	ldr	r2, [r3, #24]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f042 0208 	orr.w	r2, r2, #8
 80063f6:	619a      	str	r2, [r3, #24]
}
 80063f8:	bf00      	nop
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800640e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006414:	2b22      	cmp	r3, #34	; 0x22
 8006416:	d151      	bne.n	80064bc <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800641e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006424:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006426:	89ba      	ldrh	r2, [r7, #12]
 8006428:	89fb      	ldrh	r3, [r7, #14]
 800642a:	4013      	ands	r3, r2
 800642c:	b29a      	uxth	r2, r3
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006436:	1c9a      	adds	r2, r3, #2
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006442:	b29b      	uxth	r3, r3
 8006444:	3b01      	subs	r3, #1
 8006446:	b29a      	uxth	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006454:	b29b      	uxth	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d138      	bne.n	80064cc <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006468:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	689a      	ldr	r2, [r3, #8]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f022 0201 	bic.w	r2, r2, #1
 8006478:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2220      	movs	r2, #32
 800647e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800648a:	2b01      	cmp	r3, #1
 800648c:	d10f      	bne.n	80064ae <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 0210 	bic.w	r2, r2, #16
 800649c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80064a4:	4619      	mov	r1, r3
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7ff fbae 	bl	8005c08 <HAL_UARTEx_RxEventCallback>
 80064ac:	e002      	b.n	80064b4 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7fa ffd0 	bl	8001454 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80064ba:	e007      	b.n	80064cc <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	699a      	ldr	r2, [r3, #24]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f042 0208 	orr.w	r2, r2, #8
 80064ca:	619a      	str	r2, [r3, #24]
}
 80064cc:	bf00      	nop
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <__errno>:
 80064e8:	4b01      	ldr	r3, [pc, #4]	; (80064f0 <__errno+0x8>)
 80064ea:	6818      	ldr	r0, [r3, #0]
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	20000018 	.word	0x20000018

080064f4 <__libc_init_array>:
 80064f4:	b570      	push	{r4, r5, r6, lr}
 80064f6:	4e0d      	ldr	r6, [pc, #52]	; (800652c <__libc_init_array+0x38>)
 80064f8:	4c0d      	ldr	r4, [pc, #52]	; (8006530 <__libc_init_array+0x3c>)
 80064fa:	1ba4      	subs	r4, r4, r6
 80064fc:	10a4      	asrs	r4, r4, #2
 80064fe:	2500      	movs	r5, #0
 8006500:	42a5      	cmp	r5, r4
 8006502:	d109      	bne.n	8006518 <__libc_init_array+0x24>
 8006504:	4e0b      	ldr	r6, [pc, #44]	; (8006534 <__libc_init_array+0x40>)
 8006506:	4c0c      	ldr	r4, [pc, #48]	; (8006538 <__libc_init_array+0x44>)
 8006508:	f002 faae 	bl	8008a68 <_init>
 800650c:	1ba4      	subs	r4, r4, r6
 800650e:	10a4      	asrs	r4, r4, #2
 8006510:	2500      	movs	r5, #0
 8006512:	42a5      	cmp	r5, r4
 8006514:	d105      	bne.n	8006522 <__libc_init_array+0x2e>
 8006516:	bd70      	pop	{r4, r5, r6, pc}
 8006518:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800651c:	4798      	blx	r3
 800651e:	3501      	adds	r5, #1
 8006520:	e7ee      	b.n	8006500 <__libc_init_array+0xc>
 8006522:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006526:	4798      	blx	r3
 8006528:	3501      	adds	r5, #1
 800652a:	e7f2      	b.n	8006512 <__libc_init_array+0x1e>
 800652c:	08009194 	.word	0x08009194
 8006530:	08009194 	.word	0x08009194
 8006534:	08009194 	.word	0x08009194
 8006538:	08009198 	.word	0x08009198

0800653c <memcpy>:
 800653c:	b510      	push	{r4, lr}
 800653e:	1e43      	subs	r3, r0, #1
 8006540:	440a      	add	r2, r1
 8006542:	4291      	cmp	r1, r2
 8006544:	d100      	bne.n	8006548 <memcpy+0xc>
 8006546:	bd10      	pop	{r4, pc}
 8006548:	f811 4b01 	ldrb.w	r4, [r1], #1
 800654c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006550:	e7f7      	b.n	8006542 <memcpy+0x6>

08006552 <memset>:
 8006552:	4402      	add	r2, r0
 8006554:	4603      	mov	r3, r0
 8006556:	4293      	cmp	r3, r2
 8006558:	d100      	bne.n	800655c <memset+0xa>
 800655a:	4770      	bx	lr
 800655c:	f803 1b01 	strb.w	r1, [r3], #1
 8006560:	e7f9      	b.n	8006556 <memset+0x4>

08006562 <__cvt>:
 8006562:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006566:	ec55 4b10 	vmov	r4, r5, d0
 800656a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800656c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006570:	2d00      	cmp	r5, #0
 8006572:	460e      	mov	r6, r1
 8006574:	4691      	mov	r9, r2
 8006576:	4619      	mov	r1, r3
 8006578:	bfb8      	it	lt
 800657a:	4622      	movlt	r2, r4
 800657c:	462b      	mov	r3, r5
 800657e:	f027 0720 	bic.w	r7, r7, #32
 8006582:	bfbb      	ittet	lt
 8006584:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006588:	461d      	movlt	r5, r3
 800658a:	2300      	movge	r3, #0
 800658c:	232d      	movlt	r3, #45	; 0x2d
 800658e:	bfb8      	it	lt
 8006590:	4614      	movlt	r4, r2
 8006592:	2f46      	cmp	r7, #70	; 0x46
 8006594:	700b      	strb	r3, [r1, #0]
 8006596:	d004      	beq.n	80065a2 <__cvt+0x40>
 8006598:	2f45      	cmp	r7, #69	; 0x45
 800659a:	d100      	bne.n	800659e <__cvt+0x3c>
 800659c:	3601      	adds	r6, #1
 800659e:	2102      	movs	r1, #2
 80065a0:	e000      	b.n	80065a4 <__cvt+0x42>
 80065a2:	2103      	movs	r1, #3
 80065a4:	ab03      	add	r3, sp, #12
 80065a6:	9301      	str	r3, [sp, #4]
 80065a8:	ab02      	add	r3, sp, #8
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	4632      	mov	r2, r6
 80065ae:	4653      	mov	r3, sl
 80065b0:	ec45 4b10 	vmov	d0, r4, r5
 80065b4:	f000 fcf0 	bl	8006f98 <_dtoa_r>
 80065b8:	2f47      	cmp	r7, #71	; 0x47
 80065ba:	4680      	mov	r8, r0
 80065bc:	d102      	bne.n	80065c4 <__cvt+0x62>
 80065be:	f019 0f01 	tst.w	r9, #1
 80065c2:	d026      	beq.n	8006612 <__cvt+0xb0>
 80065c4:	2f46      	cmp	r7, #70	; 0x46
 80065c6:	eb08 0906 	add.w	r9, r8, r6
 80065ca:	d111      	bne.n	80065f0 <__cvt+0x8e>
 80065cc:	f898 3000 	ldrb.w	r3, [r8]
 80065d0:	2b30      	cmp	r3, #48	; 0x30
 80065d2:	d10a      	bne.n	80065ea <__cvt+0x88>
 80065d4:	2200      	movs	r2, #0
 80065d6:	2300      	movs	r3, #0
 80065d8:	4620      	mov	r0, r4
 80065da:	4629      	mov	r1, r5
 80065dc:	f7fa fa84 	bl	8000ae8 <__aeabi_dcmpeq>
 80065e0:	b918      	cbnz	r0, 80065ea <__cvt+0x88>
 80065e2:	f1c6 0601 	rsb	r6, r6, #1
 80065e6:	f8ca 6000 	str.w	r6, [sl]
 80065ea:	f8da 3000 	ldr.w	r3, [sl]
 80065ee:	4499      	add	r9, r3
 80065f0:	2200      	movs	r2, #0
 80065f2:	2300      	movs	r3, #0
 80065f4:	4620      	mov	r0, r4
 80065f6:	4629      	mov	r1, r5
 80065f8:	f7fa fa76 	bl	8000ae8 <__aeabi_dcmpeq>
 80065fc:	b938      	cbnz	r0, 800660e <__cvt+0xac>
 80065fe:	2230      	movs	r2, #48	; 0x30
 8006600:	9b03      	ldr	r3, [sp, #12]
 8006602:	454b      	cmp	r3, r9
 8006604:	d205      	bcs.n	8006612 <__cvt+0xb0>
 8006606:	1c59      	adds	r1, r3, #1
 8006608:	9103      	str	r1, [sp, #12]
 800660a:	701a      	strb	r2, [r3, #0]
 800660c:	e7f8      	b.n	8006600 <__cvt+0x9e>
 800660e:	f8cd 900c 	str.w	r9, [sp, #12]
 8006612:	9b03      	ldr	r3, [sp, #12]
 8006614:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006616:	eba3 0308 	sub.w	r3, r3, r8
 800661a:	4640      	mov	r0, r8
 800661c:	6013      	str	r3, [r2, #0]
 800661e:	b004      	add	sp, #16
 8006620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006624 <__exponent>:
 8006624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006626:	2900      	cmp	r1, #0
 8006628:	4604      	mov	r4, r0
 800662a:	bfba      	itte	lt
 800662c:	4249      	neglt	r1, r1
 800662e:	232d      	movlt	r3, #45	; 0x2d
 8006630:	232b      	movge	r3, #43	; 0x2b
 8006632:	2909      	cmp	r1, #9
 8006634:	f804 2b02 	strb.w	r2, [r4], #2
 8006638:	7043      	strb	r3, [r0, #1]
 800663a:	dd20      	ble.n	800667e <__exponent+0x5a>
 800663c:	f10d 0307 	add.w	r3, sp, #7
 8006640:	461f      	mov	r7, r3
 8006642:	260a      	movs	r6, #10
 8006644:	fb91 f5f6 	sdiv	r5, r1, r6
 8006648:	fb06 1115 	mls	r1, r6, r5, r1
 800664c:	3130      	adds	r1, #48	; 0x30
 800664e:	2d09      	cmp	r5, #9
 8006650:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006654:	f103 32ff 	add.w	r2, r3, #4294967295
 8006658:	4629      	mov	r1, r5
 800665a:	dc09      	bgt.n	8006670 <__exponent+0x4c>
 800665c:	3130      	adds	r1, #48	; 0x30
 800665e:	3b02      	subs	r3, #2
 8006660:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006664:	42bb      	cmp	r3, r7
 8006666:	4622      	mov	r2, r4
 8006668:	d304      	bcc.n	8006674 <__exponent+0x50>
 800666a:	1a10      	subs	r0, r2, r0
 800666c:	b003      	add	sp, #12
 800666e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006670:	4613      	mov	r3, r2
 8006672:	e7e7      	b.n	8006644 <__exponent+0x20>
 8006674:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006678:	f804 2b01 	strb.w	r2, [r4], #1
 800667c:	e7f2      	b.n	8006664 <__exponent+0x40>
 800667e:	2330      	movs	r3, #48	; 0x30
 8006680:	4419      	add	r1, r3
 8006682:	7083      	strb	r3, [r0, #2]
 8006684:	1d02      	adds	r2, r0, #4
 8006686:	70c1      	strb	r1, [r0, #3]
 8006688:	e7ef      	b.n	800666a <__exponent+0x46>
	...

0800668c <_printf_float>:
 800668c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006690:	b08d      	sub	sp, #52	; 0x34
 8006692:	460c      	mov	r4, r1
 8006694:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006698:	4616      	mov	r6, r2
 800669a:	461f      	mov	r7, r3
 800669c:	4605      	mov	r5, r0
 800669e:	f001 fa33 	bl	8007b08 <_localeconv_r>
 80066a2:	6803      	ldr	r3, [r0, #0]
 80066a4:	9304      	str	r3, [sp, #16]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7f9 fd9c 	bl	80001e4 <strlen>
 80066ac:	2300      	movs	r3, #0
 80066ae:	930a      	str	r3, [sp, #40]	; 0x28
 80066b0:	f8d8 3000 	ldr.w	r3, [r8]
 80066b4:	9005      	str	r0, [sp, #20]
 80066b6:	3307      	adds	r3, #7
 80066b8:	f023 0307 	bic.w	r3, r3, #7
 80066bc:	f103 0208 	add.w	r2, r3, #8
 80066c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80066c4:	f8d4 b000 	ldr.w	fp, [r4]
 80066c8:	f8c8 2000 	str.w	r2, [r8]
 80066cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80066d4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80066d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80066dc:	9307      	str	r3, [sp, #28]
 80066de:	f8cd 8018 	str.w	r8, [sp, #24]
 80066e2:	f04f 32ff 	mov.w	r2, #4294967295
 80066e6:	4ba7      	ldr	r3, [pc, #668]	; (8006984 <_printf_float+0x2f8>)
 80066e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066ec:	f7fa fa2e 	bl	8000b4c <__aeabi_dcmpun>
 80066f0:	bb70      	cbnz	r0, 8006750 <_printf_float+0xc4>
 80066f2:	f04f 32ff 	mov.w	r2, #4294967295
 80066f6:	4ba3      	ldr	r3, [pc, #652]	; (8006984 <_printf_float+0x2f8>)
 80066f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066fc:	f7fa fa08 	bl	8000b10 <__aeabi_dcmple>
 8006700:	bb30      	cbnz	r0, 8006750 <_printf_float+0xc4>
 8006702:	2200      	movs	r2, #0
 8006704:	2300      	movs	r3, #0
 8006706:	4640      	mov	r0, r8
 8006708:	4649      	mov	r1, r9
 800670a:	f7fa f9f7 	bl	8000afc <__aeabi_dcmplt>
 800670e:	b110      	cbz	r0, 8006716 <_printf_float+0x8a>
 8006710:	232d      	movs	r3, #45	; 0x2d
 8006712:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006716:	4a9c      	ldr	r2, [pc, #624]	; (8006988 <_printf_float+0x2fc>)
 8006718:	4b9c      	ldr	r3, [pc, #624]	; (800698c <_printf_float+0x300>)
 800671a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800671e:	bf8c      	ite	hi
 8006720:	4690      	movhi	r8, r2
 8006722:	4698      	movls	r8, r3
 8006724:	2303      	movs	r3, #3
 8006726:	f02b 0204 	bic.w	r2, fp, #4
 800672a:	6123      	str	r3, [r4, #16]
 800672c:	6022      	str	r2, [r4, #0]
 800672e:	f04f 0900 	mov.w	r9, #0
 8006732:	9700      	str	r7, [sp, #0]
 8006734:	4633      	mov	r3, r6
 8006736:	aa0b      	add	r2, sp, #44	; 0x2c
 8006738:	4621      	mov	r1, r4
 800673a:	4628      	mov	r0, r5
 800673c:	f000 f9e6 	bl	8006b0c <_printf_common>
 8006740:	3001      	adds	r0, #1
 8006742:	f040 808d 	bne.w	8006860 <_printf_float+0x1d4>
 8006746:	f04f 30ff 	mov.w	r0, #4294967295
 800674a:	b00d      	add	sp, #52	; 0x34
 800674c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006750:	4642      	mov	r2, r8
 8006752:	464b      	mov	r3, r9
 8006754:	4640      	mov	r0, r8
 8006756:	4649      	mov	r1, r9
 8006758:	f7fa f9f8 	bl	8000b4c <__aeabi_dcmpun>
 800675c:	b110      	cbz	r0, 8006764 <_printf_float+0xd8>
 800675e:	4a8c      	ldr	r2, [pc, #560]	; (8006990 <_printf_float+0x304>)
 8006760:	4b8c      	ldr	r3, [pc, #560]	; (8006994 <_printf_float+0x308>)
 8006762:	e7da      	b.n	800671a <_printf_float+0x8e>
 8006764:	6861      	ldr	r1, [r4, #4]
 8006766:	1c4b      	adds	r3, r1, #1
 8006768:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800676c:	a80a      	add	r0, sp, #40	; 0x28
 800676e:	d13e      	bne.n	80067ee <_printf_float+0x162>
 8006770:	2306      	movs	r3, #6
 8006772:	6063      	str	r3, [r4, #4]
 8006774:	2300      	movs	r3, #0
 8006776:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800677a:	ab09      	add	r3, sp, #36	; 0x24
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	ec49 8b10 	vmov	d0, r8, r9
 8006782:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006786:	6022      	str	r2, [r4, #0]
 8006788:	f8cd a004 	str.w	sl, [sp, #4]
 800678c:	6861      	ldr	r1, [r4, #4]
 800678e:	4628      	mov	r0, r5
 8006790:	f7ff fee7 	bl	8006562 <__cvt>
 8006794:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006798:	2b47      	cmp	r3, #71	; 0x47
 800679a:	4680      	mov	r8, r0
 800679c:	d109      	bne.n	80067b2 <_printf_float+0x126>
 800679e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067a0:	1cd8      	adds	r0, r3, #3
 80067a2:	db02      	blt.n	80067aa <_printf_float+0x11e>
 80067a4:	6862      	ldr	r2, [r4, #4]
 80067a6:	4293      	cmp	r3, r2
 80067a8:	dd47      	ble.n	800683a <_printf_float+0x1ae>
 80067aa:	f1aa 0a02 	sub.w	sl, sl, #2
 80067ae:	fa5f fa8a 	uxtb.w	sl, sl
 80067b2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80067b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067b8:	d824      	bhi.n	8006804 <_printf_float+0x178>
 80067ba:	3901      	subs	r1, #1
 80067bc:	4652      	mov	r2, sl
 80067be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80067c2:	9109      	str	r1, [sp, #36]	; 0x24
 80067c4:	f7ff ff2e 	bl	8006624 <__exponent>
 80067c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067ca:	1813      	adds	r3, r2, r0
 80067cc:	2a01      	cmp	r2, #1
 80067ce:	4681      	mov	r9, r0
 80067d0:	6123      	str	r3, [r4, #16]
 80067d2:	dc02      	bgt.n	80067da <_printf_float+0x14e>
 80067d4:	6822      	ldr	r2, [r4, #0]
 80067d6:	07d1      	lsls	r1, r2, #31
 80067d8:	d501      	bpl.n	80067de <_printf_float+0x152>
 80067da:	3301      	adds	r3, #1
 80067dc:	6123      	str	r3, [r4, #16]
 80067de:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d0a5      	beq.n	8006732 <_printf_float+0xa6>
 80067e6:	232d      	movs	r3, #45	; 0x2d
 80067e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067ec:	e7a1      	b.n	8006732 <_printf_float+0xa6>
 80067ee:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80067f2:	f000 8177 	beq.w	8006ae4 <_printf_float+0x458>
 80067f6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80067fa:	d1bb      	bne.n	8006774 <_printf_float+0xe8>
 80067fc:	2900      	cmp	r1, #0
 80067fe:	d1b9      	bne.n	8006774 <_printf_float+0xe8>
 8006800:	2301      	movs	r3, #1
 8006802:	e7b6      	b.n	8006772 <_printf_float+0xe6>
 8006804:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006808:	d119      	bne.n	800683e <_printf_float+0x1b2>
 800680a:	2900      	cmp	r1, #0
 800680c:	6863      	ldr	r3, [r4, #4]
 800680e:	dd0c      	ble.n	800682a <_printf_float+0x19e>
 8006810:	6121      	str	r1, [r4, #16]
 8006812:	b913      	cbnz	r3, 800681a <_printf_float+0x18e>
 8006814:	6822      	ldr	r2, [r4, #0]
 8006816:	07d2      	lsls	r2, r2, #31
 8006818:	d502      	bpl.n	8006820 <_printf_float+0x194>
 800681a:	3301      	adds	r3, #1
 800681c:	440b      	add	r3, r1
 800681e:	6123      	str	r3, [r4, #16]
 8006820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006822:	65a3      	str	r3, [r4, #88]	; 0x58
 8006824:	f04f 0900 	mov.w	r9, #0
 8006828:	e7d9      	b.n	80067de <_printf_float+0x152>
 800682a:	b913      	cbnz	r3, 8006832 <_printf_float+0x1a6>
 800682c:	6822      	ldr	r2, [r4, #0]
 800682e:	07d0      	lsls	r0, r2, #31
 8006830:	d501      	bpl.n	8006836 <_printf_float+0x1aa>
 8006832:	3302      	adds	r3, #2
 8006834:	e7f3      	b.n	800681e <_printf_float+0x192>
 8006836:	2301      	movs	r3, #1
 8006838:	e7f1      	b.n	800681e <_printf_float+0x192>
 800683a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800683e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006842:	4293      	cmp	r3, r2
 8006844:	db05      	blt.n	8006852 <_printf_float+0x1c6>
 8006846:	6822      	ldr	r2, [r4, #0]
 8006848:	6123      	str	r3, [r4, #16]
 800684a:	07d1      	lsls	r1, r2, #31
 800684c:	d5e8      	bpl.n	8006820 <_printf_float+0x194>
 800684e:	3301      	adds	r3, #1
 8006850:	e7e5      	b.n	800681e <_printf_float+0x192>
 8006852:	2b00      	cmp	r3, #0
 8006854:	bfd4      	ite	le
 8006856:	f1c3 0302 	rsble	r3, r3, #2
 800685a:	2301      	movgt	r3, #1
 800685c:	4413      	add	r3, r2
 800685e:	e7de      	b.n	800681e <_printf_float+0x192>
 8006860:	6823      	ldr	r3, [r4, #0]
 8006862:	055a      	lsls	r2, r3, #21
 8006864:	d407      	bmi.n	8006876 <_printf_float+0x1ea>
 8006866:	6923      	ldr	r3, [r4, #16]
 8006868:	4642      	mov	r2, r8
 800686a:	4631      	mov	r1, r6
 800686c:	4628      	mov	r0, r5
 800686e:	47b8      	blx	r7
 8006870:	3001      	adds	r0, #1
 8006872:	d12b      	bne.n	80068cc <_printf_float+0x240>
 8006874:	e767      	b.n	8006746 <_printf_float+0xba>
 8006876:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800687a:	f240 80dc 	bls.w	8006a36 <_printf_float+0x3aa>
 800687e:	2200      	movs	r2, #0
 8006880:	2300      	movs	r3, #0
 8006882:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006886:	f7fa f92f 	bl	8000ae8 <__aeabi_dcmpeq>
 800688a:	2800      	cmp	r0, #0
 800688c:	d033      	beq.n	80068f6 <_printf_float+0x26a>
 800688e:	2301      	movs	r3, #1
 8006890:	4a41      	ldr	r2, [pc, #260]	; (8006998 <_printf_float+0x30c>)
 8006892:	4631      	mov	r1, r6
 8006894:	4628      	mov	r0, r5
 8006896:	47b8      	blx	r7
 8006898:	3001      	adds	r0, #1
 800689a:	f43f af54 	beq.w	8006746 <_printf_float+0xba>
 800689e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068a2:	429a      	cmp	r2, r3
 80068a4:	db02      	blt.n	80068ac <_printf_float+0x220>
 80068a6:	6823      	ldr	r3, [r4, #0]
 80068a8:	07d8      	lsls	r0, r3, #31
 80068aa:	d50f      	bpl.n	80068cc <_printf_float+0x240>
 80068ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068b0:	4631      	mov	r1, r6
 80068b2:	4628      	mov	r0, r5
 80068b4:	47b8      	blx	r7
 80068b6:	3001      	adds	r0, #1
 80068b8:	f43f af45 	beq.w	8006746 <_printf_float+0xba>
 80068bc:	f04f 0800 	mov.w	r8, #0
 80068c0:	f104 091a 	add.w	r9, r4, #26
 80068c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068c6:	3b01      	subs	r3, #1
 80068c8:	4543      	cmp	r3, r8
 80068ca:	dc09      	bgt.n	80068e0 <_printf_float+0x254>
 80068cc:	6823      	ldr	r3, [r4, #0]
 80068ce:	079b      	lsls	r3, r3, #30
 80068d0:	f100 8103 	bmi.w	8006ada <_printf_float+0x44e>
 80068d4:	68e0      	ldr	r0, [r4, #12]
 80068d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068d8:	4298      	cmp	r0, r3
 80068da:	bfb8      	it	lt
 80068dc:	4618      	movlt	r0, r3
 80068de:	e734      	b.n	800674a <_printf_float+0xbe>
 80068e0:	2301      	movs	r3, #1
 80068e2:	464a      	mov	r2, r9
 80068e4:	4631      	mov	r1, r6
 80068e6:	4628      	mov	r0, r5
 80068e8:	47b8      	blx	r7
 80068ea:	3001      	adds	r0, #1
 80068ec:	f43f af2b 	beq.w	8006746 <_printf_float+0xba>
 80068f0:	f108 0801 	add.w	r8, r8, #1
 80068f4:	e7e6      	b.n	80068c4 <_printf_float+0x238>
 80068f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	dc2b      	bgt.n	8006954 <_printf_float+0x2c8>
 80068fc:	2301      	movs	r3, #1
 80068fe:	4a26      	ldr	r2, [pc, #152]	; (8006998 <_printf_float+0x30c>)
 8006900:	4631      	mov	r1, r6
 8006902:	4628      	mov	r0, r5
 8006904:	47b8      	blx	r7
 8006906:	3001      	adds	r0, #1
 8006908:	f43f af1d 	beq.w	8006746 <_printf_float+0xba>
 800690c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800690e:	b923      	cbnz	r3, 800691a <_printf_float+0x28e>
 8006910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006912:	b913      	cbnz	r3, 800691a <_printf_float+0x28e>
 8006914:	6823      	ldr	r3, [r4, #0]
 8006916:	07d9      	lsls	r1, r3, #31
 8006918:	d5d8      	bpl.n	80068cc <_printf_float+0x240>
 800691a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800691e:	4631      	mov	r1, r6
 8006920:	4628      	mov	r0, r5
 8006922:	47b8      	blx	r7
 8006924:	3001      	adds	r0, #1
 8006926:	f43f af0e 	beq.w	8006746 <_printf_float+0xba>
 800692a:	f04f 0900 	mov.w	r9, #0
 800692e:	f104 0a1a 	add.w	sl, r4, #26
 8006932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006934:	425b      	negs	r3, r3
 8006936:	454b      	cmp	r3, r9
 8006938:	dc01      	bgt.n	800693e <_printf_float+0x2b2>
 800693a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800693c:	e794      	b.n	8006868 <_printf_float+0x1dc>
 800693e:	2301      	movs	r3, #1
 8006940:	4652      	mov	r2, sl
 8006942:	4631      	mov	r1, r6
 8006944:	4628      	mov	r0, r5
 8006946:	47b8      	blx	r7
 8006948:	3001      	adds	r0, #1
 800694a:	f43f aefc 	beq.w	8006746 <_printf_float+0xba>
 800694e:	f109 0901 	add.w	r9, r9, #1
 8006952:	e7ee      	b.n	8006932 <_printf_float+0x2a6>
 8006954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006956:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006958:	429a      	cmp	r2, r3
 800695a:	bfa8      	it	ge
 800695c:	461a      	movge	r2, r3
 800695e:	2a00      	cmp	r2, #0
 8006960:	4691      	mov	r9, r2
 8006962:	dd07      	ble.n	8006974 <_printf_float+0x2e8>
 8006964:	4613      	mov	r3, r2
 8006966:	4631      	mov	r1, r6
 8006968:	4642      	mov	r2, r8
 800696a:	4628      	mov	r0, r5
 800696c:	47b8      	blx	r7
 800696e:	3001      	adds	r0, #1
 8006970:	f43f aee9 	beq.w	8006746 <_printf_float+0xba>
 8006974:	f104 031a 	add.w	r3, r4, #26
 8006978:	f04f 0b00 	mov.w	fp, #0
 800697c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006980:	9306      	str	r3, [sp, #24]
 8006982:	e015      	b.n	80069b0 <_printf_float+0x324>
 8006984:	7fefffff 	.word	0x7fefffff
 8006988:	08008f38 	.word	0x08008f38
 800698c:	08008f34 	.word	0x08008f34
 8006990:	08008f40 	.word	0x08008f40
 8006994:	08008f3c 	.word	0x08008f3c
 8006998:	08008f44 	.word	0x08008f44
 800699c:	2301      	movs	r3, #1
 800699e:	9a06      	ldr	r2, [sp, #24]
 80069a0:	4631      	mov	r1, r6
 80069a2:	4628      	mov	r0, r5
 80069a4:	47b8      	blx	r7
 80069a6:	3001      	adds	r0, #1
 80069a8:	f43f aecd 	beq.w	8006746 <_printf_float+0xba>
 80069ac:	f10b 0b01 	add.w	fp, fp, #1
 80069b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80069b4:	ebaa 0309 	sub.w	r3, sl, r9
 80069b8:	455b      	cmp	r3, fp
 80069ba:	dcef      	bgt.n	800699c <_printf_float+0x310>
 80069bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069c0:	429a      	cmp	r2, r3
 80069c2:	44d0      	add	r8, sl
 80069c4:	db15      	blt.n	80069f2 <_printf_float+0x366>
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	07da      	lsls	r2, r3, #31
 80069ca:	d412      	bmi.n	80069f2 <_printf_float+0x366>
 80069cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069d0:	eba3 020a 	sub.w	r2, r3, sl
 80069d4:	eba3 0a01 	sub.w	sl, r3, r1
 80069d8:	4592      	cmp	sl, r2
 80069da:	bfa8      	it	ge
 80069dc:	4692      	movge	sl, r2
 80069de:	f1ba 0f00 	cmp.w	sl, #0
 80069e2:	dc0e      	bgt.n	8006a02 <_printf_float+0x376>
 80069e4:	f04f 0800 	mov.w	r8, #0
 80069e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80069ec:	f104 091a 	add.w	r9, r4, #26
 80069f0:	e019      	b.n	8006a26 <_printf_float+0x39a>
 80069f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069f6:	4631      	mov	r1, r6
 80069f8:	4628      	mov	r0, r5
 80069fa:	47b8      	blx	r7
 80069fc:	3001      	adds	r0, #1
 80069fe:	d1e5      	bne.n	80069cc <_printf_float+0x340>
 8006a00:	e6a1      	b.n	8006746 <_printf_float+0xba>
 8006a02:	4653      	mov	r3, sl
 8006a04:	4642      	mov	r2, r8
 8006a06:	4631      	mov	r1, r6
 8006a08:	4628      	mov	r0, r5
 8006a0a:	47b8      	blx	r7
 8006a0c:	3001      	adds	r0, #1
 8006a0e:	d1e9      	bne.n	80069e4 <_printf_float+0x358>
 8006a10:	e699      	b.n	8006746 <_printf_float+0xba>
 8006a12:	2301      	movs	r3, #1
 8006a14:	464a      	mov	r2, r9
 8006a16:	4631      	mov	r1, r6
 8006a18:	4628      	mov	r0, r5
 8006a1a:	47b8      	blx	r7
 8006a1c:	3001      	adds	r0, #1
 8006a1e:	f43f ae92 	beq.w	8006746 <_printf_float+0xba>
 8006a22:	f108 0801 	add.w	r8, r8, #1
 8006a26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a2a:	1a9b      	subs	r3, r3, r2
 8006a2c:	eba3 030a 	sub.w	r3, r3, sl
 8006a30:	4543      	cmp	r3, r8
 8006a32:	dcee      	bgt.n	8006a12 <_printf_float+0x386>
 8006a34:	e74a      	b.n	80068cc <_printf_float+0x240>
 8006a36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a38:	2a01      	cmp	r2, #1
 8006a3a:	dc01      	bgt.n	8006a40 <_printf_float+0x3b4>
 8006a3c:	07db      	lsls	r3, r3, #31
 8006a3e:	d53a      	bpl.n	8006ab6 <_printf_float+0x42a>
 8006a40:	2301      	movs	r3, #1
 8006a42:	4642      	mov	r2, r8
 8006a44:	4631      	mov	r1, r6
 8006a46:	4628      	mov	r0, r5
 8006a48:	47b8      	blx	r7
 8006a4a:	3001      	adds	r0, #1
 8006a4c:	f43f ae7b 	beq.w	8006746 <_printf_float+0xba>
 8006a50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a54:	4631      	mov	r1, r6
 8006a56:	4628      	mov	r0, r5
 8006a58:	47b8      	blx	r7
 8006a5a:	3001      	adds	r0, #1
 8006a5c:	f108 0801 	add.w	r8, r8, #1
 8006a60:	f43f ae71 	beq.w	8006746 <_printf_float+0xba>
 8006a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a66:	2200      	movs	r2, #0
 8006a68:	f103 3aff 	add.w	sl, r3, #4294967295
 8006a6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a70:	2300      	movs	r3, #0
 8006a72:	f7fa f839 	bl	8000ae8 <__aeabi_dcmpeq>
 8006a76:	b9c8      	cbnz	r0, 8006aac <_printf_float+0x420>
 8006a78:	4653      	mov	r3, sl
 8006a7a:	4642      	mov	r2, r8
 8006a7c:	4631      	mov	r1, r6
 8006a7e:	4628      	mov	r0, r5
 8006a80:	47b8      	blx	r7
 8006a82:	3001      	adds	r0, #1
 8006a84:	d10e      	bne.n	8006aa4 <_printf_float+0x418>
 8006a86:	e65e      	b.n	8006746 <_printf_float+0xba>
 8006a88:	2301      	movs	r3, #1
 8006a8a:	4652      	mov	r2, sl
 8006a8c:	4631      	mov	r1, r6
 8006a8e:	4628      	mov	r0, r5
 8006a90:	47b8      	blx	r7
 8006a92:	3001      	adds	r0, #1
 8006a94:	f43f ae57 	beq.w	8006746 <_printf_float+0xba>
 8006a98:	f108 0801 	add.w	r8, r8, #1
 8006a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	4543      	cmp	r3, r8
 8006aa2:	dcf1      	bgt.n	8006a88 <_printf_float+0x3fc>
 8006aa4:	464b      	mov	r3, r9
 8006aa6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006aaa:	e6de      	b.n	800686a <_printf_float+0x1de>
 8006aac:	f04f 0800 	mov.w	r8, #0
 8006ab0:	f104 0a1a 	add.w	sl, r4, #26
 8006ab4:	e7f2      	b.n	8006a9c <_printf_float+0x410>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e7df      	b.n	8006a7a <_printf_float+0x3ee>
 8006aba:	2301      	movs	r3, #1
 8006abc:	464a      	mov	r2, r9
 8006abe:	4631      	mov	r1, r6
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	47b8      	blx	r7
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	f43f ae3e 	beq.w	8006746 <_printf_float+0xba>
 8006aca:	f108 0801 	add.w	r8, r8, #1
 8006ace:	68e3      	ldr	r3, [r4, #12]
 8006ad0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ad2:	1a9b      	subs	r3, r3, r2
 8006ad4:	4543      	cmp	r3, r8
 8006ad6:	dcf0      	bgt.n	8006aba <_printf_float+0x42e>
 8006ad8:	e6fc      	b.n	80068d4 <_printf_float+0x248>
 8006ada:	f04f 0800 	mov.w	r8, #0
 8006ade:	f104 0919 	add.w	r9, r4, #25
 8006ae2:	e7f4      	b.n	8006ace <_printf_float+0x442>
 8006ae4:	2900      	cmp	r1, #0
 8006ae6:	f43f ae8b 	beq.w	8006800 <_printf_float+0x174>
 8006aea:	2300      	movs	r3, #0
 8006aec:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006af0:	ab09      	add	r3, sp, #36	; 0x24
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	ec49 8b10 	vmov	d0, r8, r9
 8006af8:	6022      	str	r2, [r4, #0]
 8006afa:	f8cd a004 	str.w	sl, [sp, #4]
 8006afe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006b02:	4628      	mov	r0, r5
 8006b04:	f7ff fd2d 	bl	8006562 <__cvt>
 8006b08:	4680      	mov	r8, r0
 8006b0a:	e648      	b.n	800679e <_printf_float+0x112>

08006b0c <_printf_common>:
 8006b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b10:	4691      	mov	r9, r2
 8006b12:	461f      	mov	r7, r3
 8006b14:	688a      	ldr	r2, [r1, #8]
 8006b16:	690b      	ldr	r3, [r1, #16]
 8006b18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	bfb8      	it	lt
 8006b20:	4613      	movlt	r3, r2
 8006b22:	f8c9 3000 	str.w	r3, [r9]
 8006b26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b2a:	4606      	mov	r6, r0
 8006b2c:	460c      	mov	r4, r1
 8006b2e:	b112      	cbz	r2, 8006b36 <_printf_common+0x2a>
 8006b30:	3301      	adds	r3, #1
 8006b32:	f8c9 3000 	str.w	r3, [r9]
 8006b36:	6823      	ldr	r3, [r4, #0]
 8006b38:	0699      	lsls	r1, r3, #26
 8006b3a:	bf42      	ittt	mi
 8006b3c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006b40:	3302      	addmi	r3, #2
 8006b42:	f8c9 3000 	strmi.w	r3, [r9]
 8006b46:	6825      	ldr	r5, [r4, #0]
 8006b48:	f015 0506 	ands.w	r5, r5, #6
 8006b4c:	d107      	bne.n	8006b5e <_printf_common+0x52>
 8006b4e:	f104 0a19 	add.w	sl, r4, #25
 8006b52:	68e3      	ldr	r3, [r4, #12]
 8006b54:	f8d9 2000 	ldr.w	r2, [r9]
 8006b58:	1a9b      	subs	r3, r3, r2
 8006b5a:	42ab      	cmp	r3, r5
 8006b5c:	dc28      	bgt.n	8006bb0 <_printf_common+0xa4>
 8006b5e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006b62:	6822      	ldr	r2, [r4, #0]
 8006b64:	3300      	adds	r3, #0
 8006b66:	bf18      	it	ne
 8006b68:	2301      	movne	r3, #1
 8006b6a:	0692      	lsls	r2, r2, #26
 8006b6c:	d42d      	bmi.n	8006bca <_printf_common+0xbe>
 8006b6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b72:	4639      	mov	r1, r7
 8006b74:	4630      	mov	r0, r6
 8006b76:	47c0      	blx	r8
 8006b78:	3001      	adds	r0, #1
 8006b7a:	d020      	beq.n	8006bbe <_printf_common+0xb2>
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	68e5      	ldr	r5, [r4, #12]
 8006b80:	f8d9 2000 	ldr.w	r2, [r9]
 8006b84:	f003 0306 	and.w	r3, r3, #6
 8006b88:	2b04      	cmp	r3, #4
 8006b8a:	bf08      	it	eq
 8006b8c:	1aad      	subeq	r5, r5, r2
 8006b8e:	68a3      	ldr	r3, [r4, #8]
 8006b90:	6922      	ldr	r2, [r4, #16]
 8006b92:	bf0c      	ite	eq
 8006b94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b98:	2500      	movne	r5, #0
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	bfc4      	itt	gt
 8006b9e:	1a9b      	subgt	r3, r3, r2
 8006ba0:	18ed      	addgt	r5, r5, r3
 8006ba2:	f04f 0900 	mov.w	r9, #0
 8006ba6:	341a      	adds	r4, #26
 8006ba8:	454d      	cmp	r5, r9
 8006baa:	d11a      	bne.n	8006be2 <_printf_common+0xd6>
 8006bac:	2000      	movs	r0, #0
 8006bae:	e008      	b.n	8006bc2 <_printf_common+0xb6>
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	4652      	mov	r2, sl
 8006bb4:	4639      	mov	r1, r7
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	47c0      	blx	r8
 8006bba:	3001      	adds	r0, #1
 8006bbc:	d103      	bne.n	8006bc6 <_printf_common+0xba>
 8006bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bc6:	3501      	adds	r5, #1
 8006bc8:	e7c3      	b.n	8006b52 <_printf_common+0x46>
 8006bca:	18e1      	adds	r1, r4, r3
 8006bcc:	1c5a      	adds	r2, r3, #1
 8006bce:	2030      	movs	r0, #48	; 0x30
 8006bd0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bd4:	4422      	add	r2, r4
 8006bd6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bde:	3302      	adds	r3, #2
 8006be0:	e7c5      	b.n	8006b6e <_printf_common+0x62>
 8006be2:	2301      	movs	r3, #1
 8006be4:	4622      	mov	r2, r4
 8006be6:	4639      	mov	r1, r7
 8006be8:	4630      	mov	r0, r6
 8006bea:	47c0      	blx	r8
 8006bec:	3001      	adds	r0, #1
 8006bee:	d0e6      	beq.n	8006bbe <_printf_common+0xb2>
 8006bf0:	f109 0901 	add.w	r9, r9, #1
 8006bf4:	e7d8      	b.n	8006ba8 <_printf_common+0x9c>
	...

08006bf8 <_printf_i>:
 8006bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006bfc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006c00:	460c      	mov	r4, r1
 8006c02:	7e09      	ldrb	r1, [r1, #24]
 8006c04:	b085      	sub	sp, #20
 8006c06:	296e      	cmp	r1, #110	; 0x6e
 8006c08:	4617      	mov	r7, r2
 8006c0a:	4606      	mov	r6, r0
 8006c0c:	4698      	mov	r8, r3
 8006c0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c10:	f000 80b3 	beq.w	8006d7a <_printf_i+0x182>
 8006c14:	d822      	bhi.n	8006c5c <_printf_i+0x64>
 8006c16:	2963      	cmp	r1, #99	; 0x63
 8006c18:	d036      	beq.n	8006c88 <_printf_i+0x90>
 8006c1a:	d80a      	bhi.n	8006c32 <_printf_i+0x3a>
 8006c1c:	2900      	cmp	r1, #0
 8006c1e:	f000 80b9 	beq.w	8006d94 <_printf_i+0x19c>
 8006c22:	2958      	cmp	r1, #88	; 0x58
 8006c24:	f000 8083 	beq.w	8006d2e <_printf_i+0x136>
 8006c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c2c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006c30:	e032      	b.n	8006c98 <_printf_i+0xa0>
 8006c32:	2964      	cmp	r1, #100	; 0x64
 8006c34:	d001      	beq.n	8006c3a <_printf_i+0x42>
 8006c36:	2969      	cmp	r1, #105	; 0x69
 8006c38:	d1f6      	bne.n	8006c28 <_printf_i+0x30>
 8006c3a:	6820      	ldr	r0, [r4, #0]
 8006c3c:	6813      	ldr	r3, [r2, #0]
 8006c3e:	0605      	lsls	r5, r0, #24
 8006c40:	f103 0104 	add.w	r1, r3, #4
 8006c44:	d52a      	bpl.n	8006c9c <_printf_i+0xa4>
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	6011      	str	r1, [r2, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	da03      	bge.n	8006c56 <_printf_i+0x5e>
 8006c4e:	222d      	movs	r2, #45	; 0x2d
 8006c50:	425b      	negs	r3, r3
 8006c52:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006c56:	486f      	ldr	r0, [pc, #444]	; (8006e14 <_printf_i+0x21c>)
 8006c58:	220a      	movs	r2, #10
 8006c5a:	e039      	b.n	8006cd0 <_printf_i+0xd8>
 8006c5c:	2973      	cmp	r1, #115	; 0x73
 8006c5e:	f000 809d 	beq.w	8006d9c <_printf_i+0x1a4>
 8006c62:	d808      	bhi.n	8006c76 <_printf_i+0x7e>
 8006c64:	296f      	cmp	r1, #111	; 0x6f
 8006c66:	d020      	beq.n	8006caa <_printf_i+0xb2>
 8006c68:	2970      	cmp	r1, #112	; 0x70
 8006c6a:	d1dd      	bne.n	8006c28 <_printf_i+0x30>
 8006c6c:	6823      	ldr	r3, [r4, #0]
 8006c6e:	f043 0320 	orr.w	r3, r3, #32
 8006c72:	6023      	str	r3, [r4, #0]
 8006c74:	e003      	b.n	8006c7e <_printf_i+0x86>
 8006c76:	2975      	cmp	r1, #117	; 0x75
 8006c78:	d017      	beq.n	8006caa <_printf_i+0xb2>
 8006c7a:	2978      	cmp	r1, #120	; 0x78
 8006c7c:	d1d4      	bne.n	8006c28 <_printf_i+0x30>
 8006c7e:	2378      	movs	r3, #120	; 0x78
 8006c80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c84:	4864      	ldr	r0, [pc, #400]	; (8006e18 <_printf_i+0x220>)
 8006c86:	e055      	b.n	8006d34 <_printf_i+0x13c>
 8006c88:	6813      	ldr	r3, [r2, #0]
 8006c8a:	1d19      	adds	r1, r3, #4
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	6011      	str	r1, [r2, #0]
 8006c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e08c      	b.n	8006db6 <_printf_i+0x1be>
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	6011      	str	r1, [r2, #0]
 8006ca0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ca4:	bf18      	it	ne
 8006ca6:	b21b      	sxthne	r3, r3
 8006ca8:	e7cf      	b.n	8006c4a <_printf_i+0x52>
 8006caa:	6813      	ldr	r3, [r2, #0]
 8006cac:	6825      	ldr	r5, [r4, #0]
 8006cae:	1d18      	adds	r0, r3, #4
 8006cb0:	6010      	str	r0, [r2, #0]
 8006cb2:	0628      	lsls	r0, r5, #24
 8006cb4:	d501      	bpl.n	8006cba <_printf_i+0xc2>
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	e002      	b.n	8006cc0 <_printf_i+0xc8>
 8006cba:	0668      	lsls	r0, r5, #25
 8006cbc:	d5fb      	bpl.n	8006cb6 <_printf_i+0xbe>
 8006cbe:	881b      	ldrh	r3, [r3, #0]
 8006cc0:	4854      	ldr	r0, [pc, #336]	; (8006e14 <_printf_i+0x21c>)
 8006cc2:	296f      	cmp	r1, #111	; 0x6f
 8006cc4:	bf14      	ite	ne
 8006cc6:	220a      	movne	r2, #10
 8006cc8:	2208      	moveq	r2, #8
 8006cca:	2100      	movs	r1, #0
 8006ccc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cd0:	6865      	ldr	r5, [r4, #4]
 8006cd2:	60a5      	str	r5, [r4, #8]
 8006cd4:	2d00      	cmp	r5, #0
 8006cd6:	f2c0 8095 	blt.w	8006e04 <_printf_i+0x20c>
 8006cda:	6821      	ldr	r1, [r4, #0]
 8006cdc:	f021 0104 	bic.w	r1, r1, #4
 8006ce0:	6021      	str	r1, [r4, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d13d      	bne.n	8006d62 <_printf_i+0x16a>
 8006ce6:	2d00      	cmp	r5, #0
 8006ce8:	f040 808e 	bne.w	8006e08 <_printf_i+0x210>
 8006cec:	4665      	mov	r5, ip
 8006cee:	2a08      	cmp	r2, #8
 8006cf0:	d10b      	bne.n	8006d0a <_printf_i+0x112>
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	07db      	lsls	r3, r3, #31
 8006cf6:	d508      	bpl.n	8006d0a <_printf_i+0x112>
 8006cf8:	6923      	ldr	r3, [r4, #16]
 8006cfa:	6862      	ldr	r2, [r4, #4]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	bfde      	ittt	le
 8006d00:	2330      	movle	r3, #48	; 0x30
 8006d02:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d06:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d0a:	ebac 0305 	sub.w	r3, ip, r5
 8006d0e:	6123      	str	r3, [r4, #16]
 8006d10:	f8cd 8000 	str.w	r8, [sp]
 8006d14:	463b      	mov	r3, r7
 8006d16:	aa03      	add	r2, sp, #12
 8006d18:	4621      	mov	r1, r4
 8006d1a:	4630      	mov	r0, r6
 8006d1c:	f7ff fef6 	bl	8006b0c <_printf_common>
 8006d20:	3001      	adds	r0, #1
 8006d22:	d14d      	bne.n	8006dc0 <_printf_i+0x1c8>
 8006d24:	f04f 30ff 	mov.w	r0, #4294967295
 8006d28:	b005      	add	sp, #20
 8006d2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d2e:	4839      	ldr	r0, [pc, #228]	; (8006e14 <_printf_i+0x21c>)
 8006d30:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006d34:	6813      	ldr	r3, [r2, #0]
 8006d36:	6821      	ldr	r1, [r4, #0]
 8006d38:	1d1d      	adds	r5, r3, #4
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6015      	str	r5, [r2, #0]
 8006d3e:	060a      	lsls	r2, r1, #24
 8006d40:	d50b      	bpl.n	8006d5a <_printf_i+0x162>
 8006d42:	07ca      	lsls	r2, r1, #31
 8006d44:	bf44      	itt	mi
 8006d46:	f041 0120 	orrmi.w	r1, r1, #32
 8006d4a:	6021      	strmi	r1, [r4, #0]
 8006d4c:	b91b      	cbnz	r3, 8006d56 <_printf_i+0x15e>
 8006d4e:	6822      	ldr	r2, [r4, #0]
 8006d50:	f022 0220 	bic.w	r2, r2, #32
 8006d54:	6022      	str	r2, [r4, #0]
 8006d56:	2210      	movs	r2, #16
 8006d58:	e7b7      	b.n	8006cca <_printf_i+0xd2>
 8006d5a:	064d      	lsls	r5, r1, #25
 8006d5c:	bf48      	it	mi
 8006d5e:	b29b      	uxthmi	r3, r3
 8006d60:	e7ef      	b.n	8006d42 <_printf_i+0x14a>
 8006d62:	4665      	mov	r5, ip
 8006d64:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d68:	fb02 3311 	mls	r3, r2, r1, r3
 8006d6c:	5cc3      	ldrb	r3, [r0, r3]
 8006d6e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006d72:	460b      	mov	r3, r1
 8006d74:	2900      	cmp	r1, #0
 8006d76:	d1f5      	bne.n	8006d64 <_printf_i+0x16c>
 8006d78:	e7b9      	b.n	8006cee <_printf_i+0xf6>
 8006d7a:	6813      	ldr	r3, [r2, #0]
 8006d7c:	6825      	ldr	r5, [r4, #0]
 8006d7e:	6961      	ldr	r1, [r4, #20]
 8006d80:	1d18      	adds	r0, r3, #4
 8006d82:	6010      	str	r0, [r2, #0]
 8006d84:	0628      	lsls	r0, r5, #24
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	d501      	bpl.n	8006d8e <_printf_i+0x196>
 8006d8a:	6019      	str	r1, [r3, #0]
 8006d8c:	e002      	b.n	8006d94 <_printf_i+0x19c>
 8006d8e:	066a      	lsls	r2, r5, #25
 8006d90:	d5fb      	bpl.n	8006d8a <_printf_i+0x192>
 8006d92:	8019      	strh	r1, [r3, #0]
 8006d94:	2300      	movs	r3, #0
 8006d96:	6123      	str	r3, [r4, #16]
 8006d98:	4665      	mov	r5, ip
 8006d9a:	e7b9      	b.n	8006d10 <_printf_i+0x118>
 8006d9c:	6813      	ldr	r3, [r2, #0]
 8006d9e:	1d19      	adds	r1, r3, #4
 8006da0:	6011      	str	r1, [r2, #0]
 8006da2:	681d      	ldr	r5, [r3, #0]
 8006da4:	6862      	ldr	r2, [r4, #4]
 8006da6:	2100      	movs	r1, #0
 8006da8:	4628      	mov	r0, r5
 8006daa:	f7f9 fa29 	bl	8000200 <memchr>
 8006dae:	b108      	cbz	r0, 8006db4 <_printf_i+0x1bc>
 8006db0:	1b40      	subs	r0, r0, r5
 8006db2:	6060      	str	r0, [r4, #4]
 8006db4:	6863      	ldr	r3, [r4, #4]
 8006db6:	6123      	str	r3, [r4, #16]
 8006db8:	2300      	movs	r3, #0
 8006dba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dbe:	e7a7      	b.n	8006d10 <_printf_i+0x118>
 8006dc0:	6923      	ldr	r3, [r4, #16]
 8006dc2:	462a      	mov	r2, r5
 8006dc4:	4639      	mov	r1, r7
 8006dc6:	4630      	mov	r0, r6
 8006dc8:	47c0      	blx	r8
 8006dca:	3001      	adds	r0, #1
 8006dcc:	d0aa      	beq.n	8006d24 <_printf_i+0x12c>
 8006dce:	6823      	ldr	r3, [r4, #0]
 8006dd0:	079b      	lsls	r3, r3, #30
 8006dd2:	d413      	bmi.n	8006dfc <_printf_i+0x204>
 8006dd4:	68e0      	ldr	r0, [r4, #12]
 8006dd6:	9b03      	ldr	r3, [sp, #12]
 8006dd8:	4298      	cmp	r0, r3
 8006dda:	bfb8      	it	lt
 8006ddc:	4618      	movlt	r0, r3
 8006dde:	e7a3      	b.n	8006d28 <_printf_i+0x130>
 8006de0:	2301      	movs	r3, #1
 8006de2:	464a      	mov	r2, r9
 8006de4:	4639      	mov	r1, r7
 8006de6:	4630      	mov	r0, r6
 8006de8:	47c0      	blx	r8
 8006dea:	3001      	adds	r0, #1
 8006dec:	d09a      	beq.n	8006d24 <_printf_i+0x12c>
 8006dee:	3501      	adds	r5, #1
 8006df0:	68e3      	ldr	r3, [r4, #12]
 8006df2:	9a03      	ldr	r2, [sp, #12]
 8006df4:	1a9b      	subs	r3, r3, r2
 8006df6:	42ab      	cmp	r3, r5
 8006df8:	dcf2      	bgt.n	8006de0 <_printf_i+0x1e8>
 8006dfa:	e7eb      	b.n	8006dd4 <_printf_i+0x1dc>
 8006dfc:	2500      	movs	r5, #0
 8006dfe:	f104 0919 	add.w	r9, r4, #25
 8006e02:	e7f5      	b.n	8006df0 <_printf_i+0x1f8>
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1ac      	bne.n	8006d62 <_printf_i+0x16a>
 8006e08:	7803      	ldrb	r3, [r0, #0]
 8006e0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e12:	e76c      	b.n	8006cee <_printf_i+0xf6>
 8006e14:	08008f46 	.word	0x08008f46
 8006e18:	08008f57 	.word	0x08008f57

08006e1c <siprintf>:
 8006e1c:	b40e      	push	{r1, r2, r3}
 8006e1e:	b500      	push	{lr}
 8006e20:	b09c      	sub	sp, #112	; 0x70
 8006e22:	ab1d      	add	r3, sp, #116	; 0x74
 8006e24:	9002      	str	r0, [sp, #8]
 8006e26:	9006      	str	r0, [sp, #24]
 8006e28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e2c:	4809      	ldr	r0, [pc, #36]	; (8006e54 <siprintf+0x38>)
 8006e2e:	9107      	str	r1, [sp, #28]
 8006e30:	9104      	str	r1, [sp, #16]
 8006e32:	4909      	ldr	r1, [pc, #36]	; (8006e58 <siprintf+0x3c>)
 8006e34:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e38:	9105      	str	r1, [sp, #20]
 8006e3a:	6800      	ldr	r0, [r0, #0]
 8006e3c:	9301      	str	r3, [sp, #4]
 8006e3e:	a902      	add	r1, sp, #8
 8006e40:	f001 fa64 	bl	800830c <_svfiprintf_r>
 8006e44:	9b02      	ldr	r3, [sp, #8]
 8006e46:	2200      	movs	r2, #0
 8006e48:	701a      	strb	r2, [r3, #0]
 8006e4a:	b01c      	add	sp, #112	; 0x70
 8006e4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e50:	b003      	add	sp, #12
 8006e52:	4770      	bx	lr
 8006e54:	20000018 	.word	0x20000018
 8006e58:	ffff0208 	.word	0xffff0208

08006e5c <strcat>:
 8006e5c:	b510      	push	{r4, lr}
 8006e5e:	4603      	mov	r3, r0
 8006e60:	781a      	ldrb	r2, [r3, #0]
 8006e62:	1c5c      	adds	r4, r3, #1
 8006e64:	b93a      	cbnz	r2, 8006e76 <strcat+0x1a>
 8006e66:	3b01      	subs	r3, #1
 8006e68:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e6c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e70:	2a00      	cmp	r2, #0
 8006e72:	d1f9      	bne.n	8006e68 <strcat+0xc>
 8006e74:	bd10      	pop	{r4, pc}
 8006e76:	4623      	mov	r3, r4
 8006e78:	e7f2      	b.n	8006e60 <strcat+0x4>

08006e7a <quorem>:
 8006e7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e7e:	6903      	ldr	r3, [r0, #16]
 8006e80:	690c      	ldr	r4, [r1, #16]
 8006e82:	42a3      	cmp	r3, r4
 8006e84:	4680      	mov	r8, r0
 8006e86:	f2c0 8082 	blt.w	8006f8e <quorem+0x114>
 8006e8a:	3c01      	subs	r4, #1
 8006e8c:	f101 0714 	add.w	r7, r1, #20
 8006e90:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006e94:	f100 0614 	add.w	r6, r0, #20
 8006e98:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006e9c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006ea0:	eb06 030c 	add.w	r3, r6, ip
 8006ea4:	3501      	adds	r5, #1
 8006ea6:	eb07 090c 	add.w	r9, r7, ip
 8006eaa:	9301      	str	r3, [sp, #4]
 8006eac:	fbb0 f5f5 	udiv	r5, r0, r5
 8006eb0:	b395      	cbz	r5, 8006f18 <quorem+0x9e>
 8006eb2:	f04f 0a00 	mov.w	sl, #0
 8006eb6:	4638      	mov	r0, r7
 8006eb8:	46b6      	mov	lr, r6
 8006eba:	46d3      	mov	fp, sl
 8006ebc:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ec0:	b293      	uxth	r3, r2
 8006ec2:	fb05 a303 	mla	r3, r5, r3, sl
 8006ec6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	ebab 0303 	sub.w	r3, fp, r3
 8006ed0:	0c12      	lsrs	r2, r2, #16
 8006ed2:	f8de b000 	ldr.w	fp, [lr]
 8006ed6:	fb05 a202 	mla	r2, r5, r2, sl
 8006eda:	fa13 f38b 	uxtah	r3, r3, fp
 8006ede:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006ee2:	fa1f fb82 	uxth.w	fp, r2
 8006ee6:	f8de 2000 	ldr.w	r2, [lr]
 8006eea:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006eee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ef8:	4581      	cmp	r9, r0
 8006efa:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006efe:	f84e 3b04 	str.w	r3, [lr], #4
 8006f02:	d2db      	bcs.n	8006ebc <quorem+0x42>
 8006f04:	f856 300c 	ldr.w	r3, [r6, ip]
 8006f08:	b933      	cbnz	r3, 8006f18 <quorem+0x9e>
 8006f0a:	9b01      	ldr	r3, [sp, #4]
 8006f0c:	3b04      	subs	r3, #4
 8006f0e:	429e      	cmp	r6, r3
 8006f10:	461a      	mov	r2, r3
 8006f12:	d330      	bcc.n	8006f76 <quorem+0xfc>
 8006f14:	f8c8 4010 	str.w	r4, [r8, #16]
 8006f18:	4640      	mov	r0, r8
 8006f1a:	f001 f821 	bl	8007f60 <__mcmp>
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	db25      	blt.n	8006f6e <quorem+0xf4>
 8006f22:	3501      	adds	r5, #1
 8006f24:	4630      	mov	r0, r6
 8006f26:	f04f 0c00 	mov.w	ip, #0
 8006f2a:	f857 2b04 	ldr.w	r2, [r7], #4
 8006f2e:	f8d0 e000 	ldr.w	lr, [r0]
 8006f32:	b293      	uxth	r3, r2
 8006f34:	ebac 0303 	sub.w	r3, ip, r3
 8006f38:	0c12      	lsrs	r2, r2, #16
 8006f3a:	fa13 f38e 	uxtah	r3, r3, lr
 8006f3e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f42:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f4c:	45b9      	cmp	r9, r7
 8006f4e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f52:	f840 3b04 	str.w	r3, [r0], #4
 8006f56:	d2e8      	bcs.n	8006f2a <quorem+0xb0>
 8006f58:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006f5c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006f60:	b92a      	cbnz	r2, 8006f6e <quorem+0xf4>
 8006f62:	3b04      	subs	r3, #4
 8006f64:	429e      	cmp	r6, r3
 8006f66:	461a      	mov	r2, r3
 8006f68:	d30b      	bcc.n	8006f82 <quorem+0x108>
 8006f6a:	f8c8 4010 	str.w	r4, [r8, #16]
 8006f6e:	4628      	mov	r0, r5
 8006f70:	b003      	add	sp, #12
 8006f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f76:	6812      	ldr	r2, [r2, #0]
 8006f78:	3b04      	subs	r3, #4
 8006f7a:	2a00      	cmp	r2, #0
 8006f7c:	d1ca      	bne.n	8006f14 <quorem+0x9a>
 8006f7e:	3c01      	subs	r4, #1
 8006f80:	e7c5      	b.n	8006f0e <quorem+0x94>
 8006f82:	6812      	ldr	r2, [r2, #0]
 8006f84:	3b04      	subs	r3, #4
 8006f86:	2a00      	cmp	r2, #0
 8006f88:	d1ef      	bne.n	8006f6a <quorem+0xf0>
 8006f8a:	3c01      	subs	r4, #1
 8006f8c:	e7ea      	b.n	8006f64 <quorem+0xea>
 8006f8e:	2000      	movs	r0, #0
 8006f90:	e7ee      	b.n	8006f70 <quorem+0xf6>
 8006f92:	0000      	movs	r0, r0
 8006f94:	0000      	movs	r0, r0
	...

08006f98 <_dtoa_r>:
 8006f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f9c:	ec57 6b10 	vmov	r6, r7, d0
 8006fa0:	b097      	sub	sp, #92	; 0x5c
 8006fa2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006fa4:	9106      	str	r1, [sp, #24]
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	920b      	str	r2, [sp, #44]	; 0x2c
 8006faa:	9312      	str	r3, [sp, #72]	; 0x48
 8006fac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006fb0:	e9cd 6700 	strd	r6, r7, [sp]
 8006fb4:	b93d      	cbnz	r5, 8006fc6 <_dtoa_r+0x2e>
 8006fb6:	2010      	movs	r0, #16
 8006fb8:	f000 fdb4 	bl	8007b24 <malloc>
 8006fbc:	6260      	str	r0, [r4, #36]	; 0x24
 8006fbe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006fc2:	6005      	str	r5, [r0, #0]
 8006fc4:	60c5      	str	r5, [r0, #12]
 8006fc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fc8:	6819      	ldr	r1, [r3, #0]
 8006fca:	b151      	cbz	r1, 8006fe2 <_dtoa_r+0x4a>
 8006fcc:	685a      	ldr	r2, [r3, #4]
 8006fce:	604a      	str	r2, [r1, #4]
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	4093      	lsls	r3, r2
 8006fd4:	608b      	str	r3, [r1, #8]
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	f000 fde0 	bl	8007b9c <_Bfree>
 8006fdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fde:	2200      	movs	r2, #0
 8006fe0:	601a      	str	r2, [r3, #0]
 8006fe2:	1e3b      	subs	r3, r7, #0
 8006fe4:	bfbb      	ittet	lt
 8006fe6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006fea:	9301      	strlt	r3, [sp, #4]
 8006fec:	2300      	movge	r3, #0
 8006fee:	2201      	movlt	r2, #1
 8006ff0:	bfac      	ite	ge
 8006ff2:	f8c8 3000 	strge.w	r3, [r8]
 8006ff6:	f8c8 2000 	strlt.w	r2, [r8]
 8006ffa:	4baf      	ldr	r3, [pc, #700]	; (80072b8 <_dtoa_r+0x320>)
 8006ffc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007000:	ea33 0308 	bics.w	r3, r3, r8
 8007004:	d114      	bne.n	8007030 <_dtoa_r+0x98>
 8007006:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007008:	f242 730f 	movw	r3, #9999	; 0x270f
 800700c:	6013      	str	r3, [r2, #0]
 800700e:	9b00      	ldr	r3, [sp, #0]
 8007010:	b923      	cbnz	r3, 800701c <_dtoa_r+0x84>
 8007012:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007016:	2800      	cmp	r0, #0
 8007018:	f000 8542 	beq.w	8007aa0 <_dtoa_r+0xb08>
 800701c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800701e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80072cc <_dtoa_r+0x334>
 8007022:	2b00      	cmp	r3, #0
 8007024:	f000 8544 	beq.w	8007ab0 <_dtoa_r+0xb18>
 8007028:	f10b 0303 	add.w	r3, fp, #3
 800702c:	f000 bd3e 	b.w	8007aac <_dtoa_r+0xb14>
 8007030:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007034:	2200      	movs	r2, #0
 8007036:	2300      	movs	r3, #0
 8007038:	4630      	mov	r0, r6
 800703a:	4639      	mov	r1, r7
 800703c:	f7f9 fd54 	bl	8000ae8 <__aeabi_dcmpeq>
 8007040:	4681      	mov	r9, r0
 8007042:	b168      	cbz	r0, 8007060 <_dtoa_r+0xc8>
 8007044:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007046:	2301      	movs	r3, #1
 8007048:	6013      	str	r3, [r2, #0]
 800704a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800704c:	2b00      	cmp	r3, #0
 800704e:	f000 8524 	beq.w	8007a9a <_dtoa_r+0xb02>
 8007052:	4b9a      	ldr	r3, [pc, #616]	; (80072bc <_dtoa_r+0x324>)
 8007054:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007056:	f103 3bff 	add.w	fp, r3, #4294967295
 800705a:	6013      	str	r3, [r2, #0]
 800705c:	f000 bd28 	b.w	8007ab0 <_dtoa_r+0xb18>
 8007060:	aa14      	add	r2, sp, #80	; 0x50
 8007062:	a915      	add	r1, sp, #84	; 0x54
 8007064:	ec47 6b10 	vmov	d0, r6, r7
 8007068:	4620      	mov	r0, r4
 800706a:	f000 fff0 	bl	800804e <__d2b>
 800706e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007072:	9004      	str	r0, [sp, #16]
 8007074:	2d00      	cmp	r5, #0
 8007076:	d07c      	beq.n	8007172 <_dtoa_r+0x1da>
 8007078:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800707c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007080:	46b2      	mov	sl, r6
 8007082:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007086:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800708a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800708e:	2200      	movs	r2, #0
 8007090:	4b8b      	ldr	r3, [pc, #556]	; (80072c0 <_dtoa_r+0x328>)
 8007092:	4650      	mov	r0, sl
 8007094:	4659      	mov	r1, fp
 8007096:	f7f9 f907 	bl	80002a8 <__aeabi_dsub>
 800709a:	a381      	add	r3, pc, #516	; (adr r3, 80072a0 <_dtoa_r+0x308>)
 800709c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a0:	f7f9 faba 	bl	8000618 <__aeabi_dmul>
 80070a4:	a380      	add	r3, pc, #512	; (adr r3, 80072a8 <_dtoa_r+0x310>)
 80070a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070aa:	f7f9 f8ff 	bl	80002ac <__adddf3>
 80070ae:	4606      	mov	r6, r0
 80070b0:	4628      	mov	r0, r5
 80070b2:	460f      	mov	r7, r1
 80070b4:	f7f9 fa46 	bl	8000544 <__aeabi_i2d>
 80070b8:	a37d      	add	r3, pc, #500	; (adr r3, 80072b0 <_dtoa_r+0x318>)
 80070ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070be:	f7f9 faab 	bl	8000618 <__aeabi_dmul>
 80070c2:	4602      	mov	r2, r0
 80070c4:	460b      	mov	r3, r1
 80070c6:	4630      	mov	r0, r6
 80070c8:	4639      	mov	r1, r7
 80070ca:	f7f9 f8ef 	bl	80002ac <__adddf3>
 80070ce:	4606      	mov	r6, r0
 80070d0:	460f      	mov	r7, r1
 80070d2:	f7f9 fd51 	bl	8000b78 <__aeabi_d2iz>
 80070d6:	2200      	movs	r2, #0
 80070d8:	4682      	mov	sl, r0
 80070da:	2300      	movs	r3, #0
 80070dc:	4630      	mov	r0, r6
 80070de:	4639      	mov	r1, r7
 80070e0:	f7f9 fd0c 	bl	8000afc <__aeabi_dcmplt>
 80070e4:	b148      	cbz	r0, 80070fa <_dtoa_r+0x162>
 80070e6:	4650      	mov	r0, sl
 80070e8:	f7f9 fa2c 	bl	8000544 <__aeabi_i2d>
 80070ec:	4632      	mov	r2, r6
 80070ee:	463b      	mov	r3, r7
 80070f0:	f7f9 fcfa 	bl	8000ae8 <__aeabi_dcmpeq>
 80070f4:	b908      	cbnz	r0, 80070fa <_dtoa_r+0x162>
 80070f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070fa:	f1ba 0f16 	cmp.w	sl, #22
 80070fe:	d859      	bhi.n	80071b4 <_dtoa_r+0x21c>
 8007100:	4970      	ldr	r1, [pc, #448]	; (80072c4 <_dtoa_r+0x32c>)
 8007102:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007106:	e9dd 2300 	ldrd	r2, r3, [sp]
 800710a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800710e:	f7f9 fd13 	bl	8000b38 <__aeabi_dcmpgt>
 8007112:	2800      	cmp	r0, #0
 8007114:	d050      	beq.n	80071b8 <_dtoa_r+0x220>
 8007116:	f10a 3aff 	add.w	sl, sl, #4294967295
 800711a:	2300      	movs	r3, #0
 800711c:	930f      	str	r3, [sp, #60]	; 0x3c
 800711e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007120:	1b5d      	subs	r5, r3, r5
 8007122:	f1b5 0801 	subs.w	r8, r5, #1
 8007126:	bf49      	itett	mi
 8007128:	f1c5 0301 	rsbmi	r3, r5, #1
 800712c:	2300      	movpl	r3, #0
 800712e:	9305      	strmi	r3, [sp, #20]
 8007130:	f04f 0800 	movmi.w	r8, #0
 8007134:	bf58      	it	pl
 8007136:	9305      	strpl	r3, [sp, #20]
 8007138:	f1ba 0f00 	cmp.w	sl, #0
 800713c:	db3e      	blt.n	80071bc <_dtoa_r+0x224>
 800713e:	2300      	movs	r3, #0
 8007140:	44d0      	add	r8, sl
 8007142:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007146:	9307      	str	r3, [sp, #28]
 8007148:	9b06      	ldr	r3, [sp, #24]
 800714a:	2b09      	cmp	r3, #9
 800714c:	f200 8090 	bhi.w	8007270 <_dtoa_r+0x2d8>
 8007150:	2b05      	cmp	r3, #5
 8007152:	bfc4      	itt	gt
 8007154:	3b04      	subgt	r3, #4
 8007156:	9306      	strgt	r3, [sp, #24]
 8007158:	9b06      	ldr	r3, [sp, #24]
 800715a:	f1a3 0302 	sub.w	r3, r3, #2
 800715e:	bfcc      	ite	gt
 8007160:	2500      	movgt	r5, #0
 8007162:	2501      	movle	r5, #1
 8007164:	2b03      	cmp	r3, #3
 8007166:	f200 808f 	bhi.w	8007288 <_dtoa_r+0x2f0>
 800716a:	e8df f003 	tbb	[pc, r3]
 800716e:	7f7d      	.short	0x7f7d
 8007170:	7131      	.short	0x7131
 8007172:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007176:	441d      	add	r5, r3
 8007178:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800717c:	2820      	cmp	r0, #32
 800717e:	dd13      	ble.n	80071a8 <_dtoa_r+0x210>
 8007180:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007184:	9b00      	ldr	r3, [sp, #0]
 8007186:	fa08 f800 	lsl.w	r8, r8, r0
 800718a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800718e:	fa23 f000 	lsr.w	r0, r3, r0
 8007192:	ea48 0000 	orr.w	r0, r8, r0
 8007196:	f7f9 f9c5 	bl	8000524 <__aeabi_ui2d>
 800719a:	2301      	movs	r3, #1
 800719c:	4682      	mov	sl, r0
 800719e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80071a2:	3d01      	subs	r5, #1
 80071a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80071a6:	e772      	b.n	800708e <_dtoa_r+0xf6>
 80071a8:	9b00      	ldr	r3, [sp, #0]
 80071aa:	f1c0 0020 	rsb	r0, r0, #32
 80071ae:	fa03 f000 	lsl.w	r0, r3, r0
 80071b2:	e7f0      	b.n	8007196 <_dtoa_r+0x1fe>
 80071b4:	2301      	movs	r3, #1
 80071b6:	e7b1      	b.n	800711c <_dtoa_r+0x184>
 80071b8:	900f      	str	r0, [sp, #60]	; 0x3c
 80071ba:	e7b0      	b.n	800711e <_dtoa_r+0x186>
 80071bc:	9b05      	ldr	r3, [sp, #20]
 80071be:	eba3 030a 	sub.w	r3, r3, sl
 80071c2:	9305      	str	r3, [sp, #20]
 80071c4:	f1ca 0300 	rsb	r3, sl, #0
 80071c8:	9307      	str	r3, [sp, #28]
 80071ca:	2300      	movs	r3, #0
 80071cc:	930e      	str	r3, [sp, #56]	; 0x38
 80071ce:	e7bb      	b.n	8007148 <_dtoa_r+0x1b0>
 80071d0:	2301      	movs	r3, #1
 80071d2:	930a      	str	r3, [sp, #40]	; 0x28
 80071d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	dd59      	ble.n	800728e <_dtoa_r+0x2f6>
 80071da:	9302      	str	r3, [sp, #8]
 80071dc:	4699      	mov	r9, r3
 80071de:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80071e0:	2200      	movs	r2, #0
 80071e2:	6072      	str	r2, [r6, #4]
 80071e4:	2204      	movs	r2, #4
 80071e6:	f102 0014 	add.w	r0, r2, #20
 80071ea:	4298      	cmp	r0, r3
 80071ec:	6871      	ldr	r1, [r6, #4]
 80071ee:	d953      	bls.n	8007298 <_dtoa_r+0x300>
 80071f0:	4620      	mov	r0, r4
 80071f2:	f000 fc9f 	bl	8007b34 <_Balloc>
 80071f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071f8:	6030      	str	r0, [r6, #0]
 80071fa:	f1b9 0f0e 	cmp.w	r9, #14
 80071fe:	f8d3 b000 	ldr.w	fp, [r3]
 8007202:	f200 80e6 	bhi.w	80073d2 <_dtoa_r+0x43a>
 8007206:	2d00      	cmp	r5, #0
 8007208:	f000 80e3 	beq.w	80073d2 <_dtoa_r+0x43a>
 800720c:	ed9d 7b00 	vldr	d7, [sp]
 8007210:	f1ba 0f00 	cmp.w	sl, #0
 8007214:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007218:	dd74      	ble.n	8007304 <_dtoa_r+0x36c>
 800721a:	4a2a      	ldr	r2, [pc, #168]	; (80072c4 <_dtoa_r+0x32c>)
 800721c:	f00a 030f 	and.w	r3, sl, #15
 8007220:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007224:	ed93 7b00 	vldr	d7, [r3]
 8007228:	ea4f 162a 	mov.w	r6, sl, asr #4
 800722c:	06f0      	lsls	r0, r6, #27
 800722e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007232:	d565      	bpl.n	8007300 <_dtoa_r+0x368>
 8007234:	4b24      	ldr	r3, [pc, #144]	; (80072c8 <_dtoa_r+0x330>)
 8007236:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800723a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800723e:	f7f9 fb15 	bl	800086c <__aeabi_ddiv>
 8007242:	e9cd 0100 	strd	r0, r1, [sp]
 8007246:	f006 060f 	and.w	r6, r6, #15
 800724a:	2503      	movs	r5, #3
 800724c:	4f1e      	ldr	r7, [pc, #120]	; (80072c8 <_dtoa_r+0x330>)
 800724e:	e04c      	b.n	80072ea <_dtoa_r+0x352>
 8007250:	2301      	movs	r3, #1
 8007252:	930a      	str	r3, [sp, #40]	; 0x28
 8007254:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007256:	4453      	add	r3, sl
 8007258:	f103 0901 	add.w	r9, r3, #1
 800725c:	9302      	str	r3, [sp, #8]
 800725e:	464b      	mov	r3, r9
 8007260:	2b01      	cmp	r3, #1
 8007262:	bfb8      	it	lt
 8007264:	2301      	movlt	r3, #1
 8007266:	e7ba      	b.n	80071de <_dtoa_r+0x246>
 8007268:	2300      	movs	r3, #0
 800726a:	e7b2      	b.n	80071d2 <_dtoa_r+0x23a>
 800726c:	2300      	movs	r3, #0
 800726e:	e7f0      	b.n	8007252 <_dtoa_r+0x2ba>
 8007270:	2501      	movs	r5, #1
 8007272:	2300      	movs	r3, #0
 8007274:	9306      	str	r3, [sp, #24]
 8007276:	950a      	str	r5, [sp, #40]	; 0x28
 8007278:	f04f 33ff 	mov.w	r3, #4294967295
 800727c:	9302      	str	r3, [sp, #8]
 800727e:	4699      	mov	r9, r3
 8007280:	2200      	movs	r2, #0
 8007282:	2312      	movs	r3, #18
 8007284:	920b      	str	r2, [sp, #44]	; 0x2c
 8007286:	e7aa      	b.n	80071de <_dtoa_r+0x246>
 8007288:	2301      	movs	r3, #1
 800728a:	930a      	str	r3, [sp, #40]	; 0x28
 800728c:	e7f4      	b.n	8007278 <_dtoa_r+0x2e0>
 800728e:	2301      	movs	r3, #1
 8007290:	9302      	str	r3, [sp, #8]
 8007292:	4699      	mov	r9, r3
 8007294:	461a      	mov	r2, r3
 8007296:	e7f5      	b.n	8007284 <_dtoa_r+0x2ec>
 8007298:	3101      	adds	r1, #1
 800729a:	6071      	str	r1, [r6, #4]
 800729c:	0052      	lsls	r2, r2, #1
 800729e:	e7a2      	b.n	80071e6 <_dtoa_r+0x24e>
 80072a0:	636f4361 	.word	0x636f4361
 80072a4:	3fd287a7 	.word	0x3fd287a7
 80072a8:	8b60c8b3 	.word	0x8b60c8b3
 80072ac:	3fc68a28 	.word	0x3fc68a28
 80072b0:	509f79fb 	.word	0x509f79fb
 80072b4:	3fd34413 	.word	0x3fd34413
 80072b8:	7ff00000 	.word	0x7ff00000
 80072bc:	08008f45 	.word	0x08008f45
 80072c0:	3ff80000 	.word	0x3ff80000
 80072c4:	08008fa0 	.word	0x08008fa0
 80072c8:	08008f78 	.word	0x08008f78
 80072cc:	08008f71 	.word	0x08008f71
 80072d0:	07f1      	lsls	r1, r6, #31
 80072d2:	d508      	bpl.n	80072e6 <_dtoa_r+0x34e>
 80072d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80072d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072dc:	f7f9 f99c 	bl	8000618 <__aeabi_dmul>
 80072e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80072e4:	3501      	adds	r5, #1
 80072e6:	1076      	asrs	r6, r6, #1
 80072e8:	3708      	adds	r7, #8
 80072ea:	2e00      	cmp	r6, #0
 80072ec:	d1f0      	bne.n	80072d0 <_dtoa_r+0x338>
 80072ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80072f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072f6:	f7f9 fab9 	bl	800086c <__aeabi_ddiv>
 80072fa:	e9cd 0100 	strd	r0, r1, [sp]
 80072fe:	e01a      	b.n	8007336 <_dtoa_r+0x39e>
 8007300:	2502      	movs	r5, #2
 8007302:	e7a3      	b.n	800724c <_dtoa_r+0x2b4>
 8007304:	f000 80a0 	beq.w	8007448 <_dtoa_r+0x4b0>
 8007308:	f1ca 0600 	rsb	r6, sl, #0
 800730c:	4b9f      	ldr	r3, [pc, #636]	; (800758c <_dtoa_r+0x5f4>)
 800730e:	4fa0      	ldr	r7, [pc, #640]	; (8007590 <_dtoa_r+0x5f8>)
 8007310:	f006 020f 	and.w	r2, r6, #15
 8007314:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007320:	f7f9 f97a 	bl	8000618 <__aeabi_dmul>
 8007324:	e9cd 0100 	strd	r0, r1, [sp]
 8007328:	1136      	asrs	r6, r6, #4
 800732a:	2300      	movs	r3, #0
 800732c:	2502      	movs	r5, #2
 800732e:	2e00      	cmp	r6, #0
 8007330:	d17f      	bne.n	8007432 <_dtoa_r+0x49a>
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1e1      	bne.n	80072fa <_dtoa_r+0x362>
 8007336:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 8087 	beq.w	800744c <_dtoa_r+0x4b4>
 800733e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007342:	2200      	movs	r2, #0
 8007344:	4b93      	ldr	r3, [pc, #588]	; (8007594 <_dtoa_r+0x5fc>)
 8007346:	4630      	mov	r0, r6
 8007348:	4639      	mov	r1, r7
 800734a:	f7f9 fbd7 	bl	8000afc <__aeabi_dcmplt>
 800734e:	2800      	cmp	r0, #0
 8007350:	d07c      	beq.n	800744c <_dtoa_r+0x4b4>
 8007352:	f1b9 0f00 	cmp.w	r9, #0
 8007356:	d079      	beq.n	800744c <_dtoa_r+0x4b4>
 8007358:	9b02      	ldr	r3, [sp, #8]
 800735a:	2b00      	cmp	r3, #0
 800735c:	dd35      	ble.n	80073ca <_dtoa_r+0x432>
 800735e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007362:	9308      	str	r3, [sp, #32]
 8007364:	4639      	mov	r1, r7
 8007366:	2200      	movs	r2, #0
 8007368:	4b8b      	ldr	r3, [pc, #556]	; (8007598 <_dtoa_r+0x600>)
 800736a:	4630      	mov	r0, r6
 800736c:	f7f9 f954 	bl	8000618 <__aeabi_dmul>
 8007370:	e9cd 0100 	strd	r0, r1, [sp]
 8007374:	9f02      	ldr	r7, [sp, #8]
 8007376:	3501      	adds	r5, #1
 8007378:	4628      	mov	r0, r5
 800737a:	f7f9 f8e3 	bl	8000544 <__aeabi_i2d>
 800737e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007382:	f7f9 f949 	bl	8000618 <__aeabi_dmul>
 8007386:	2200      	movs	r2, #0
 8007388:	4b84      	ldr	r3, [pc, #528]	; (800759c <_dtoa_r+0x604>)
 800738a:	f7f8 ff8f 	bl	80002ac <__adddf3>
 800738e:	4605      	mov	r5, r0
 8007390:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007394:	2f00      	cmp	r7, #0
 8007396:	d15d      	bne.n	8007454 <_dtoa_r+0x4bc>
 8007398:	2200      	movs	r2, #0
 800739a:	4b81      	ldr	r3, [pc, #516]	; (80075a0 <_dtoa_r+0x608>)
 800739c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073a0:	f7f8 ff82 	bl	80002a8 <__aeabi_dsub>
 80073a4:	462a      	mov	r2, r5
 80073a6:	4633      	mov	r3, r6
 80073a8:	e9cd 0100 	strd	r0, r1, [sp]
 80073ac:	f7f9 fbc4 	bl	8000b38 <__aeabi_dcmpgt>
 80073b0:	2800      	cmp	r0, #0
 80073b2:	f040 8288 	bne.w	80078c6 <_dtoa_r+0x92e>
 80073b6:	462a      	mov	r2, r5
 80073b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80073bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073c0:	f7f9 fb9c 	bl	8000afc <__aeabi_dcmplt>
 80073c4:	2800      	cmp	r0, #0
 80073c6:	f040 827c 	bne.w	80078c2 <_dtoa_r+0x92a>
 80073ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80073ce:	e9cd 2300 	strd	r2, r3, [sp]
 80073d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f2c0 8150 	blt.w	800767a <_dtoa_r+0x6e2>
 80073da:	f1ba 0f0e 	cmp.w	sl, #14
 80073de:	f300 814c 	bgt.w	800767a <_dtoa_r+0x6e2>
 80073e2:	4b6a      	ldr	r3, [pc, #424]	; (800758c <_dtoa_r+0x5f4>)
 80073e4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80073e8:	ed93 7b00 	vldr	d7, [r3]
 80073ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80073f4:	f280 80d8 	bge.w	80075a8 <_dtoa_r+0x610>
 80073f8:	f1b9 0f00 	cmp.w	r9, #0
 80073fc:	f300 80d4 	bgt.w	80075a8 <_dtoa_r+0x610>
 8007400:	f040 825e 	bne.w	80078c0 <_dtoa_r+0x928>
 8007404:	2200      	movs	r2, #0
 8007406:	4b66      	ldr	r3, [pc, #408]	; (80075a0 <_dtoa_r+0x608>)
 8007408:	ec51 0b17 	vmov	r0, r1, d7
 800740c:	f7f9 f904 	bl	8000618 <__aeabi_dmul>
 8007410:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007414:	f7f9 fb86 	bl	8000b24 <__aeabi_dcmpge>
 8007418:	464f      	mov	r7, r9
 800741a:	464e      	mov	r6, r9
 800741c:	2800      	cmp	r0, #0
 800741e:	f040 8234 	bne.w	800788a <_dtoa_r+0x8f2>
 8007422:	2331      	movs	r3, #49	; 0x31
 8007424:	f10b 0501 	add.w	r5, fp, #1
 8007428:	f88b 3000 	strb.w	r3, [fp]
 800742c:	f10a 0a01 	add.w	sl, sl, #1
 8007430:	e22f      	b.n	8007892 <_dtoa_r+0x8fa>
 8007432:	07f2      	lsls	r2, r6, #31
 8007434:	d505      	bpl.n	8007442 <_dtoa_r+0x4aa>
 8007436:	e9d7 2300 	ldrd	r2, r3, [r7]
 800743a:	f7f9 f8ed 	bl	8000618 <__aeabi_dmul>
 800743e:	3501      	adds	r5, #1
 8007440:	2301      	movs	r3, #1
 8007442:	1076      	asrs	r6, r6, #1
 8007444:	3708      	adds	r7, #8
 8007446:	e772      	b.n	800732e <_dtoa_r+0x396>
 8007448:	2502      	movs	r5, #2
 800744a:	e774      	b.n	8007336 <_dtoa_r+0x39e>
 800744c:	f8cd a020 	str.w	sl, [sp, #32]
 8007450:	464f      	mov	r7, r9
 8007452:	e791      	b.n	8007378 <_dtoa_r+0x3e0>
 8007454:	4b4d      	ldr	r3, [pc, #308]	; (800758c <_dtoa_r+0x5f4>)
 8007456:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800745a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800745e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007460:	2b00      	cmp	r3, #0
 8007462:	d047      	beq.n	80074f4 <_dtoa_r+0x55c>
 8007464:	4602      	mov	r2, r0
 8007466:	460b      	mov	r3, r1
 8007468:	2000      	movs	r0, #0
 800746a:	494e      	ldr	r1, [pc, #312]	; (80075a4 <_dtoa_r+0x60c>)
 800746c:	f7f9 f9fe 	bl	800086c <__aeabi_ddiv>
 8007470:	462a      	mov	r2, r5
 8007472:	4633      	mov	r3, r6
 8007474:	f7f8 ff18 	bl	80002a8 <__aeabi_dsub>
 8007478:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800747c:	465d      	mov	r5, fp
 800747e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007482:	f7f9 fb79 	bl	8000b78 <__aeabi_d2iz>
 8007486:	4606      	mov	r6, r0
 8007488:	f7f9 f85c 	bl	8000544 <__aeabi_i2d>
 800748c:	4602      	mov	r2, r0
 800748e:	460b      	mov	r3, r1
 8007490:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007494:	f7f8 ff08 	bl	80002a8 <__aeabi_dsub>
 8007498:	3630      	adds	r6, #48	; 0x30
 800749a:	f805 6b01 	strb.w	r6, [r5], #1
 800749e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80074a2:	e9cd 0100 	strd	r0, r1, [sp]
 80074a6:	f7f9 fb29 	bl	8000afc <__aeabi_dcmplt>
 80074aa:	2800      	cmp	r0, #0
 80074ac:	d163      	bne.n	8007576 <_dtoa_r+0x5de>
 80074ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074b2:	2000      	movs	r0, #0
 80074b4:	4937      	ldr	r1, [pc, #220]	; (8007594 <_dtoa_r+0x5fc>)
 80074b6:	f7f8 fef7 	bl	80002a8 <__aeabi_dsub>
 80074ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80074be:	f7f9 fb1d 	bl	8000afc <__aeabi_dcmplt>
 80074c2:	2800      	cmp	r0, #0
 80074c4:	f040 80b7 	bne.w	8007636 <_dtoa_r+0x69e>
 80074c8:	eba5 030b 	sub.w	r3, r5, fp
 80074cc:	429f      	cmp	r7, r3
 80074ce:	f77f af7c 	ble.w	80073ca <_dtoa_r+0x432>
 80074d2:	2200      	movs	r2, #0
 80074d4:	4b30      	ldr	r3, [pc, #192]	; (8007598 <_dtoa_r+0x600>)
 80074d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074da:	f7f9 f89d 	bl	8000618 <__aeabi_dmul>
 80074de:	2200      	movs	r2, #0
 80074e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80074e4:	4b2c      	ldr	r3, [pc, #176]	; (8007598 <_dtoa_r+0x600>)
 80074e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074ea:	f7f9 f895 	bl	8000618 <__aeabi_dmul>
 80074ee:	e9cd 0100 	strd	r0, r1, [sp]
 80074f2:	e7c4      	b.n	800747e <_dtoa_r+0x4e6>
 80074f4:	462a      	mov	r2, r5
 80074f6:	4633      	mov	r3, r6
 80074f8:	f7f9 f88e 	bl	8000618 <__aeabi_dmul>
 80074fc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007500:	eb0b 0507 	add.w	r5, fp, r7
 8007504:	465e      	mov	r6, fp
 8007506:	e9dd 0100 	ldrd	r0, r1, [sp]
 800750a:	f7f9 fb35 	bl	8000b78 <__aeabi_d2iz>
 800750e:	4607      	mov	r7, r0
 8007510:	f7f9 f818 	bl	8000544 <__aeabi_i2d>
 8007514:	3730      	adds	r7, #48	; 0x30
 8007516:	4602      	mov	r2, r0
 8007518:	460b      	mov	r3, r1
 800751a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800751e:	f7f8 fec3 	bl	80002a8 <__aeabi_dsub>
 8007522:	f806 7b01 	strb.w	r7, [r6], #1
 8007526:	42ae      	cmp	r6, r5
 8007528:	e9cd 0100 	strd	r0, r1, [sp]
 800752c:	f04f 0200 	mov.w	r2, #0
 8007530:	d126      	bne.n	8007580 <_dtoa_r+0x5e8>
 8007532:	4b1c      	ldr	r3, [pc, #112]	; (80075a4 <_dtoa_r+0x60c>)
 8007534:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007538:	f7f8 feb8 	bl	80002ac <__adddf3>
 800753c:	4602      	mov	r2, r0
 800753e:	460b      	mov	r3, r1
 8007540:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007544:	f7f9 faf8 	bl	8000b38 <__aeabi_dcmpgt>
 8007548:	2800      	cmp	r0, #0
 800754a:	d174      	bne.n	8007636 <_dtoa_r+0x69e>
 800754c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007550:	2000      	movs	r0, #0
 8007552:	4914      	ldr	r1, [pc, #80]	; (80075a4 <_dtoa_r+0x60c>)
 8007554:	f7f8 fea8 	bl	80002a8 <__aeabi_dsub>
 8007558:	4602      	mov	r2, r0
 800755a:	460b      	mov	r3, r1
 800755c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007560:	f7f9 facc 	bl	8000afc <__aeabi_dcmplt>
 8007564:	2800      	cmp	r0, #0
 8007566:	f43f af30 	beq.w	80073ca <_dtoa_r+0x432>
 800756a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800756e:	2b30      	cmp	r3, #48	; 0x30
 8007570:	f105 32ff 	add.w	r2, r5, #4294967295
 8007574:	d002      	beq.n	800757c <_dtoa_r+0x5e4>
 8007576:	f8dd a020 	ldr.w	sl, [sp, #32]
 800757a:	e04a      	b.n	8007612 <_dtoa_r+0x67a>
 800757c:	4615      	mov	r5, r2
 800757e:	e7f4      	b.n	800756a <_dtoa_r+0x5d2>
 8007580:	4b05      	ldr	r3, [pc, #20]	; (8007598 <_dtoa_r+0x600>)
 8007582:	f7f9 f849 	bl	8000618 <__aeabi_dmul>
 8007586:	e9cd 0100 	strd	r0, r1, [sp]
 800758a:	e7bc      	b.n	8007506 <_dtoa_r+0x56e>
 800758c:	08008fa0 	.word	0x08008fa0
 8007590:	08008f78 	.word	0x08008f78
 8007594:	3ff00000 	.word	0x3ff00000
 8007598:	40240000 	.word	0x40240000
 800759c:	401c0000 	.word	0x401c0000
 80075a0:	40140000 	.word	0x40140000
 80075a4:	3fe00000 	.word	0x3fe00000
 80075a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80075ac:	465d      	mov	r5, fp
 80075ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075b2:	4630      	mov	r0, r6
 80075b4:	4639      	mov	r1, r7
 80075b6:	f7f9 f959 	bl	800086c <__aeabi_ddiv>
 80075ba:	f7f9 fadd 	bl	8000b78 <__aeabi_d2iz>
 80075be:	4680      	mov	r8, r0
 80075c0:	f7f8 ffc0 	bl	8000544 <__aeabi_i2d>
 80075c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075c8:	f7f9 f826 	bl	8000618 <__aeabi_dmul>
 80075cc:	4602      	mov	r2, r0
 80075ce:	460b      	mov	r3, r1
 80075d0:	4630      	mov	r0, r6
 80075d2:	4639      	mov	r1, r7
 80075d4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80075d8:	f7f8 fe66 	bl	80002a8 <__aeabi_dsub>
 80075dc:	f805 6b01 	strb.w	r6, [r5], #1
 80075e0:	eba5 060b 	sub.w	r6, r5, fp
 80075e4:	45b1      	cmp	r9, r6
 80075e6:	4602      	mov	r2, r0
 80075e8:	460b      	mov	r3, r1
 80075ea:	d139      	bne.n	8007660 <_dtoa_r+0x6c8>
 80075ec:	f7f8 fe5e 	bl	80002ac <__adddf3>
 80075f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075f4:	4606      	mov	r6, r0
 80075f6:	460f      	mov	r7, r1
 80075f8:	f7f9 fa9e 	bl	8000b38 <__aeabi_dcmpgt>
 80075fc:	b9c8      	cbnz	r0, 8007632 <_dtoa_r+0x69a>
 80075fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007602:	4630      	mov	r0, r6
 8007604:	4639      	mov	r1, r7
 8007606:	f7f9 fa6f 	bl	8000ae8 <__aeabi_dcmpeq>
 800760a:	b110      	cbz	r0, 8007612 <_dtoa_r+0x67a>
 800760c:	f018 0f01 	tst.w	r8, #1
 8007610:	d10f      	bne.n	8007632 <_dtoa_r+0x69a>
 8007612:	9904      	ldr	r1, [sp, #16]
 8007614:	4620      	mov	r0, r4
 8007616:	f000 fac1 	bl	8007b9c <_Bfree>
 800761a:	2300      	movs	r3, #0
 800761c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800761e:	702b      	strb	r3, [r5, #0]
 8007620:	f10a 0301 	add.w	r3, sl, #1
 8007624:	6013      	str	r3, [r2, #0]
 8007626:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007628:	2b00      	cmp	r3, #0
 800762a:	f000 8241 	beq.w	8007ab0 <_dtoa_r+0xb18>
 800762e:	601d      	str	r5, [r3, #0]
 8007630:	e23e      	b.n	8007ab0 <_dtoa_r+0xb18>
 8007632:	f8cd a020 	str.w	sl, [sp, #32]
 8007636:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800763a:	2a39      	cmp	r2, #57	; 0x39
 800763c:	f105 33ff 	add.w	r3, r5, #4294967295
 8007640:	d108      	bne.n	8007654 <_dtoa_r+0x6bc>
 8007642:	459b      	cmp	fp, r3
 8007644:	d10a      	bne.n	800765c <_dtoa_r+0x6c4>
 8007646:	9b08      	ldr	r3, [sp, #32]
 8007648:	3301      	adds	r3, #1
 800764a:	9308      	str	r3, [sp, #32]
 800764c:	2330      	movs	r3, #48	; 0x30
 800764e:	f88b 3000 	strb.w	r3, [fp]
 8007652:	465b      	mov	r3, fp
 8007654:	781a      	ldrb	r2, [r3, #0]
 8007656:	3201      	adds	r2, #1
 8007658:	701a      	strb	r2, [r3, #0]
 800765a:	e78c      	b.n	8007576 <_dtoa_r+0x5de>
 800765c:	461d      	mov	r5, r3
 800765e:	e7ea      	b.n	8007636 <_dtoa_r+0x69e>
 8007660:	2200      	movs	r2, #0
 8007662:	4b9b      	ldr	r3, [pc, #620]	; (80078d0 <_dtoa_r+0x938>)
 8007664:	f7f8 ffd8 	bl	8000618 <__aeabi_dmul>
 8007668:	2200      	movs	r2, #0
 800766a:	2300      	movs	r3, #0
 800766c:	4606      	mov	r6, r0
 800766e:	460f      	mov	r7, r1
 8007670:	f7f9 fa3a 	bl	8000ae8 <__aeabi_dcmpeq>
 8007674:	2800      	cmp	r0, #0
 8007676:	d09a      	beq.n	80075ae <_dtoa_r+0x616>
 8007678:	e7cb      	b.n	8007612 <_dtoa_r+0x67a>
 800767a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800767c:	2a00      	cmp	r2, #0
 800767e:	f000 808b 	beq.w	8007798 <_dtoa_r+0x800>
 8007682:	9a06      	ldr	r2, [sp, #24]
 8007684:	2a01      	cmp	r2, #1
 8007686:	dc6e      	bgt.n	8007766 <_dtoa_r+0x7ce>
 8007688:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800768a:	2a00      	cmp	r2, #0
 800768c:	d067      	beq.n	800775e <_dtoa_r+0x7c6>
 800768e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007692:	9f07      	ldr	r7, [sp, #28]
 8007694:	9d05      	ldr	r5, [sp, #20]
 8007696:	9a05      	ldr	r2, [sp, #20]
 8007698:	2101      	movs	r1, #1
 800769a:	441a      	add	r2, r3
 800769c:	4620      	mov	r0, r4
 800769e:	9205      	str	r2, [sp, #20]
 80076a0:	4498      	add	r8, r3
 80076a2:	f000 fb1b 	bl	8007cdc <__i2b>
 80076a6:	4606      	mov	r6, r0
 80076a8:	2d00      	cmp	r5, #0
 80076aa:	dd0c      	ble.n	80076c6 <_dtoa_r+0x72e>
 80076ac:	f1b8 0f00 	cmp.w	r8, #0
 80076b0:	dd09      	ble.n	80076c6 <_dtoa_r+0x72e>
 80076b2:	4545      	cmp	r5, r8
 80076b4:	9a05      	ldr	r2, [sp, #20]
 80076b6:	462b      	mov	r3, r5
 80076b8:	bfa8      	it	ge
 80076ba:	4643      	movge	r3, r8
 80076bc:	1ad2      	subs	r2, r2, r3
 80076be:	9205      	str	r2, [sp, #20]
 80076c0:	1aed      	subs	r5, r5, r3
 80076c2:	eba8 0803 	sub.w	r8, r8, r3
 80076c6:	9b07      	ldr	r3, [sp, #28]
 80076c8:	b1eb      	cbz	r3, 8007706 <_dtoa_r+0x76e>
 80076ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d067      	beq.n	80077a0 <_dtoa_r+0x808>
 80076d0:	b18f      	cbz	r7, 80076f6 <_dtoa_r+0x75e>
 80076d2:	4631      	mov	r1, r6
 80076d4:	463a      	mov	r2, r7
 80076d6:	4620      	mov	r0, r4
 80076d8:	f000 fba0 	bl	8007e1c <__pow5mult>
 80076dc:	9a04      	ldr	r2, [sp, #16]
 80076de:	4601      	mov	r1, r0
 80076e0:	4606      	mov	r6, r0
 80076e2:	4620      	mov	r0, r4
 80076e4:	f000 fb03 	bl	8007cee <__multiply>
 80076e8:	9904      	ldr	r1, [sp, #16]
 80076ea:	9008      	str	r0, [sp, #32]
 80076ec:	4620      	mov	r0, r4
 80076ee:	f000 fa55 	bl	8007b9c <_Bfree>
 80076f2:	9b08      	ldr	r3, [sp, #32]
 80076f4:	9304      	str	r3, [sp, #16]
 80076f6:	9b07      	ldr	r3, [sp, #28]
 80076f8:	1bda      	subs	r2, r3, r7
 80076fa:	d004      	beq.n	8007706 <_dtoa_r+0x76e>
 80076fc:	9904      	ldr	r1, [sp, #16]
 80076fe:	4620      	mov	r0, r4
 8007700:	f000 fb8c 	bl	8007e1c <__pow5mult>
 8007704:	9004      	str	r0, [sp, #16]
 8007706:	2101      	movs	r1, #1
 8007708:	4620      	mov	r0, r4
 800770a:	f000 fae7 	bl	8007cdc <__i2b>
 800770e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007710:	4607      	mov	r7, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	f000 81d0 	beq.w	8007ab8 <_dtoa_r+0xb20>
 8007718:	461a      	mov	r2, r3
 800771a:	4601      	mov	r1, r0
 800771c:	4620      	mov	r0, r4
 800771e:	f000 fb7d 	bl	8007e1c <__pow5mult>
 8007722:	9b06      	ldr	r3, [sp, #24]
 8007724:	2b01      	cmp	r3, #1
 8007726:	4607      	mov	r7, r0
 8007728:	dc40      	bgt.n	80077ac <_dtoa_r+0x814>
 800772a:	9b00      	ldr	r3, [sp, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d139      	bne.n	80077a4 <_dtoa_r+0x80c>
 8007730:	9b01      	ldr	r3, [sp, #4]
 8007732:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007736:	2b00      	cmp	r3, #0
 8007738:	d136      	bne.n	80077a8 <_dtoa_r+0x810>
 800773a:	9b01      	ldr	r3, [sp, #4]
 800773c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007740:	0d1b      	lsrs	r3, r3, #20
 8007742:	051b      	lsls	r3, r3, #20
 8007744:	b12b      	cbz	r3, 8007752 <_dtoa_r+0x7ba>
 8007746:	9b05      	ldr	r3, [sp, #20]
 8007748:	3301      	adds	r3, #1
 800774a:	9305      	str	r3, [sp, #20]
 800774c:	f108 0801 	add.w	r8, r8, #1
 8007750:	2301      	movs	r3, #1
 8007752:	9307      	str	r3, [sp, #28]
 8007754:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007756:	2b00      	cmp	r3, #0
 8007758:	d12a      	bne.n	80077b0 <_dtoa_r+0x818>
 800775a:	2001      	movs	r0, #1
 800775c:	e030      	b.n	80077c0 <_dtoa_r+0x828>
 800775e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007760:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007764:	e795      	b.n	8007692 <_dtoa_r+0x6fa>
 8007766:	9b07      	ldr	r3, [sp, #28]
 8007768:	f109 37ff 	add.w	r7, r9, #4294967295
 800776c:	42bb      	cmp	r3, r7
 800776e:	bfbf      	itttt	lt
 8007770:	9b07      	ldrlt	r3, [sp, #28]
 8007772:	9707      	strlt	r7, [sp, #28]
 8007774:	1afa      	sublt	r2, r7, r3
 8007776:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007778:	bfbb      	ittet	lt
 800777a:	189b      	addlt	r3, r3, r2
 800777c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800777e:	1bdf      	subge	r7, r3, r7
 8007780:	2700      	movlt	r7, #0
 8007782:	f1b9 0f00 	cmp.w	r9, #0
 8007786:	bfb5      	itete	lt
 8007788:	9b05      	ldrlt	r3, [sp, #20]
 800778a:	9d05      	ldrge	r5, [sp, #20]
 800778c:	eba3 0509 	sublt.w	r5, r3, r9
 8007790:	464b      	movge	r3, r9
 8007792:	bfb8      	it	lt
 8007794:	2300      	movlt	r3, #0
 8007796:	e77e      	b.n	8007696 <_dtoa_r+0x6fe>
 8007798:	9f07      	ldr	r7, [sp, #28]
 800779a:	9d05      	ldr	r5, [sp, #20]
 800779c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800779e:	e783      	b.n	80076a8 <_dtoa_r+0x710>
 80077a0:	9a07      	ldr	r2, [sp, #28]
 80077a2:	e7ab      	b.n	80076fc <_dtoa_r+0x764>
 80077a4:	2300      	movs	r3, #0
 80077a6:	e7d4      	b.n	8007752 <_dtoa_r+0x7ba>
 80077a8:	9b00      	ldr	r3, [sp, #0]
 80077aa:	e7d2      	b.n	8007752 <_dtoa_r+0x7ba>
 80077ac:	2300      	movs	r3, #0
 80077ae:	9307      	str	r3, [sp, #28]
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80077b6:	6918      	ldr	r0, [r3, #16]
 80077b8:	f000 fa42 	bl	8007c40 <__hi0bits>
 80077bc:	f1c0 0020 	rsb	r0, r0, #32
 80077c0:	4440      	add	r0, r8
 80077c2:	f010 001f 	ands.w	r0, r0, #31
 80077c6:	d047      	beq.n	8007858 <_dtoa_r+0x8c0>
 80077c8:	f1c0 0320 	rsb	r3, r0, #32
 80077cc:	2b04      	cmp	r3, #4
 80077ce:	dd3b      	ble.n	8007848 <_dtoa_r+0x8b0>
 80077d0:	9b05      	ldr	r3, [sp, #20]
 80077d2:	f1c0 001c 	rsb	r0, r0, #28
 80077d6:	4403      	add	r3, r0
 80077d8:	9305      	str	r3, [sp, #20]
 80077da:	4405      	add	r5, r0
 80077dc:	4480      	add	r8, r0
 80077de:	9b05      	ldr	r3, [sp, #20]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	dd05      	ble.n	80077f0 <_dtoa_r+0x858>
 80077e4:	461a      	mov	r2, r3
 80077e6:	9904      	ldr	r1, [sp, #16]
 80077e8:	4620      	mov	r0, r4
 80077ea:	f000 fb65 	bl	8007eb8 <__lshift>
 80077ee:	9004      	str	r0, [sp, #16]
 80077f0:	f1b8 0f00 	cmp.w	r8, #0
 80077f4:	dd05      	ble.n	8007802 <_dtoa_r+0x86a>
 80077f6:	4639      	mov	r1, r7
 80077f8:	4642      	mov	r2, r8
 80077fa:	4620      	mov	r0, r4
 80077fc:	f000 fb5c 	bl	8007eb8 <__lshift>
 8007800:	4607      	mov	r7, r0
 8007802:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007804:	b353      	cbz	r3, 800785c <_dtoa_r+0x8c4>
 8007806:	4639      	mov	r1, r7
 8007808:	9804      	ldr	r0, [sp, #16]
 800780a:	f000 fba9 	bl	8007f60 <__mcmp>
 800780e:	2800      	cmp	r0, #0
 8007810:	da24      	bge.n	800785c <_dtoa_r+0x8c4>
 8007812:	2300      	movs	r3, #0
 8007814:	220a      	movs	r2, #10
 8007816:	9904      	ldr	r1, [sp, #16]
 8007818:	4620      	mov	r0, r4
 800781a:	f000 f9d6 	bl	8007bca <__multadd>
 800781e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007820:	9004      	str	r0, [sp, #16]
 8007822:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007826:	2b00      	cmp	r3, #0
 8007828:	f000 814d 	beq.w	8007ac6 <_dtoa_r+0xb2e>
 800782c:	2300      	movs	r3, #0
 800782e:	4631      	mov	r1, r6
 8007830:	220a      	movs	r2, #10
 8007832:	4620      	mov	r0, r4
 8007834:	f000 f9c9 	bl	8007bca <__multadd>
 8007838:	9b02      	ldr	r3, [sp, #8]
 800783a:	2b00      	cmp	r3, #0
 800783c:	4606      	mov	r6, r0
 800783e:	dc4f      	bgt.n	80078e0 <_dtoa_r+0x948>
 8007840:	9b06      	ldr	r3, [sp, #24]
 8007842:	2b02      	cmp	r3, #2
 8007844:	dd4c      	ble.n	80078e0 <_dtoa_r+0x948>
 8007846:	e011      	b.n	800786c <_dtoa_r+0x8d4>
 8007848:	d0c9      	beq.n	80077de <_dtoa_r+0x846>
 800784a:	9a05      	ldr	r2, [sp, #20]
 800784c:	331c      	adds	r3, #28
 800784e:	441a      	add	r2, r3
 8007850:	9205      	str	r2, [sp, #20]
 8007852:	441d      	add	r5, r3
 8007854:	4498      	add	r8, r3
 8007856:	e7c2      	b.n	80077de <_dtoa_r+0x846>
 8007858:	4603      	mov	r3, r0
 800785a:	e7f6      	b.n	800784a <_dtoa_r+0x8b2>
 800785c:	f1b9 0f00 	cmp.w	r9, #0
 8007860:	dc38      	bgt.n	80078d4 <_dtoa_r+0x93c>
 8007862:	9b06      	ldr	r3, [sp, #24]
 8007864:	2b02      	cmp	r3, #2
 8007866:	dd35      	ble.n	80078d4 <_dtoa_r+0x93c>
 8007868:	f8cd 9008 	str.w	r9, [sp, #8]
 800786c:	9b02      	ldr	r3, [sp, #8]
 800786e:	b963      	cbnz	r3, 800788a <_dtoa_r+0x8f2>
 8007870:	4639      	mov	r1, r7
 8007872:	2205      	movs	r2, #5
 8007874:	4620      	mov	r0, r4
 8007876:	f000 f9a8 	bl	8007bca <__multadd>
 800787a:	4601      	mov	r1, r0
 800787c:	4607      	mov	r7, r0
 800787e:	9804      	ldr	r0, [sp, #16]
 8007880:	f000 fb6e 	bl	8007f60 <__mcmp>
 8007884:	2800      	cmp	r0, #0
 8007886:	f73f adcc 	bgt.w	8007422 <_dtoa_r+0x48a>
 800788a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800788c:	465d      	mov	r5, fp
 800788e:	ea6f 0a03 	mvn.w	sl, r3
 8007892:	f04f 0900 	mov.w	r9, #0
 8007896:	4639      	mov	r1, r7
 8007898:	4620      	mov	r0, r4
 800789a:	f000 f97f 	bl	8007b9c <_Bfree>
 800789e:	2e00      	cmp	r6, #0
 80078a0:	f43f aeb7 	beq.w	8007612 <_dtoa_r+0x67a>
 80078a4:	f1b9 0f00 	cmp.w	r9, #0
 80078a8:	d005      	beq.n	80078b6 <_dtoa_r+0x91e>
 80078aa:	45b1      	cmp	r9, r6
 80078ac:	d003      	beq.n	80078b6 <_dtoa_r+0x91e>
 80078ae:	4649      	mov	r1, r9
 80078b0:	4620      	mov	r0, r4
 80078b2:	f000 f973 	bl	8007b9c <_Bfree>
 80078b6:	4631      	mov	r1, r6
 80078b8:	4620      	mov	r0, r4
 80078ba:	f000 f96f 	bl	8007b9c <_Bfree>
 80078be:	e6a8      	b.n	8007612 <_dtoa_r+0x67a>
 80078c0:	2700      	movs	r7, #0
 80078c2:	463e      	mov	r6, r7
 80078c4:	e7e1      	b.n	800788a <_dtoa_r+0x8f2>
 80078c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80078ca:	463e      	mov	r6, r7
 80078cc:	e5a9      	b.n	8007422 <_dtoa_r+0x48a>
 80078ce:	bf00      	nop
 80078d0:	40240000 	.word	0x40240000
 80078d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078d6:	f8cd 9008 	str.w	r9, [sp, #8]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f000 80fa 	beq.w	8007ad4 <_dtoa_r+0xb3c>
 80078e0:	2d00      	cmp	r5, #0
 80078e2:	dd05      	ble.n	80078f0 <_dtoa_r+0x958>
 80078e4:	4631      	mov	r1, r6
 80078e6:	462a      	mov	r2, r5
 80078e8:	4620      	mov	r0, r4
 80078ea:	f000 fae5 	bl	8007eb8 <__lshift>
 80078ee:	4606      	mov	r6, r0
 80078f0:	9b07      	ldr	r3, [sp, #28]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d04c      	beq.n	8007990 <_dtoa_r+0x9f8>
 80078f6:	6871      	ldr	r1, [r6, #4]
 80078f8:	4620      	mov	r0, r4
 80078fa:	f000 f91b 	bl	8007b34 <_Balloc>
 80078fe:	6932      	ldr	r2, [r6, #16]
 8007900:	3202      	adds	r2, #2
 8007902:	4605      	mov	r5, r0
 8007904:	0092      	lsls	r2, r2, #2
 8007906:	f106 010c 	add.w	r1, r6, #12
 800790a:	300c      	adds	r0, #12
 800790c:	f7fe fe16 	bl	800653c <memcpy>
 8007910:	2201      	movs	r2, #1
 8007912:	4629      	mov	r1, r5
 8007914:	4620      	mov	r0, r4
 8007916:	f000 facf 	bl	8007eb8 <__lshift>
 800791a:	9b00      	ldr	r3, [sp, #0]
 800791c:	f8cd b014 	str.w	fp, [sp, #20]
 8007920:	f003 0301 	and.w	r3, r3, #1
 8007924:	46b1      	mov	r9, r6
 8007926:	9307      	str	r3, [sp, #28]
 8007928:	4606      	mov	r6, r0
 800792a:	4639      	mov	r1, r7
 800792c:	9804      	ldr	r0, [sp, #16]
 800792e:	f7ff faa4 	bl	8006e7a <quorem>
 8007932:	4649      	mov	r1, r9
 8007934:	4605      	mov	r5, r0
 8007936:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800793a:	9804      	ldr	r0, [sp, #16]
 800793c:	f000 fb10 	bl	8007f60 <__mcmp>
 8007940:	4632      	mov	r2, r6
 8007942:	9000      	str	r0, [sp, #0]
 8007944:	4639      	mov	r1, r7
 8007946:	4620      	mov	r0, r4
 8007948:	f000 fb24 	bl	8007f94 <__mdiff>
 800794c:	68c3      	ldr	r3, [r0, #12]
 800794e:	4602      	mov	r2, r0
 8007950:	bb03      	cbnz	r3, 8007994 <_dtoa_r+0x9fc>
 8007952:	4601      	mov	r1, r0
 8007954:	9008      	str	r0, [sp, #32]
 8007956:	9804      	ldr	r0, [sp, #16]
 8007958:	f000 fb02 	bl	8007f60 <__mcmp>
 800795c:	9a08      	ldr	r2, [sp, #32]
 800795e:	4603      	mov	r3, r0
 8007960:	4611      	mov	r1, r2
 8007962:	4620      	mov	r0, r4
 8007964:	9308      	str	r3, [sp, #32]
 8007966:	f000 f919 	bl	8007b9c <_Bfree>
 800796a:	9b08      	ldr	r3, [sp, #32]
 800796c:	b9a3      	cbnz	r3, 8007998 <_dtoa_r+0xa00>
 800796e:	9a06      	ldr	r2, [sp, #24]
 8007970:	b992      	cbnz	r2, 8007998 <_dtoa_r+0xa00>
 8007972:	9a07      	ldr	r2, [sp, #28]
 8007974:	b982      	cbnz	r2, 8007998 <_dtoa_r+0xa00>
 8007976:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800797a:	d029      	beq.n	80079d0 <_dtoa_r+0xa38>
 800797c:	9b00      	ldr	r3, [sp, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	dd01      	ble.n	8007986 <_dtoa_r+0x9ee>
 8007982:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007986:	9b05      	ldr	r3, [sp, #20]
 8007988:	1c5d      	adds	r5, r3, #1
 800798a:	f883 8000 	strb.w	r8, [r3]
 800798e:	e782      	b.n	8007896 <_dtoa_r+0x8fe>
 8007990:	4630      	mov	r0, r6
 8007992:	e7c2      	b.n	800791a <_dtoa_r+0x982>
 8007994:	2301      	movs	r3, #1
 8007996:	e7e3      	b.n	8007960 <_dtoa_r+0x9c8>
 8007998:	9a00      	ldr	r2, [sp, #0]
 800799a:	2a00      	cmp	r2, #0
 800799c:	db04      	blt.n	80079a8 <_dtoa_r+0xa10>
 800799e:	d125      	bne.n	80079ec <_dtoa_r+0xa54>
 80079a0:	9a06      	ldr	r2, [sp, #24]
 80079a2:	bb1a      	cbnz	r2, 80079ec <_dtoa_r+0xa54>
 80079a4:	9a07      	ldr	r2, [sp, #28]
 80079a6:	bb0a      	cbnz	r2, 80079ec <_dtoa_r+0xa54>
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	ddec      	ble.n	8007986 <_dtoa_r+0x9ee>
 80079ac:	2201      	movs	r2, #1
 80079ae:	9904      	ldr	r1, [sp, #16]
 80079b0:	4620      	mov	r0, r4
 80079b2:	f000 fa81 	bl	8007eb8 <__lshift>
 80079b6:	4639      	mov	r1, r7
 80079b8:	9004      	str	r0, [sp, #16]
 80079ba:	f000 fad1 	bl	8007f60 <__mcmp>
 80079be:	2800      	cmp	r0, #0
 80079c0:	dc03      	bgt.n	80079ca <_dtoa_r+0xa32>
 80079c2:	d1e0      	bne.n	8007986 <_dtoa_r+0x9ee>
 80079c4:	f018 0f01 	tst.w	r8, #1
 80079c8:	d0dd      	beq.n	8007986 <_dtoa_r+0x9ee>
 80079ca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80079ce:	d1d8      	bne.n	8007982 <_dtoa_r+0x9ea>
 80079d0:	9b05      	ldr	r3, [sp, #20]
 80079d2:	9a05      	ldr	r2, [sp, #20]
 80079d4:	1c5d      	adds	r5, r3, #1
 80079d6:	2339      	movs	r3, #57	; 0x39
 80079d8:	7013      	strb	r3, [r2, #0]
 80079da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80079de:	2b39      	cmp	r3, #57	; 0x39
 80079e0:	f105 32ff 	add.w	r2, r5, #4294967295
 80079e4:	d04f      	beq.n	8007a86 <_dtoa_r+0xaee>
 80079e6:	3301      	adds	r3, #1
 80079e8:	7013      	strb	r3, [r2, #0]
 80079ea:	e754      	b.n	8007896 <_dtoa_r+0x8fe>
 80079ec:	9a05      	ldr	r2, [sp, #20]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f102 0501 	add.w	r5, r2, #1
 80079f4:	dd06      	ble.n	8007a04 <_dtoa_r+0xa6c>
 80079f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80079fa:	d0e9      	beq.n	80079d0 <_dtoa_r+0xa38>
 80079fc:	f108 0801 	add.w	r8, r8, #1
 8007a00:	9b05      	ldr	r3, [sp, #20]
 8007a02:	e7c2      	b.n	800798a <_dtoa_r+0x9f2>
 8007a04:	9a02      	ldr	r2, [sp, #8]
 8007a06:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007a0a:	eba5 030b 	sub.w	r3, r5, fp
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d021      	beq.n	8007a56 <_dtoa_r+0xabe>
 8007a12:	2300      	movs	r3, #0
 8007a14:	220a      	movs	r2, #10
 8007a16:	9904      	ldr	r1, [sp, #16]
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f000 f8d6 	bl	8007bca <__multadd>
 8007a1e:	45b1      	cmp	r9, r6
 8007a20:	9004      	str	r0, [sp, #16]
 8007a22:	f04f 0300 	mov.w	r3, #0
 8007a26:	f04f 020a 	mov.w	r2, #10
 8007a2a:	4649      	mov	r1, r9
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	d105      	bne.n	8007a3c <_dtoa_r+0xaa4>
 8007a30:	f000 f8cb 	bl	8007bca <__multadd>
 8007a34:	4681      	mov	r9, r0
 8007a36:	4606      	mov	r6, r0
 8007a38:	9505      	str	r5, [sp, #20]
 8007a3a:	e776      	b.n	800792a <_dtoa_r+0x992>
 8007a3c:	f000 f8c5 	bl	8007bca <__multadd>
 8007a40:	4631      	mov	r1, r6
 8007a42:	4681      	mov	r9, r0
 8007a44:	2300      	movs	r3, #0
 8007a46:	220a      	movs	r2, #10
 8007a48:	4620      	mov	r0, r4
 8007a4a:	f000 f8be 	bl	8007bca <__multadd>
 8007a4e:	4606      	mov	r6, r0
 8007a50:	e7f2      	b.n	8007a38 <_dtoa_r+0xaa0>
 8007a52:	f04f 0900 	mov.w	r9, #0
 8007a56:	2201      	movs	r2, #1
 8007a58:	9904      	ldr	r1, [sp, #16]
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f000 fa2c 	bl	8007eb8 <__lshift>
 8007a60:	4639      	mov	r1, r7
 8007a62:	9004      	str	r0, [sp, #16]
 8007a64:	f000 fa7c 	bl	8007f60 <__mcmp>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	dcb6      	bgt.n	80079da <_dtoa_r+0xa42>
 8007a6c:	d102      	bne.n	8007a74 <_dtoa_r+0xadc>
 8007a6e:	f018 0f01 	tst.w	r8, #1
 8007a72:	d1b2      	bne.n	80079da <_dtoa_r+0xa42>
 8007a74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a78:	2b30      	cmp	r3, #48	; 0x30
 8007a7a:	f105 32ff 	add.w	r2, r5, #4294967295
 8007a7e:	f47f af0a 	bne.w	8007896 <_dtoa_r+0x8fe>
 8007a82:	4615      	mov	r5, r2
 8007a84:	e7f6      	b.n	8007a74 <_dtoa_r+0xadc>
 8007a86:	4593      	cmp	fp, r2
 8007a88:	d105      	bne.n	8007a96 <_dtoa_r+0xafe>
 8007a8a:	2331      	movs	r3, #49	; 0x31
 8007a8c:	f10a 0a01 	add.w	sl, sl, #1
 8007a90:	f88b 3000 	strb.w	r3, [fp]
 8007a94:	e6ff      	b.n	8007896 <_dtoa_r+0x8fe>
 8007a96:	4615      	mov	r5, r2
 8007a98:	e79f      	b.n	80079da <_dtoa_r+0xa42>
 8007a9a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007b00 <_dtoa_r+0xb68>
 8007a9e:	e007      	b.n	8007ab0 <_dtoa_r+0xb18>
 8007aa0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007aa2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007b04 <_dtoa_r+0xb6c>
 8007aa6:	b11b      	cbz	r3, 8007ab0 <_dtoa_r+0xb18>
 8007aa8:	f10b 0308 	add.w	r3, fp, #8
 8007aac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007aae:	6013      	str	r3, [r2, #0]
 8007ab0:	4658      	mov	r0, fp
 8007ab2:	b017      	add	sp, #92	; 0x5c
 8007ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab8:	9b06      	ldr	r3, [sp, #24]
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	f77f ae35 	ble.w	800772a <_dtoa_r+0x792>
 8007ac0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ac2:	9307      	str	r3, [sp, #28]
 8007ac4:	e649      	b.n	800775a <_dtoa_r+0x7c2>
 8007ac6:	9b02      	ldr	r3, [sp, #8]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	dc03      	bgt.n	8007ad4 <_dtoa_r+0xb3c>
 8007acc:	9b06      	ldr	r3, [sp, #24]
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	f73f aecc 	bgt.w	800786c <_dtoa_r+0x8d4>
 8007ad4:	465d      	mov	r5, fp
 8007ad6:	4639      	mov	r1, r7
 8007ad8:	9804      	ldr	r0, [sp, #16]
 8007ada:	f7ff f9ce 	bl	8006e7a <quorem>
 8007ade:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007ae2:	f805 8b01 	strb.w	r8, [r5], #1
 8007ae6:	9a02      	ldr	r2, [sp, #8]
 8007ae8:	eba5 030b 	sub.w	r3, r5, fp
 8007aec:	429a      	cmp	r2, r3
 8007aee:	ddb0      	ble.n	8007a52 <_dtoa_r+0xaba>
 8007af0:	2300      	movs	r3, #0
 8007af2:	220a      	movs	r2, #10
 8007af4:	9904      	ldr	r1, [sp, #16]
 8007af6:	4620      	mov	r0, r4
 8007af8:	f000 f867 	bl	8007bca <__multadd>
 8007afc:	9004      	str	r0, [sp, #16]
 8007afe:	e7ea      	b.n	8007ad6 <_dtoa_r+0xb3e>
 8007b00:	08008f44 	.word	0x08008f44
 8007b04:	08008f68 	.word	0x08008f68

08007b08 <_localeconv_r>:
 8007b08:	4b04      	ldr	r3, [pc, #16]	; (8007b1c <_localeconv_r+0x14>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6a18      	ldr	r0, [r3, #32]
 8007b0e:	4b04      	ldr	r3, [pc, #16]	; (8007b20 <_localeconv_r+0x18>)
 8007b10:	2800      	cmp	r0, #0
 8007b12:	bf08      	it	eq
 8007b14:	4618      	moveq	r0, r3
 8007b16:	30f0      	adds	r0, #240	; 0xf0
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	20000018 	.word	0x20000018
 8007b20:	2000007c 	.word	0x2000007c

08007b24 <malloc>:
 8007b24:	4b02      	ldr	r3, [pc, #8]	; (8007b30 <malloc+0xc>)
 8007b26:	4601      	mov	r1, r0
 8007b28:	6818      	ldr	r0, [r3, #0]
 8007b2a:	f000 bb3b 	b.w	80081a4 <_malloc_r>
 8007b2e:	bf00      	nop
 8007b30:	20000018 	.word	0x20000018

08007b34 <_Balloc>:
 8007b34:	b570      	push	{r4, r5, r6, lr}
 8007b36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b38:	4604      	mov	r4, r0
 8007b3a:	460e      	mov	r6, r1
 8007b3c:	b93d      	cbnz	r5, 8007b4e <_Balloc+0x1a>
 8007b3e:	2010      	movs	r0, #16
 8007b40:	f7ff fff0 	bl	8007b24 <malloc>
 8007b44:	6260      	str	r0, [r4, #36]	; 0x24
 8007b46:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b4a:	6005      	str	r5, [r0, #0]
 8007b4c:	60c5      	str	r5, [r0, #12]
 8007b4e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007b50:	68eb      	ldr	r3, [r5, #12]
 8007b52:	b183      	cbz	r3, 8007b76 <_Balloc+0x42>
 8007b54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007b5c:	b9b8      	cbnz	r0, 8007b8e <_Balloc+0x5a>
 8007b5e:	2101      	movs	r1, #1
 8007b60:	fa01 f506 	lsl.w	r5, r1, r6
 8007b64:	1d6a      	adds	r2, r5, #5
 8007b66:	0092      	lsls	r2, r2, #2
 8007b68:	4620      	mov	r0, r4
 8007b6a:	f000 fabf 	bl	80080ec <_calloc_r>
 8007b6e:	b160      	cbz	r0, 8007b8a <_Balloc+0x56>
 8007b70:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007b74:	e00e      	b.n	8007b94 <_Balloc+0x60>
 8007b76:	2221      	movs	r2, #33	; 0x21
 8007b78:	2104      	movs	r1, #4
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f000 fab6 	bl	80080ec <_calloc_r>
 8007b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b82:	60e8      	str	r0, [r5, #12]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1e4      	bne.n	8007b54 <_Balloc+0x20>
 8007b8a:	2000      	movs	r0, #0
 8007b8c:	bd70      	pop	{r4, r5, r6, pc}
 8007b8e:	6802      	ldr	r2, [r0, #0]
 8007b90:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007b94:	2300      	movs	r3, #0
 8007b96:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b9a:	e7f7      	b.n	8007b8c <_Balloc+0x58>

08007b9c <_Bfree>:
 8007b9c:	b570      	push	{r4, r5, r6, lr}
 8007b9e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007ba0:	4606      	mov	r6, r0
 8007ba2:	460d      	mov	r5, r1
 8007ba4:	b93c      	cbnz	r4, 8007bb6 <_Bfree+0x1a>
 8007ba6:	2010      	movs	r0, #16
 8007ba8:	f7ff ffbc 	bl	8007b24 <malloc>
 8007bac:	6270      	str	r0, [r6, #36]	; 0x24
 8007bae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007bb2:	6004      	str	r4, [r0, #0]
 8007bb4:	60c4      	str	r4, [r0, #12]
 8007bb6:	b13d      	cbz	r5, 8007bc8 <_Bfree+0x2c>
 8007bb8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007bba:	686a      	ldr	r2, [r5, #4]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007bc2:	6029      	str	r1, [r5, #0]
 8007bc4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007bc8:	bd70      	pop	{r4, r5, r6, pc}

08007bca <__multadd>:
 8007bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bce:	690d      	ldr	r5, [r1, #16]
 8007bd0:	461f      	mov	r7, r3
 8007bd2:	4606      	mov	r6, r0
 8007bd4:	460c      	mov	r4, r1
 8007bd6:	f101 0c14 	add.w	ip, r1, #20
 8007bda:	2300      	movs	r3, #0
 8007bdc:	f8dc 0000 	ldr.w	r0, [ip]
 8007be0:	b281      	uxth	r1, r0
 8007be2:	fb02 7101 	mla	r1, r2, r1, r7
 8007be6:	0c0f      	lsrs	r7, r1, #16
 8007be8:	0c00      	lsrs	r0, r0, #16
 8007bea:	fb02 7000 	mla	r0, r2, r0, r7
 8007bee:	b289      	uxth	r1, r1
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007bf6:	429d      	cmp	r5, r3
 8007bf8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007bfc:	f84c 1b04 	str.w	r1, [ip], #4
 8007c00:	dcec      	bgt.n	8007bdc <__multadd+0x12>
 8007c02:	b1d7      	cbz	r7, 8007c3a <__multadd+0x70>
 8007c04:	68a3      	ldr	r3, [r4, #8]
 8007c06:	42ab      	cmp	r3, r5
 8007c08:	dc12      	bgt.n	8007c30 <__multadd+0x66>
 8007c0a:	6861      	ldr	r1, [r4, #4]
 8007c0c:	4630      	mov	r0, r6
 8007c0e:	3101      	adds	r1, #1
 8007c10:	f7ff ff90 	bl	8007b34 <_Balloc>
 8007c14:	6922      	ldr	r2, [r4, #16]
 8007c16:	3202      	adds	r2, #2
 8007c18:	f104 010c 	add.w	r1, r4, #12
 8007c1c:	4680      	mov	r8, r0
 8007c1e:	0092      	lsls	r2, r2, #2
 8007c20:	300c      	adds	r0, #12
 8007c22:	f7fe fc8b 	bl	800653c <memcpy>
 8007c26:	4621      	mov	r1, r4
 8007c28:	4630      	mov	r0, r6
 8007c2a:	f7ff ffb7 	bl	8007b9c <_Bfree>
 8007c2e:	4644      	mov	r4, r8
 8007c30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c34:	3501      	adds	r5, #1
 8007c36:	615f      	str	r7, [r3, #20]
 8007c38:	6125      	str	r5, [r4, #16]
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007c40 <__hi0bits>:
 8007c40:	0c02      	lsrs	r2, r0, #16
 8007c42:	0412      	lsls	r2, r2, #16
 8007c44:	4603      	mov	r3, r0
 8007c46:	b9b2      	cbnz	r2, 8007c76 <__hi0bits+0x36>
 8007c48:	0403      	lsls	r3, r0, #16
 8007c4a:	2010      	movs	r0, #16
 8007c4c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007c50:	bf04      	itt	eq
 8007c52:	021b      	lsleq	r3, r3, #8
 8007c54:	3008      	addeq	r0, #8
 8007c56:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007c5a:	bf04      	itt	eq
 8007c5c:	011b      	lsleq	r3, r3, #4
 8007c5e:	3004      	addeq	r0, #4
 8007c60:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007c64:	bf04      	itt	eq
 8007c66:	009b      	lsleq	r3, r3, #2
 8007c68:	3002      	addeq	r0, #2
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	db06      	blt.n	8007c7c <__hi0bits+0x3c>
 8007c6e:	005b      	lsls	r3, r3, #1
 8007c70:	d503      	bpl.n	8007c7a <__hi0bits+0x3a>
 8007c72:	3001      	adds	r0, #1
 8007c74:	4770      	bx	lr
 8007c76:	2000      	movs	r0, #0
 8007c78:	e7e8      	b.n	8007c4c <__hi0bits+0xc>
 8007c7a:	2020      	movs	r0, #32
 8007c7c:	4770      	bx	lr

08007c7e <__lo0bits>:
 8007c7e:	6803      	ldr	r3, [r0, #0]
 8007c80:	f013 0207 	ands.w	r2, r3, #7
 8007c84:	4601      	mov	r1, r0
 8007c86:	d00b      	beq.n	8007ca0 <__lo0bits+0x22>
 8007c88:	07da      	lsls	r2, r3, #31
 8007c8a:	d423      	bmi.n	8007cd4 <__lo0bits+0x56>
 8007c8c:	0798      	lsls	r0, r3, #30
 8007c8e:	bf49      	itett	mi
 8007c90:	085b      	lsrmi	r3, r3, #1
 8007c92:	089b      	lsrpl	r3, r3, #2
 8007c94:	2001      	movmi	r0, #1
 8007c96:	600b      	strmi	r3, [r1, #0]
 8007c98:	bf5c      	itt	pl
 8007c9a:	600b      	strpl	r3, [r1, #0]
 8007c9c:	2002      	movpl	r0, #2
 8007c9e:	4770      	bx	lr
 8007ca0:	b298      	uxth	r0, r3
 8007ca2:	b9a8      	cbnz	r0, 8007cd0 <__lo0bits+0x52>
 8007ca4:	0c1b      	lsrs	r3, r3, #16
 8007ca6:	2010      	movs	r0, #16
 8007ca8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007cac:	bf04      	itt	eq
 8007cae:	0a1b      	lsreq	r3, r3, #8
 8007cb0:	3008      	addeq	r0, #8
 8007cb2:	071a      	lsls	r2, r3, #28
 8007cb4:	bf04      	itt	eq
 8007cb6:	091b      	lsreq	r3, r3, #4
 8007cb8:	3004      	addeq	r0, #4
 8007cba:	079a      	lsls	r2, r3, #30
 8007cbc:	bf04      	itt	eq
 8007cbe:	089b      	lsreq	r3, r3, #2
 8007cc0:	3002      	addeq	r0, #2
 8007cc2:	07da      	lsls	r2, r3, #31
 8007cc4:	d402      	bmi.n	8007ccc <__lo0bits+0x4e>
 8007cc6:	085b      	lsrs	r3, r3, #1
 8007cc8:	d006      	beq.n	8007cd8 <__lo0bits+0x5a>
 8007cca:	3001      	adds	r0, #1
 8007ccc:	600b      	str	r3, [r1, #0]
 8007cce:	4770      	bx	lr
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	e7e9      	b.n	8007ca8 <__lo0bits+0x2a>
 8007cd4:	2000      	movs	r0, #0
 8007cd6:	4770      	bx	lr
 8007cd8:	2020      	movs	r0, #32
 8007cda:	4770      	bx	lr

08007cdc <__i2b>:
 8007cdc:	b510      	push	{r4, lr}
 8007cde:	460c      	mov	r4, r1
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	f7ff ff27 	bl	8007b34 <_Balloc>
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	6144      	str	r4, [r0, #20]
 8007cea:	6102      	str	r2, [r0, #16]
 8007cec:	bd10      	pop	{r4, pc}

08007cee <__multiply>:
 8007cee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf2:	4614      	mov	r4, r2
 8007cf4:	690a      	ldr	r2, [r1, #16]
 8007cf6:	6923      	ldr	r3, [r4, #16]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	bfb8      	it	lt
 8007cfc:	460b      	movlt	r3, r1
 8007cfe:	4688      	mov	r8, r1
 8007d00:	bfbc      	itt	lt
 8007d02:	46a0      	movlt	r8, r4
 8007d04:	461c      	movlt	r4, r3
 8007d06:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007d0a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007d0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d12:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007d16:	eb07 0609 	add.w	r6, r7, r9
 8007d1a:	42b3      	cmp	r3, r6
 8007d1c:	bfb8      	it	lt
 8007d1e:	3101      	addlt	r1, #1
 8007d20:	f7ff ff08 	bl	8007b34 <_Balloc>
 8007d24:	f100 0514 	add.w	r5, r0, #20
 8007d28:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007d2c:	462b      	mov	r3, r5
 8007d2e:	2200      	movs	r2, #0
 8007d30:	4573      	cmp	r3, lr
 8007d32:	d316      	bcc.n	8007d62 <__multiply+0x74>
 8007d34:	f104 0214 	add.w	r2, r4, #20
 8007d38:	f108 0114 	add.w	r1, r8, #20
 8007d3c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007d40:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	9b00      	ldr	r3, [sp, #0]
 8007d48:	9201      	str	r2, [sp, #4]
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d80c      	bhi.n	8007d68 <__multiply+0x7a>
 8007d4e:	2e00      	cmp	r6, #0
 8007d50:	dd03      	ble.n	8007d5a <__multiply+0x6c>
 8007d52:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d05d      	beq.n	8007e16 <__multiply+0x128>
 8007d5a:	6106      	str	r6, [r0, #16]
 8007d5c:	b003      	add	sp, #12
 8007d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d62:	f843 2b04 	str.w	r2, [r3], #4
 8007d66:	e7e3      	b.n	8007d30 <__multiply+0x42>
 8007d68:	f8b2 b000 	ldrh.w	fp, [r2]
 8007d6c:	f1bb 0f00 	cmp.w	fp, #0
 8007d70:	d023      	beq.n	8007dba <__multiply+0xcc>
 8007d72:	4689      	mov	r9, r1
 8007d74:	46ac      	mov	ip, r5
 8007d76:	f04f 0800 	mov.w	r8, #0
 8007d7a:	f859 4b04 	ldr.w	r4, [r9], #4
 8007d7e:	f8dc a000 	ldr.w	sl, [ip]
 8007d82:	b2a3      	uxth	r3, r4
 8007d84:	fa1f fa8a 	uxth.w	sl, sl
 8007d88:	fb0b a303 	mla	r3, fp, r3, sl
 8007d8c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007d90:	f8dc 4000 	ldr.w	r4, [ip]
 8007d94:	4443      	add	r3, r8
 8007d96:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007d9a:	fb0b 840a 	mla	r4, fp, sl, r8
 8007d9e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007da2:	46e2      	mov	sl, ip
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007daa:	454f      	cmp	r7, r9
 8007dac:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007db0:	f84a 3b04 	str.w	r3, [sl], #4
 8007db4:	d82b      	bhi.n	8007e0e <__multiply+0x120>
 8007db6:	f8cc 8004 	str.w	r8, [ip, #4]
 8007dba:	9b01      	ldr	r3, [sp, #4]
 8007dbc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007dc0:	3204      	adds	r2, #4
 8007dc2:	f1ba 0f00 	cmp.w	sl, #0
 8007dc6:	d020      	beq.n	8007e0a <__multiply+0x11c>
 8007dc8:	682b      	ldr	r3, [r5, #0]
 8007dca:	4689      	mov	r9, r1
 8007dcc:	46a8      	mov	r8, r5
 8007dce:	f04f 0b00 	mov.w	fp, #0
 8007dd2:	f8b9 c000 	ldrh.w	ip, [r9]
 8007dd6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007dda:	fb0a 440c 	mla	r4, sl, ip, r4
 8007dde:	445c      	add	r4, fp
 8007de0:	46c4      	mov	ip, r8
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007de8:	f84c 3b04 	str.w	r3, [ip], #4
 8007dec:	f859 3b04 	ldr.w	r3, [r9], #4
 8007df0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007df4:	0c1b      	lsrs	r3, r3, #16
 8007df6:	fb0a b303 	mla	r3, sl, r3, fp
 8007dfa:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007dfe:	454f      	cmp	r7, r9
 8007e00:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007e04:	d805      	bhi.n	8007e12 <__multiply+0x124>
 8007e06:	f8c8 3004 	str.w	r3, [r8, #4]
 8007e0a:	3504      	adds	r5, #4
 8007e0c:	e79b      	b.n	8007d46 <__multiply+0x58>
 8007e0e:	46d4      	mov	ip, sl
 8007e10:	e7b3      	b.n	8007d7a <__multiply+0x8c>
 8007e12:	46e0      	mov	r8, ip
 8007e14:	e7dd      	b.n	8007dd2 <__multiply+0xe4>
 8007e16:	3e01      	subs	r6, #1
 8007e18:	e799      	b.n	8007d4e <__multiply+0x60>
	...

08007e1c <__pow5mult>:
 8007e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e20:	4615      	mov	r5, r2
 8007e22:	f012 0203 	ands.w	r2, r2, #3
 8007e26:	4606      	mov	r6, r0
 8007e28:	460f      	mov	r7, r1
 8007e2a:	d007      	beq.n	8007e3c <__pow5mult+0x20>
 8007e2c:	3a01      	subs	r2, #1
 8007e2e:	4c21      	ldr	r4, [pc, #132]	; (8007eb4 <__pow5mult+0x98>)
 8007e30:	2300      	movs	r3, #0
 8007e32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e36:	f7ff fec8 	bl	8007bca <__multadd>
 8007e3a:	4607      	mov	r7, r0
 8007e3c:	10ad      	asrs	r5, r5, #2
 8007e3e:	d035      	beq.n	8007eac <__pow5mult+0x90>
 8007e40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007e42:	b93c      	cbnz	r4, 8007e54 <__pow5mult+0x38>
 8007e44:	2010      	movs	r0, #16
 8007e46:	f7ff fe6d 	bl	8007b24 <malloc>
 8007e4a:	6270      	str	r0, [r6, #36]	; 0x24
 8007e4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e50:	6004      	str	r4, [r0, #0]
 8007e52:	60c4      	str	r4, [r0, #12]
 8007e54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007e58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e5c:	b94c      	cbnz	r4, 8007e72 <__pow5mult+0x56>
 8007e5e:	f240 2171 	movw	r1, #625	; 0x271
 8007e62:	4630      	mov	r0, r6
 8007e64:	f7ff ff3a 	bl	8007cdc <__i2b>
 8007e68:	2300      	movs	r3, #0
 8007e6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e6e:	4604      	mov	r4, r0
 8007e70:	6003      	str	r3, [r0, #0]
 8007e72:	f04f 0800 	mov.w	r8, #0
 8007e76:	07eb      	lsls	r3, r5, #31
 8007e78:	d50a      	bpl.n	8007e90 <__pow5mult+0x74>
 8007e7a:	4639      	mov	r1, r7
 8007e7c:	4622      	mov	r2, r4
 8007e7e:	4630      	mov	r0, r6
 8007e80:	f7ff ff35 	bl	8007cee <__multiply>
 8007e84:	4639      	mov	r1, r7
 8007e86:	4681      	mov	r9, r0
 8007e88:	4630      	mov	r0, r6
 8007e8a:	f7ff fe87 	bl	8007b9c <_Bfree>
 8007e8e:	464f      	mov	r7, r9
 8007e90:	106d      	asrs	r5, r5, #1
 8007e92:	d00b      	beq.n	8007eac <__pow5mult+0x90>
 8007e94:	6820      	ldr	r0, [r4, #0]
 8007e96:	b938      	cbnz	r0, 8007ea8 <__pow5mult+0x8c>
 8007e98:	4622      	mov	r2, r4
 8007e9a:	4621      	mov	r1, r4
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	f7ff ff26 	bl	8007cee <__multiply>
 8007ea2:	6020      	str	r0, [r4, #0]
 8007ea4:	f8c0 8000 	str.w	r8, [r0]
 8007ea8:	4604      	mov	r4, r0
 8007eaa:	e7e4      	b.n	8007e76 <__pow5mult+0x5a>
 8007eac:	4638      	mov	r0, r7
 8007eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eb2:	bf00      	nop
 8007eb4:	08009068 	.word	0x08009068

08007eb8 <__lshift>:
 8007eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ebc:	460c      	mov	r4, r1
 8007ebe:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ec2:	6923      	ldr	r3, [r4, #16]
 8007ec4:	6849      	ldr	r1, [r1, #4]
 8007ec6:	eb0a 0903 	add.w	r9, sl, r3
 8007eca:	68a3      	ldr	r3, [r4, #8]
 8007ecc:	4607      	mov	r7, r0
 8007ece:	4616      	mov	r6, r2
 8007ed0:	f109 0501 	add.w	r5, r9, #1
 8007ed4:	42ab      	cmp	r3, r5
 8007ed6:	db32      	blt.n	8007f3e <__lshift+0x86>
 8007ed8:	4638      	mov	r0, r7
 8007eda:	f7ff fe2b 	bl	8007b34 <_Balloc>
 8007ede:	2300      	movs	r3, #0
 8007ee0:	4680      	mov	r8, r0
 8007ee2:	f100 0114 	add.w	r1, r0, #20
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	4553      	cmp	r3, sl
 8007eea:	db2b      	blt.n	8007f44 <__lshift+0x8c>
 8007eec:	6920      	ldr	r0, [r4, #16]
 8007eee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ef2:	f104 0314 	add.w	r3, r4, #20
 8007ef6:	f016 021f 	ands.w	r2, r6, #31
 8007efa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007efe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f02:	d025      	beq.n	8007f50 <__lshift+0x98>
 8007f04:	f1c2 0e20 	rsb	lr, r2, #32
 8007f08:	2000      	movs	r0, #0
 8007f0a:	681e      	ldr	r6, [r3, #0]
 8007f0c:	468a      	mov	sl, r1
 8007f0e:	4096      	lsls	r6, r2
 8007f10:	4330      	orrs	r0, r6
 8007f12:	f84a 0b04 	str.w	r0, [sl], #4
 8007f16:	f853 0b04 	ldr.w	r0, [r3], #4
 8007f1a:	459c      	cmp	ip, r3
 8007f1c:	fa20 f00e 	lsr.w	r0, r0, lr
 8007f20:	d814      	bhi.n	8007f4c <__lshift+0x94>
 8007f22:	6048      	str	r0, [r1, #4]
 8007f24:	b108      	cbz	r0, 8007f2a <__lshift+0x72>
 8007f26:	f109 0502 	add.w	r5, r9, #2
 8007f2a:	3d01      	subs	r5, #1
 8007f2c:	4638      	mov	r0, r7
 8007f2e:	f8c8 5010 	str.w	r5, [r8, #16]
 8007f32:	4621      	mov	r1, r4
 8007f34:	f7ff fe32 	bl	8007b9c <_Bfree>
 8007f38:	4640      	mov	r0, r8
 8007f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f3e:	3101      	adds	r1, #1
 8007f40:	005b      	lsls	r3, r3, #1
 8007f42:	e7c7      	b.n	8007ed4 <__lshift+0x1c>
 8007f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	e7cd      	b.n	8007ee8 <__lshift+0x30>
 8007f4c:	4651      	mov	r1, sl
 8007f4e:	e7dc      	b.n	8007f0a <__lshift+0x52>
 8007f50:	3904      	subs	r1, #4
 8007f52:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f56:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f5a:	459c      	cmp	ip, r3
 8007f5c:	d8f9      	bhi.n	8007f52 <__lshift+0x9a>
 8007f5e:	e7e4      	b.n	8007f2a <__lshift+0x72>

08007f60 <__mcmp>:
 8007f60:	6903      	ldr	r3, [r0, #16]
 8007f62:	690a      	ldr	r2, [r1, #16]
 8007f64:	1a9b      	subs	r3, r3, r2
 8007f66:	b530      	push	{r4, r5, lr}
 8007f68:	d10c      	bne.n	8007f84 <__mcmp+0x24>
 8007f6a:	0092      	lsls	r2, r2, #2
 8007f6c:	3014      	adds	r0, #20
 8007f6e:	3114      	adds	r1, #20
 8007f70:	1884      	adds	r4, r0, r2
 8007f72:	4411      	add	r1, r2
 8007f74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f7c:	4295      	cmp	r5, r2
 8007f7e:	d003      	beq.n	8007f88 <__mcmp+0x28>
 8007f80:	d305      	bcc.n	8007f8e <__mcmp+0x2e>
 8007f82:	2301      	movs	r3, #1
 8007f84:	4618      	mov	r0, r3
 8007f86:	bd30      	pop	{r4, r5, pc}
 8007f88:	42a0      	cmp	r0, r4
 8007f8a:	d3f3      	bcc.n	8007f74 <__mcmp+0x14>
 8007f8c:	e7fa      	b.n	8007f84 <__mcmp+0x24>
 8007f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f92:	e7f7      	b.n	8007f84 <__mcmp+0x24>

08007f94 <__mdiff>:
 8007f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f98:	460d      	mov	r5, r1
 8007f9a:	4607      	mov	r7, r0
 8007f9c:	4611      	mov	r1, r2
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	4614      	mov	r4, r2
 8007fa2:	f7ff ffdd 	bl	8007f60 <__mcmp>
 8007fa6:	1e06      	subs	r6, r0, #0
 8007fa8:	d108      	bne.n	8007fbc <__mdiff+0x28>
 8007faa:	4631      	mov	r1, r6
 8007fac:	4638      	mov	r0, r7
 8007fae:	f7ff fdc1 	bl	8007b34 <_Balloc>
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fbc:	bfa4      	itt	ge
 8007fbe:	4623      	movge	r3, r4
 8007fc0:	462c      	movge	r4, r5
 8007fc2:	4638      	mov	r0, r7
 8007fc4:	6861      	ldr	r1, [r4, #4]
 8007fc6:	bfa6      	itte	ge
 8007fc8:	461d      	movge	r5, r3
 8007fca:	2600      	movge	r6, #0
 8007fcc:	2601      	movlt	r6, #1
 8007fce:	f7ff fdb1 	bl	8007b34 <_Balloc>
 8007fd2:	692b      	ldr	r3, [r5, #16]
 8007fd4:	60c6      	str	r6, [r0, #12]
 8007fd6:	6926      	ldr	r6, [r4, #16]
 8007fd8:	f105 0914 	add.w	r9, r5, #20
 8007fdc:	f104 0214 	add.w	r2, r4, #20
 8007fe0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007fe4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007fe8:	f100 0514 	add.w	r5, r0, #20
 8007fec:	f04f 0e00 	mov.w	lr, #0
 8007ff0:	f852 ab04 	ldr.w	sl, [r2], #4
 8007ff4:	f859 4b04 	ldr.w	r4, [r9], #4
 8007ff8:	fa1e f18a 	uxtah	r1, lr, sl
 8007ffc:	b2a3      	uxth	r3, r4
 8007ffe:	1ac9      	subs	r1, r1, r3
 8008000:	0c23      	lsrs	r3, r4, #16
 8008002:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008006:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800800a:	b289      	uxth	r1, r1
 800800c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008010:	45c8      	cmp	r8, r9
 8008012:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008016:	4694      	mov	ip, r2
 8008018:	f845 3b04 	str.w	r3, [r5], #4
 800801c:	d8e8      	bhi.n	8007ff0 <__mdiff+0x5c>
 800801e:	45bc      	cmp	ip, r7
 8008020:	d304      	bcc.n	800802c <__mdiff+0x98>
 8008022:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008026:	b183      	cbz	r3, 800804a <__mdiff+0xb6>
 8008028:	6106      	str	r6, [r0, #16]
 800802a:	e7c5      	b.n	8007fb8 <__mdiff+0x24>
 800802c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008030:	fa1e f381 	uxtah	r3, lr, r1
 8008034:	141a      	asrs	r2, r3, #16
 8008036:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800803a:	b29b      	uxth	r3, r3
 800803c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008040:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008044:	f845 3b04 	str.w	r3, [r5], #4
 8008048:	e7e9      	b.n	800801e <__mdiff+0x8a>
 800804a:	3e01      	subs	r6, #1
 800804c:	e7e9      	b.n	8008022 <__mdiff+0x8e>

0800804e <__d2b>:
 800804e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008052:	460e      	mov	r6, r1
 8008054:	2101      	movs	r1, #1
 8008056:	ec59 8b10 	vmov	r8, r9, d0
 800805a:	4615      	mov	r5, r2
 800805c:	f7ff fd6a 	bl	8007b34 <_Balloc>
 8008060:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008064:	4607      	mov	r7, r0
 8008066:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800806a:	bb34      	cbnz	r4, 80080ba <__d2b+0x6c>
 800806c:	9301      	str	r3, [sp, #4]
 800806e:	f1b8 0300 	subs.w	r3, r8, #0
 8008072:	d027      	beq.n	80080c4 <__d2b+0x76>
 8008074:	a802      	add	r0, sp, #8
 8008076:	f840 3d08 	str.w	r3, [r0, #-8]!
 800807a:	f7ff fe00 	bl	8007c7e <__lo0bits>
 800807e:	9900      	ldr	r1, [sp, #0]
 8008080:	b1f0      	cbz	r0, 80080c0 <__d2b+0x72>
 8008082:	9a01      	ldr	r2, [sp, #4]
 8008084:	f1c0 0320 	rsb	r3, r0, #32
 8008088:	fa02 f303 	lsl.w	r3, r2, r3
 800808c:	430b      	orrs	r3, r1
 800808e:	40c2      	lsrs	r2, r0
 8008090:	617b      	str	r3, [r7, #20]
 8008092:	9201      	str	r2, [sp, #4]
 8008094:	9b01      	ldr	r3, [sp, #4]
 8008096:	61bb      	str	r3, [r7, #24]
 8008098:	2b00      	cmp	r3, #0
 800809a:	bf14      	ite	ne
 800809c:	2102      	movne	r1, #2
 800809e:	2101      	moveq	r1, #1
 80080a0:	6139      	str	r1, [r7, #16]
 80080a2:	b1c4      	cbz	r4, 80080d6 <__d2b+0x88>
 80080a4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80080a8:	4404      	add	r4, r0
 80080aa:	6034      	str	r4, [r6, #0]
 80080ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80080b0:	6028      	str	r0, [r5, #0]
 80080b2:	4638      	mov	r0, r7
 80080b4:	b003      	add	sp, #12
 80080b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080be:	e7d5      	b.n	800806c <__d2b+0x1e>
 80080c0:	6179      	str	r1, [r7, #20]
 80080c2:	e7e7      	b.n	8008094 <__d2b+0x46>
 80080c4:	a801      	add	r0, sp, #4
 80080c6:	f7ff fdda 	bl	8007c7e <__lo0bits>
 80080ca:	9b01      	ldr	r3, [sp, #4]
 80080cc:	617b      	str	r3, [r7, #20]
 80080ce:	2101      	movs	r1, #1
 80080d0:	6139      	str	r1, [r7, #16]
 80080d2:	3020      	adds	r0, #32
 80080d4:	e7e5      	b.n	80080a2 <__d2b+0x54>
 80080d6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80080da:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80080de:	6030      	str	r0, [r6, #0]
 80080e0:	6918      	ldr	r0, [r3, #16]
 80080e2:	f7ff fdad 	bl	8007c40 <__hi0bits>
 80080e6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80080ea:	e7e1      	b.n	80080b0 <__d2b+0x62>

080080ec <_calloc_r>:
 80080ec:	b538      	push	{r3, r4, r5, lr}
 80080ee:	fb02 f401 	mul.w	r4, r2, r1
 80080f2:	4621      	mov	r1, r4
 80080f4:	f000 f856 	bl	80081a4 <_malloc_r>
 80080f8:	4605      	mov	r5, r0
 80080fa:	b118      	cbz	r0, 8008104 <_calloc_r+0x18>
 80080fc:	4622      	mov	r2, r4
 80080fe:	2100      	movs	r1, #0
 8008100:	f7fe fa27 	bl	8006552 <memset>
 8008104:	4628      	mov	r0, r5
 8008106:	bd38      	pop	{r3, r4, r5, pc}

08008108 <_free_r>:
 8008108:	b538      	push	{r3, r4, r5, lr}
 800810a:	4605      	mov	r5, r0
 800810c:	2900      	cmp	r1, #0
 800810e:	d045      	beq.n	800819c <_free_r+0x94>
 8008110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008114:	1f0c      	subs	r4, r1, #4
 8008116:	2b00      	cmp	r3, #0
 8008118:	bfb8      	it	lt
 800811a:	18e4      	addlt	r4, r4, r3
 800811c:	f000 fa29 	bl	8008572 <__malloc_lock>
 8008120:	4a1f      	ldr	r2, [pc, #124]	; (80081a0 <_free_r+0x98>)
 8008122:	6813      	ldr	r3, [r2, #0]
 8008124:	4610      	mov	r0, r2
 8008126:	b933      	cbnz	r3, 8008136 <_free_r+0x2e>
 8008128:	6063      	str	r3, [r4, #4]
 800812a:	6014      	str	r4, [r2, #0]
 800812c:	4628      	mov	r0, r5
 800812e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008132:	f000 ba1f 	b.w	8008574 <__malloc_unlock>
 8008136:	42a3      	cmp	r3, r4
 8008138:	d90c      	bls.n	8008154 <_free_r+0x4c>
 800813a:	6821      	ldr	r1, [r4, #0]
 800813c:	1862      	adds	r2, r4, r1
 800813e:	4293      	cmp	r3, r2
 8008140:	bf04      	itt	eq
 8008142:	681a      	ldreq	r2, [r3, #0]
 8008144:	685b      	ldreq	r3, [r3, #4]
 8008146:	6063      	str	r3, [r4, #4]
 8008148:	bf04      	itt	eq
 800814a:	1852      	addeq	r2, r2, r1
 800814c:	6022      	streq	r2, [r4, #0]
 800814e:	6004      	str	r4, [r0, #0]
 8008150:	e7ec      	b.n	800812c <_free_r+0x24>
 8008152:	4613      	mov	r3, r2
 8008154:	685a      	ldr	r2, [r3, #4]
 8008156:	b10a      	cbz	r2, 800815c <_free_r+0x54>
 8008158:	42a2      	cmp	r2, r4
 800815a:	d9fa      	bls.n	8008152 <_free_r+0x4a>
 800815c:	6819      	ldr	r1, [r3, #0]
 800815e:	1858      	adds	r0, r3, r1
 8008160:	42a0      	cmp	r0, r4
 8008162:	d10b      	bne.n	800817c <_free_r+0x74>
 8008164:	6820      	ldr	r0, [r4, #0]
 8008166:	4401      	add	r1, r0
 8008168:	1858      	adds	r0, r3, r1
 800816a:	4282      	cmp	r2, r0
 800816c:	6019      	str	r1, [r3, #0]
 800816e:	d1dd      	bne.n	800812c <_free_r+0x24>
 8008170:	6810      	ldr	r0, [r2, #0]
 8008172:	6852      	ldr	r2, [r2, #4]
 8008174:	605a      	str	r2, [r3, #4]
 8008176:	4401      	add	r1, r0
 8008178:	6019      	str	r1, [r3, #0]
 800817a:	e7d7      	b.n	800812c <_free_r+0x24>
 800817c:	d902      	bls.n	8008184 <_free_r+0x7c>
 800817e:	230c      	movs	r3, #12
 8008180:	602b      	str	r3, [r5, #0]
 8008182:	e7d3      	b.n	800812c <_free_r+0x24>
 8008184:	6820      	ldr	r0, [r4, #0]
 8008186:	1821      	adds	r1, r4, r0
 8008188:	428a      	cmp	r2, r1
 800818a:	bf04      	itt	eq
 800818c:	6811      	ldreq	r1, [r2, #0]
 800818e:	6852      	ldreq	r2, [r2, #4]
 8008190:	6062      	str	r2, [r4, #4]
 8008192:	bf04      	itt	eq
 8008194:	1809      	addeq	r1, r1, r0
 8008196:	6021      	streq	r1, [r4, #0]
 8008198:	605c      	str	r4, [r3, #4]
 800819a:	e7c7      	b.n	800812c <_free_r+0x24>
 800819c:	bd38      	pop	{r3, r4, r5, pc}
 800819e:	bf00      	nop
 80081a0:	20000234 	.word	0x20000234

080081a4 <_malloc_r>:
 80081a4:	b570      	push	{r4, r5, r6, lr}
 80081a6:	1ccd      	adds	r5, r1, #3
 80081a8:	f025 0503 	bic.w	r5, r5, #3
 80081ac:	3508      	adds	r5, #8
 80081ae:	2d0c      	cmp	r5, #12
 80081b0:	bf38      	it	cc
 80081b2:	250c      	movcc	r5, #12
 80081b4:	2d00      	cmp	r5, #0
 80081b6:	4606      	mov	r6, r0
 80081b8:	db01      	blt.n	80081be <_malloc_r+0x1a>
 80081ba:	42a9      	cmp	r1, r5
 80081bc:	d903      	bls.n	80081c6 <_malloc_r+0x22>
 80081be:	230c      	movs	r3, #12
 80081c0:	6033      	str	r3, [r6, #0]
 80081c2:	2000      	movs	r0, #0
 80081c4:	bd70      	pop	{r4, r5, r6, pc}
 80081c6:	f000 f9d4 	bl	8008572 <__malloc_lock>
 80081ca:	4a21      	ldr	r2, [pc, #132]	; (8008250 <_malloc_r+0xac>)
 80081cc:	6814      	ldr	r4, [r2, #0]
 80081ce:	4621      	mov	r1, r4
 80081d0:	b991      	cbnz	r1, 80081f8 <_malloc_r+0x54>
 80081d2:	4c20      	ldr	r4, [pc, #128]	; (8008254 <_malloc_r+0xb0>)
 80081d4:	6823      	ldr	r3, [r4, #0]
 80081d6:	b91b      	cbnz	r3, 80081e0 <_malloc_r+0x3c>
 80081d8:	4630      	mov	r0, r6
 80081da:	f000 f98f 	bl	80084fc <_sbrk_r>
 80081de:	6020      	str	r0, [r4, #0]
 80081e0:	4629      	mov	r1, r5
 80081e2:	4630      	mov	r0, r6
 80081e4:	f000 f98a 	bl	80084fc <_sbrk_r>
 80081e8:	1c43      	adds	r3, r0, #1
 80081ea:	d124      	bne.n	8008236 <_malloc_r+0x92>
 80081ec:	230c      	movs	r3, #12
 80081ee:	6033      	str	r3, [r6, #0]
 80081f0:	4630      	mov	r0, r6
 80081f2:	f000 f9bf 	bl	8008574 <__malloc_unlock>
 80081f6:	e7e4      	b.n	80081c2 <_malloc_r+0x1e>
 80081f8:	680b      	ldr	r3, [r1, #0]
 80081fa:	1b5b      	subs	r3, r3, r5
 80081fc:	d418      	bmi.n	8008230 <_malloc_r+0x8c>
 80081fe:	2b0b      	cmp	r3, #11
 8008200:	d90f      	bls.n	8008222 <_malloc_r+0x7e>
 8008202:	600b      	str	r3, [r1, #0]
 8008204:	50cd      	str	r5, [r1, r3]
 8008206:	18cc      	adds	r4, r1, r3
 8008208:	4630      	mov	r0, r6
 800820a:	f000 f9b3 	bl	8008574 <__malloc_unlock>
 800820e:	f104 000b 	add.w	r0, r4, #11
 8008212:	1d23      	adds	r3, r4, #4
 8008214:	f020 0007 	bic.w	r0, r0, #7
 8008218:	1ac3      	subs	r3, r0, r3
 800821a:	d0d3      	beq.n	80081c4 <_malloc_r+0x20>
 800821c:	425a      	negs	r2, r3
 800821e:	50e2      	str	r2, [r4, r3]
 8008220:	e7d0      	b.n	80081c4 <_malloc_r+0x20>
 8008222:	428c      	cmp	r4, r1
 8008224:	684b      	ldr	r3, [r1, #4]
 8008226:	bf16      	itet	ne
 8008228:	6063      	strne	r3, [r4, #4]
 800822a:	6013      	streq	r3, [r2, #0]
 800822c:	460c      	movne	r4, r1
 800822e:	e7eb      	b.n	8008208 <_malloc_r+0x64>
 8008230:	460c      	mov	r4, r1
 8008232:	6849      	ldr	r1, [r1, #4]
 8008234:	e7cc      	b.n	80081d0 <_malloc_r+0x2c>
 8008236:	1cc4      	adds	r4, r0, #3
 8008238:	f024 0403 	bic.w	r4, r4, #3
 800823c:	42a0      	cmp	r0, r4
 800823e:	d005      	beq.n	800824c <_malloc_r+0xa8>
 8008240:	1a21      	subs	r1, r4, r0
 8008242:	4630      	mov	r0, r6
 8008244:	f000 f95a 	bl	80084fc <_sbrk_r>
 8008248:	3001      	adds	r0, #1
 800824a:	d0cf      	beq.n	80081ec <_malloc_r+0x48>
 800824c:	6025      	str	r5, [r4, #0]
 800824e:	e7db      	b.n	8008208 <_malloc_r+0x64>
 8008250:	20000234 	.word	0x20000234
 8008254:	20000238 	.word	0x20000238

08008258 <__ssputs_r>:
 8008258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800825c:	688e      	ldr	r6, [r1, #8]
 800825e:	429e      	cmp	r6, r3
 8008260:	4682      	mov	sl, r0
 8008262:	460c      	mov	r4, r1
 8008264:	4690      	mov	r8, r2
 8008266:	4699      	mov	r9, r3
 8008268:	d837      	bhi.n	80082da <__ssputs_r+0x82>
 800826a:	898a      	ldrh	r2, [r1, #12]
 800826c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008270:	d031      	beq.n	80082d6 <__ssputs_r+0x7e>
 8008272:	6825      	ldr	r5, [r4, #0]
 8008274:	6909      	ldr	r1, [r1, #16]
 8008276:	1a6f      	subs	r7, r5, r1
 8008278:	6965      	ldr	r5, [r4, #20]
 800827a:	2302      	movs	r3, #2
 800827c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008280:	fb95 f5f3 	sdiv	r5, r5, r3
 8008284:	f109 0301 	add.w	r3, r9, #1
 8008288:	443b      	add	r3, r7
 800828a:	429d      	cmp	r5, r3
 800828c:	bf38      	it	cc
 800828e:	461d      	movcc	r5, r3
 8008290:	0553      	lsls	r3, r2, #21
 8008292:	d530      	bpl.n	80082f6 <__ssputs_r+0x9e>
 8008294:	4629      	mov	r1, r5
 8008296:	f7ff ff85 	bl	80081a4 <_malloc_r>
 800829a:	4606      	mov	r6, r0
 800829c:	b950      	cbnz	r0, 80082b4 <__ssputs_r+0x5c>
 800829e:	230c      	movs	r3, #12
 80082a0:	f8ca 3000 	str.w	r3, [sl]
 80082a4:	89a3      	ldrh	r3, [r4, #12]
 80082a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082aa:	81a3      	strh	r3, [r4, #12]
 80082ac:	f04f 30ff 	mov.w	r0, #4294967295
 80082b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b4:	463a      	mov	r2, r7
 80082b6:	6921      	ldr	r1, [r4, #16]
 80082b8:	f7fe f940 	bl	800653c <memcpy>
 80082bc:	89a3      	ldrh	r3, [r4, #12]
 80082be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082c6:	81a3      	strh	r3, [r4, #12]
 80082c8:	6126      	str	r6, [r4, #16]
 80082ca:	6165      	str	r5, [r4, #20]
 80082cc:	443e      	add	r6, r7
 80082ce:	1bed      	subs	r5, r5, r7
 80082d0:	6026      	str	r6, [r4, #0]
 80082d2:	60a5      	str	r5, [r4, #8]
 80082d4:	464e      	mov	r6, r9
 80082d6:	454e      	cmp	r6, r9
 80082d8:	d900      	bls.n	80082dc <__ssputs_r+0x84>
 80082da:	464e      	mov	r6, r9
 80082dc:	4632      	mov	r2, r6
 80082de:	4641      	mov	r1, r8
 80082e0:	6820      	ldr	r0, [r4, #0]
 80082e2:	f000 f92d 	bl	8008540 <memmove>
 80082e6:	68a3      	ldr	r3, [r4, #8]
 80082e8:	1b9b      	subs	r3, r3, r6
 80082ea:	60a3      	str	r3, [r4, #8]
 80082ec:	6823      	ldr	r3, [r4, #0]
 80082ee:	441e      	add	r6, r3
 80082f0:	6026      	str	r6, [r4, #0]
 80082f2:	2000      	movs	r0, #0
 80082f4:	e7dc      	b.n	80082b0 <__ssputs_r+0x58>
 80082f6:	462a      	mov	r2, r5
 80082f8:	f000 f93d 	bl	8008576 <_realloc_r>
 80082fc:	4606      	mov	r6, r0
 80082fe:	2800      	cmp	r0, #0
 8008300:	d1e2      	bne.n	80082c8 <__ssputs_r+0x70>
 8008302:	6921      	ldr	r1, [r4, #16]
 8008304:	4650      	mov	r0, sl
 8008306:	f7ff feff 	bl	8008108 <_free_r>
 800830a:	e7c8      	b.n	800829e <__ssputs_r+0x46>

0800830c <_svfiprintf_r>:
 800830c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008310:	461d      	mov	r5, r3
 8008312:	898b      	ldrh	r3, [r1, #12]
 8008314:	061f      	lsls	r7, r3, #24
 8008316:	b09d      	sub	sp, #116	; 0x74
 8008318:	4680      	mov	r8, r0
 800831a:	460c      	mov	r4, r1
 800831c:	4616      	mov	r6, r2
 800831e:	d50f      	bpl.n	8008340 <_svfiprintf_r+0x34>
 8008320:	690b      	ldr	r3, [r1, #16]
 8008322:	b96b      	cbnz	r3, 8008340 <_svfiprintf_r+0x34>
 8008324:	2140      	movs	r1, #64	; 0x40
 8008326:	f7ff ff3d 	bl	80081a4 <_malloc_r>
 800832a:	6020      	str	r0, [r4, #0]
 800832c:	6120      	str	r0, [r4, #16]
 800832e:	b928      	cbnz	r0, 800833c <_svfiprintf_r+0x30>
 8008330:	230c      	movs	r3, #12
 8008332:	f8c8 3000 	str.w	r3, [r8]
 8008336:	f04f 30ff 	mov.w	r0, #4294967295
 800833a:	e0c8      	b.n	80084ce <_svfiprintf_r+0x1c2>
 800833c:	2340      	movs	r3, #64	; 0x40
 800833e:	6163      	str	r3, [r4, #20]
 8008340:	2300      	movs	r3, #0
 8008342:	9309      	str	r3, [sp, #36]	; 0x24
 8008344:	2320      	movs	r3, #32
 8008346:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800834a:	2330      	movs	r3, #48	; 0x30
 800834c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008350:	9503      	str	r5, [sp, #12]
 8008352:	f04f 0b01 	mov.w	fp, #1
 8008356:	4637      	mov	r7, r6
 8008358:	463d      	mov	r5, r7
 800835a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800835e:	b10b      	cbz	r3, 8008364 <_svfiprintf_r+0x58>
 8008360:	2b25      	cmp	r3, #37	; 0x25
 8008362:	d13e      	bne.n	80083e2 <_svfiprintf_r+0xd6>
 8008364:	ebb7 0a06 	subs.w	sl, r7, r6
 8008368:	d00b      	beq.n	8008382 <_svfiprintf_r+0x76>
 800836a:	4653      	mov	r3, sl
 800836c:	4632      	mov	r2, r6
 800836e:	4621      	mov	r1, r4
 8008370:	4640      	mov	r0, r8
 8008372:	f7ff ff71 	bl	8008258 <__ssputs_r>
 8008376:	3001      	adds	r0, #1
 8008378:	f000 80a4 	beq.w	80084c4 <_svfiprintf_r+0x1b8>
 800837c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800837e:	4453      	add	r3, sl
 8008380:	9309      	str	r3, [sp, #36]	; 0x24
 8008382:	783b      	ldrb	r3, [r7, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	f000 809d 	beq.w	80084c4 <_svfiprintf_r+0x1b8>
 800838a:	2300      	movs	r3, #0
 800838c:	f04f 32ff 	mov.w	r2, #4294967295
 8008390:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008394:	9304      	str	r3, [sp, #16]
 8008396:	9307      	str	r3, [sp, #28]
 8008398:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800839c:	931a      	str	r3, [sp, #104]	; 0x68
 800839e:	462f      	mov	r7, r5
 80083a0:	2205      	movs	r2, #5
 80083a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80083a6:	4850      	ldr	r0, [pc, #320]	; (80084e8 <_svfiprintf_r+0x1dc>)
 80083a8:	f7f7 ff2a 	bl	8000200 <memchr>
 80083ac:	9b04      	ldr	r3, [sp, #16]
 80083ae:	b9d0      	cbnz	r0, 80083e6 <_svfiprintf_r+0xda>
 80083b0:	06d9      	lsls	r1, r3, #27
 80083b2:	bf44      	itt	mi
 80083b4:	2220      	movmi	r2, #32
 80083b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80083ba:	071a      	lsls	r2, r3, #28
 80083bc:	bf44      	itt	mi
 80083be:	222b      	movmi	r2, #43	; 0x2b
 80083c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80083c4:	782a      	ldrb	r2, [r5, #0]
 80083c6:	2a2a      	cmp	r2, #42	; 0x2a
 80083c8:	d015      	beq.n	80083f6 <_svfiprintf_r+0xea>
 80083ca:	9a07      	ldr	r2, [sp, #28]
 80083cc:	462f      	mov	r7, r5
 80083ce:	2000      	movs	r0, #0
 80083d0:	250a      	movs	r5, #10
 80083d2:	4639      	mov	r1, r7
 80083d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083d8:	3b30      	subs	r3, #48	; 0x30
 80083da:	2b09      	cmp	r3, #9
 80083dc:	d94d      	bls.n	800847a <_svfiprintf_r+0x16e>
 80083de:	b1b8      	cbz	r0, 8008410 <_svfiprintf_r+0x104>
 80083e0:	e00f      	b.n	8008402 <_svfiprintf_r+0xf6>
 80083e2:	462f      	mov	r7, r5
 80083e4:	e7b8      	b.n	8008358 <_svfiprintf_r+0x4c>
 80083e6:	4a40      	ldr	r2, [pc, #256]	; (80084e8 <_svfiprintf_r+0x1dc>)
 80083e8:	1a80      	subs	r0, r0, r2
 80083ea:	fa0b f000 	lsl.w	r0, fp, r0
 80083ee:	4318      	orrs	r0, r3
 80083f0:	9004      	str	r0, [sp, #16]
 80083f2:	463d      	mov	r5, r7
 80083f4:	e7d3      	b.n	800839e <_svfiprintf_r+0x92>
 80083f6:	9a03      	ldr	r2, [sp, #12]
 80083f8:	1d11      	adds	r1, r2, #4
 80083fa:	6812      	ldr	r2, [r2, #0]
 80083fc:	9103      	str	r1, [sp, #12]
 80083fe:	2a00      	cmp	r2, #0
 8008400:	db01      	blt.n	8008406 <_svfiprintf_r+0xfa>
 8008402:	9207      	str	r2, [sp, #28]
 8008404:	e004      	b.n	8008410 <_svfiprintf_r+0x104>
 8008406:	4252      	negs	r2, r2
 8008408:	f043 0302 	orr.w	r3, r3, #2
 800840c:	9207      	str	r2, [sp, #28]
 800840e:	9304      	str	r3, [sp, #16]
 8008410:	783b      	ldrb	r3, [r7, #0]
 8008412:	2b2e      	cmp	r3, #46	; 0x2e
 8008414:	d10c      	bne.n	8008430 <_svfiprintf_r+0x124>
 8008416:	787b      	ldrb	r3, [r7, #1]
 8008418:	2b2a      	cmp	r3, #42	; 0x2a
 800841a:	d133      	bne.n	8008484 <_svfiprintf_r+0x178>
 800841c:	9b03      	ldr	r3, [sp, #12]
 800841e:	1d1a      	adds	r2, r3, #4
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	9203      	str	r2, [sp, #12]
 8008424:	2b00      	cmp	r3, #0
 8008426:	bfb8      	it	lt
 8008428:	f04f 33ff 	movlt.w	r3, #4294967295
 800842c:	3702      	adds	r7, #2
 800842e:	9305      	str	r3, [sp, #20]
 8008430:	4d2e      	ldr	r5, [pc, #184]	; (80084ec <_svfiprintf_r+0x1e0>)
 8008432:	7839      	ldrb	r1, [r7, #0]
 8008434:	2203      	movs	r2, #3
 8008436:	4628      	mov	r0, r5
 8008438:	f7f7 fee2 	bl	8000200 <memchr>
 800843c:	b138      	cbz	r0, 800844e <_svfiprintf_r+0x142>
 800843e:	2340      	movs	r3, #64	; 0x40
 8008440:	1b40      	subs	r0, r0, r5
 8008442:	fa03 f000 	lsl.w	r0, r3, r0
 8008446:	9b04      	ldr	r3, [sp, #16]
 8008448:	4303      	orrs	r3, r0
 800844a:	3701      	adds	r7, #1
 800844c:	9304      	str	r3, [sp, #16]
 800844e:	7839      	ldrb	r1, [r7, #0]
 8008450:	4827      	ldr	r0, [pc, #156]	; (80084f0 <_svfiprintf_r+0x1e4>)
 8008452:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008456:	2206      	movs	r2, #6
 8008458:	1c7e      	adds	r6, r7, #1
 800845a:	f7f7 fed1 	bl	8000200 <memchr>
 800845e:	2800      	cmp	r0, #0
 8008460:	d038      	beq.n	80084d4 <_svfiprintf_r+0x1c8>
 8008462:	4b24      	ldr	r3, [pc, #144]	; (80084f4 <_svfiprintf_r+0x1e8>)
 8008464:	bb13      	cbnz	r3, 80084ac <_svfiprintf_r+0x1a0>
 8008466:	9b03      	ldr	r3, [sp, #12]
 8008468:	3307      	adds	r3, #7
 800846a:	f023 0307 	bic.w	r3, r3, #7
 800846e:	3308      	adds	r3, #8
 8008470:	9303      	str	r3, [sp, #12]
 8008472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008474:	444b      	add	r3, r9
 8008476:	9309      	str	r3, [sp, #36]	; 0x24
 8008478:	e76d      	b.n	8008356 <_svfiprintf_r+0x4a>
 800847a:	fb05 3202 	mla	r2, r5, r2, r3
 800847e:	2001      	movs	r0, #1
 8008480:	460f      	mov	r7, r1
 8008482:	e7a6      	b.n	80083d2 <_svfiprintf_r+0xc6>
 8008484:	2300      	movs	r3, #0
 8008486:	3701      	adds	r7, #1
 8008488:	9305      	str	r3, [sp, #20]
 800848a:	4619      	mov	r1, r3
 800848c:	250a      	movs	r5, #10
 800848e:	4638      	mov	r0, r7
 8008490:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008494:	3a30      	subs	r2, #48	; 0x30
 8008496:	2a09      	cmp	r2, #9
 8008498:	d903      	bls.n	80084a2 <_svfiprintf_r+0x196>
 800849a:	2b00      	cmp	r3, #0
 800849c:	d0c8      	beq.n	8008430 <_svfiprintf_r+0x124>
 800849e:	9105      	str	r1, [sp, #20]
 80084a0:	e7c6      	b.n	8008430 <_svfiprintf_r+0x124>
 80084a2:	fb05 2101 	mla	r1, r5, r1, r2
 80084a6:	2301      	movs	r3, #1
 80084a8:	4607      	mov	r7, r0
 80084aa:	e7f0      	b.n	800848e <_svfiprintf_r+0x182>
 80084ac:	ab03      	add	r3, sp, #12
 80084ae:	9300      	str	r3, [sp, #0]
 80084b0:	4622      	mov	r2, r4
 80084b2:	4b11      	ldr	r3, [pc, #68]	; (80084f8 <_svfiprintf_r+0x1ec>)
 80084b4:	a904      	add	r1, sp, #16
 80084b6:	4640      	mov	r0, r8
 80084b8:	f7fe f8e8 	bl	800668c <_printf_float>
 80084bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80084c0:	4681      	mov	r9, r0
 80084c2:	d1d6      	bne.n	8008472 <_svfiprintf_r+0x166>
 80084c4:	89a3      	ldrh	r3, [r4, #12]
 80084c6:	065b      	lsls	r3, r3, #25
 80084c8:	f53f af35 	bmi.w	8008336 <_svfiprintf_r+0x2a>
 80084cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084ce:	b01d      	add	sp, #116	; 0x74
 80084d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084d4:	ab03      	add	r3, sp, #12
 80084d6:	9300      	str	r3, [sp, #0]
 80084d8:	4622      	mov	r2, r4
 80084da:	4b07      	ldr	r3, [pc, #28]	; (80084f8 <_svfiprintf_r+0x1ec>)
 80084dc:	a904      	add	r1, sp, #16
 80084de:	4640      	mov	r0, r8
 80084e0:	f7fe fb8a 	bl	8006bf8 <_printf_i>
 80084e4:	e7ea      	b.n	80084bc <_svfiprintf_r+0x1b0>
 80084e6:	bf00      	nop
 80084e8:	08009074 	.word	0x08009074
 80084ec:	0800907a 	.word	0x0800907a
 80084f0:	0800907e 	.word	0x0800907e
 80084f4:	0800668d 	.word	0x0800668d
 80084f8:	08008259 	.word	0x08008259

080084fc <_sbrk_r>:
 80084fc:	b538      	push	{r3, r4, r5, lr}
 80084fe:	4c06      	ldr	r4, [pc, #24]	; (8008518 <_sbrk_r+0x1c>)
 8008500:	2300      	movs	r3, #0
 8008502:	4605      	mov	r5, r0
 8008504:	4608      	mov	r0, r1
 8008506:	6023      	str	r3, [r4, #0]
 8008508:	f7f9 fe14 	bl	8002134 <_sbrk>
 800850c:	1c43      	adds	r3, r0, #1
 800850e:	d102      	bne.n	8008516 <_sbrk_r+0x1a>
 8008510:	6823      	ldr	r3, [r4, #0]
 8008512:	b103      	cbz	r3, 8008516 <_sbrk_r+0x1a>
 8008514:	602b      	str	r3, [r5, #0]
 8008516:	bd38      	pop	{r3, r4, r5, pc}
 8008518:	20000570 	.word	0x20000570

0800851c <__ascii_mbtowc>:
 800851c:	b082      	sub	sp, #8
 800851e:	b901      	cbnz	r1, 8008522 <__ascii_mbtowc+0x6>
 8008520:	a901      	add	r1, sp, #4
 8008522:	b142      	cbz	r2, 8008536 <__ascii_mbtowc+0x1a>
 8008524:	b14b      	cbz	r3, 800853a <__ascii_mbtowc+0x1e>
 8008526:	7813      	ldrb	r3, [r2, #0]
 8008528:	600b      	str	r3, [r1, #0]
 800852a:	7812      	ldrb	r2, [r2, #0]
 800852c:	1c10      	adds	r0, r2, #0
 800852e:	bf18      	it	ne
 8008530:	2001      	movne	r0, #1
 8008532:	b002      	add	sp, #8
 8008534:	4770      	bx	lr
 8008536:	4610      	mov	r0, r2
 8008538:	e7fb      	b.n	8008532 <__ascii_mbtowc+0x16>
 800853a:	f06f 0001 	mvn.w	r0, #1
 800853e:	e7f8      	b.n	8008532 <__ascii_mbtowc+0x16>

08008540 <memmove>:
 8008540:	4288      	cmp	r0, r1
 8008542:	b510      	push	{r4, lr}
 8008544:	eb01 0302 	add.w	r3, r1, r2
 8008548:	d807      	bhi.n	800855a <memmove+0x1a>
 800854a:	1e42      	subs	r2, r0, #1
 800854c:	4299      	cmp	r1, r3
 800854e:	d00a      	beq.n	8008566 <memmove+0x26>
 8008550:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008554:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008558:	e7f8      	b.n	800854c <memmove+0xc>
 800855a:	4283      	cmp	r3, r0
 800855c:	d9f5      	bls.n	800854a <memmove+0xa>
 800855e:	1881      	adds	r1, r0, r2
 8008560:	1ad2      	subs	r2, r2, r3
 8008562:	42d3      	cmn	r3, r2
 8008564:	d100      	bne.n	8008568 <memmove+0x28>
 8008566:	bd10      	pop	{r4, pc}
 8008568:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800856c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008570:	e7f7      	b.n	8008562 <memmove+0x22>

08008572 <__malloc_lock>:
 8008572:	4770      	bx	lr

08008574 <__malloc_unlock>:
 8008574:	4770      	bx	lr

08008576 <_realloc_r>:
 8008576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008578:	4607      	mov	r7, r0
 800857a:	4614      	mov	r4, r2
 800857c:	460e      	mov	r6, r1
 800857e:	b921      	cbnz	r1, 800858a <_realloc_r+0x14>
 8008580:	4611      	mov	r1, r2
 8008582:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008586:	f7ff be0d 	b.w	80081a4 <_malloc_r>
 800858a:	b922      	cbnz	r2, 8008596 <_realloc_r+0x20>
 800858c:	f7ff fdbc 	bl	8008108 <_free_r>
 8008590:	4625      	mov	r5, r4
 8008592:	4628      	mov	r0, r5
 8008594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008596:	f000 f821 	bl	80085dc <_malloc_usable_size_r>
 800859a:	42a0      	cmp	r0, r4
 800859c:	d20f      	bcs.n	80085be <_realloc_r+0x48>
 800859e:	4621      	mov	r1, r4
 80085a0:	4638      	mov	r0, r7
 80085a2:	f7ff fdff 	bl	80081a4 <_malloc_r>
 80085a6:	4605      	mov	r5, r0
 80085a8:	2800      	cmp	r0, #0
 80085aa:	d0f2      	beq.n	8008592 <_realloc_r+0x1c>
 80085ac:	4631      	mov	r1, r6
 80085ae:	4622      	mov	r2, r4
 80085b0:	f7fd ffc4 	bl	800653c <memcpy>
 80085b4:	4631      	mov	r1, r6
 80085b6:	4638      	mov	r0, r7
 80085b8:	f7ff fda6 	bl	8008108 <_free_r>
 80085bc:	e7e9      	b.n	8008592 <_realloc_r+0x1c>
 80085be:	4635      	mov	r5, r6
 80085c0:	e7e7      	b.n	8008592 <_realloc_r+0x1c>

080085c2 <__ascii_wctomb>:
 80085c2:	b149      	cbz	r1, 80085d8 <__ascii_wctomb+0x16>
 80085c4:	2aff      	cmp	r2, #255	; 0xff
 80085c6:	bf85      	ittet	hi
 80085c8:	238a      	movhi	r3, #138	; 0x8a
 80085ca:	6003      	strhi	r3, [r0, #0]
 80085cc:	700a      	strbls	r2, [r1, #0]
 80085ce:	f04f 30ff 	movhi.w	r0, #4294967295
 80085d2:	bf98      	it	ls
 80085d4:	2001      	movls	r0, #1
 80085d6:	4770      	bx	lr
 80085d8:	4608      	mov	r0, r1
 80085da:	4770      	bx	lr

080085dc <_malloc_usable_size_r>:
 80085dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085e0:	1f18      	subs	r0, r3, #4
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	bfbc      	itt	lt
 80085e6:	580b      	ldrlt	r3, [r1, r0]
 80085e8:	18c0      	addlt	r0, r0, r3
 80085ea:	4770      	bx	lr

080085ec <log>:
 80085ec:	b570      	push	{r4, r5, r6, lr}
 80085ee:	ed2d 8b02 	vpush	{d8}
 80085f2:	b08a      	sub	sp, #40	; 0x28
 80085f4:	ec55 4b10 	vmov	r4, r5, d0
 80085f8:	f000 f87a 	bl	80086f0 <__ieee754_log>
 80085fc:	4b36      	ldr	r3, [pc, #216]	; (80086d8 <log+0xec>)
 80085fe:	eeb0 8a40 	vmov.f32	s16, s0
 8008602:	eef0 8a60 	vmov.f32	s17, s1
 8008606:	f993 6000 	ldrsb.w	r6, [r3]
 800860a:	1c73      	adds	r3, r6, #1
 800860c:	d05b      	beq.n	80086c6 <log+0xda>
 800860e:	4622      	mov	r2, r4
 8008610:	462b      	mov	r3, r5
 8008612:	4620      	mov	r0, r4
 8008614:	4629      	mov	r1, r5
 8008616:	f7f8 fa99 	bl	8000b4c <__aeabi_dcmpun>
 800861a:	2800      	cmp	r0, #0
 800861c:	d153      	bne.n	80086c6 <log+0xda>
 800861e:	2200      	movs	r2, #0
 8008620:	2300      	movs	r3, #0
 8008622:	4620      	mov	r0, r4
 8008624:	4629      	mov	r1, r5
 8008626:	f7f8 fa87 	bl	8000b38 <__aeabi_dcmpgt>
 800862a:	2800      	cmp	r0, #0
 800862c:	d14b      	bne.n	80086c6 <log+0xda>
 800862e:	4b2b      	ldr	r3, [pc, #172]	; (80086dc <log+0xf0>)
 8008630:	9301      	str	r3, [sp, #4]
 8008632:	9008      	str	r0, [sp, #32]
 8008634:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008638:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800863c:	b9a6      	cbnz	r6, 8008668 <log+0x7c>
 800863e:	4b28      	ldr	r3, [pc, #160]	; (80086e0 <log+0xf4>)
 8008640:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008644:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008648:	4620      	mov	r0, r4
 800864a:	2200      	movs	r2, #0
 800864c:	2300      	movs	r3, #0
 800864e:	4629      	mov	r1, r5
 8008650:	f7f8 fa4a 	bl	8000ae8 <__aeabi_dcmpeq>
 8008654:	bb40      	cbnz	r0, 80086a8 <log+0xbc>
 8008656:	2301      	movs	r3, #1
 8008658:	2e02      	cmp	r6, #2
 800865a:	9300      	str	r3, [sp, #0]
 800865c:	d119      	bne.n	8008692 <log+0xa6>
 800865e:	f7fd ff43 	bl	80064e8 <__errno>
 8008662:	2321      	movs	r3, #33	; 0x21
 8008664:	6003      	str	r3, [r0, #0]
 8008666:	e019      	b.n	800869c <log+0xb0>
 8008668:	4b1e      	ldr	r3, [pc, #120]	; (80086e4 <log+0xf8>)
 800866a:	2200      	movs	r2, #0
 800866c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008670:	4620      	mov	r0, r4
 8008672:	2200      	movs	r2, #0
 8008674:	2300      	movs	r3, #0
 8008676:	4629      	mov	r1, r5
 8008678:	f7f8 fa36 	bl	8000ae8 <__aeabi_dcmpeq>
 800867c:	2800      	cmp	r0, #0
 800867e:	d0ea      	beq.n	8008656 <log+0x6a>
 8008680:	2302      	movs	r3, #2
 8008682:	429e      	cmp	r6, r3
 8008684:	9300      	str	r3, [sp, #0]
 8008686:	d111      	bne.n	80086ac <log+0xc0>
 8008688:	f7fd ff2e 	bl	80064e8 <__errno>
 800868c:	2322      	movs	r3, #34	; 0x22
 800868e:	6003      	str	r3, [r0, #0]
 8008690:	e011      	b.n	80086b6 <log+0xca>
 8008692:	4668      	mov	r0, sp
 8008694:	f000 f9de 	bl	8008a54 <matherr>
 8008698:	2800      	cmp	r0, #0
 800869a:	d0e0      	beq.n	800865e <log+0x72>
 800869c:	4812      	ldr	r0, [pc, #72]	; (80086e8 <log+0xfc>)
 800869e:	f000 f9db 	bl	8008a58 <nan>
 80086a2:	ed8d 0b06 	vstr	d0, [sp, #24]
 80086a6:	e006      	b.n	80086b6 <log+0xca>
 80086a8:	2302      	movs	r3, #2
 80086aa:	9300      	str	r3, [sp, #0]
 80086ac:	4668      	mov	r0, sp
 80086ae:	f000 f9d1 	bl	8008a54 <matherr>
 80086b2:	2800      	cmp	r0, #0
 80086b4:	d0e8      	beq.n	8008688 <log+0x9c>
 80086b6:	9b08      	ldr	r3, [sp, #32]
 80086b8:	b11b      	cbz	r3, 80086c2 <log+0xd6>
 80086ba:	f7fd ff15 	bl	80064e8 <__errno>
 80086be:	9b08      	ldr	r3, [sp, #32]
 80086c0:	6003      	str	r3, [r0, #0]
 80086c2:	ed9d 8b06 	vldr	d8, [sp, #24]
 80086c6:	eeb0 0a48 	vmov.f32	s0, s16
 80086ca:	eef0 0a68 	vmov.f32	s1, s17
 80086ce:	b00a      	add	sp, #40	; 0x28
 80086d0:	ecbd 8b02 	vpop	{d8}
 80086d4:	bd70      	pop	{r4, r5, r6, pc}
 80086d6:	bf00      	nop
 80086d8:	200001e8 	.word	0x200001e8
 80086dc:	08009190 	.word	0x08009190
 80086e0:	c7efffff 	.word	0xc7efffff
 80086e4:	fff00000 	.word	0xfff00000
 80086e8:	08009079 	.word	0x08009079
 80086ec:	00000000 	.word	0x00000000

080086f0 <__ieee754_log>:
 80086f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f4:	ec51 0b10 	vmov	r0, r1, d0
 80086f8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80086fc:	b087      	sub	sp, #28
 80086fe:	460d      	mov	r5, r1
 8008700:	da27      	bge.n	8008752 <__ieee754_log+0x62>
 8008702:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008706:	4303      	orrs	r3, r0
 8008708:	ee10 2a10 	vmov	r2, s0
 800870c:	d10a      	bne.n	8008724 <__ieee754_log+0x34>
 800870e:	49cc      	ldr	r1, [pc, #816]	; (8008a40 <__ieee754_log+0x350>)
 8008710:	2200      	movs	r2, #0
 8008712:	2300      	movs	r3, #0
 8008714:	2000      	movs	r0, #0
 8008716:	f7f8 f8a9 	bl	800086c <__aeabi_ddiv>
 800871a:	ec41 0b10 	vmov	d0, r0, r1
 800871e:	b007      	add	sp, #28
 8008720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008724:	2900      	cmp	r1, #0
 8008726:	da05      	bge.n	8008734 <__ieee754_log+0x44>
 8008728:	460b      	mov	r3, r1
 800872a:	f7f7 fdbd 	bl	80002a8 <__aeabi_dsub>
 800872e:	2200      	movs	r2, #0
 8008730:	2300      	movs	r3, #0
 8008732:	e7f0      	b.n	8008716 <__ieee754_log+0x26>
 8008734:	4bc3      	ldr	r3, [pc, #780]	; (8008a44 <__ieee754_log+0x354>)
 8008736:	2200      	movs	r2, #0
 8008738:	f7f7 ff6e 	bl	8000618 <__aeabi_dmul>
 800873c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8008740:	460d      	mov	r5, r1
 8008742:	4ac1      	ldr	r2, [pc, #772]	; (8008a48 <__ieee754_log+0x358>)
 8008744:	4295      	cmp	r5, r2
 8008746:	dd06      	ble.n	8008756 <__ieee754_log+0x66>
 8008748:	4602      	mov	r2, r0
 800874a:	460b      	mov	r3, r1
 800874c:	f7f7 fdae 	bl	80002ac <__adddf3>
 8008750:	e7e3      	b.n	800871a <__ieee754_log+0x2a>
 8008752:	2300      	movs	r3, #0
 8008754:	e7f5      	b.n	8008742 <__ieee754_log+0x52>
 8008756:	152c      	asrs	r4, r5, #20
 8008758:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800875c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008760:	441c      	add	r4, r3
 8008762:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8008766:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800876a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800876e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8008772:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8008776:	ea42 0105 	orr.w	r1, r2, r5
 800877a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800877e:	2200      	movs	r2, #0
 8008780:	4bb2      	ldr	r3, [pc, #712]	; (8008a4c <__ieee754_log+0x35c>)
 8008782:	f7f7 fd91 	bl	80002a8 <__aeabi_dsub>
 8008786:	1cab      	adds	r3, r5, #2
 8008788:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800878c:	2b02      	cmp	r3, #2
 800878e:	4682      	mov	sl, r0
 8008790:	468b      	mov	fp, r1
 8008792:	f04f 0200 	mov.w	r2, #0
 8008796:	dc53      	bgt.n	8008840 <__ieee754_log+0x150>
 8008798:	2300      	movs	r3, #0
 800879a:	f7f8 f9a5 	bl	8000ae8 <__aeabi_dcmpeq>
 800879e:	b1d0      	cbz	r0, 80087d6 <__ieee754_log+0xe6>
 80087a0:	2c00      	cmp	r4, #0
 80087a2:	f000 8120 	beq.w	80089e6 <__ieee754_log+0x2f6>
 80087a6:	4620      	mov	r0, r4
 80087a8:	f7f7 fecc 	bl	8000544 <__aeabi_i2d>
 80087ac:	a390      	add	r3, pc, #576	; (adr r3, 80089f0 <__ieee754_log+0x300>)
 80087ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b2:	4606      	mov	r6, r0
 80087b4:	460f      	mov	r7, r1
 80087b6:	f7f7 ff2f 	bl	8000618 <__aeabi_dmul>
 80087ba:	a38f      	add	r3, pc, #572	; (adr r3, 80089f8 <__ieee754_log+0x308>)
 80087bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c0:	4604      	mov	r4, r0
 80087c2:	460d      	mov	r5, r1
 80087c4:	4630      	mov	r0, r6
 80087c6:	4639      	mov	r1, r7
 80087c8:	f7f7 ff26 	bl	8000618 <__aeabi_dmul>
 80087cc:	4602      	mov	r2, r0
 80087ce:	460b      	mov	r3, r1
 80087d0:	4620      	mov	r0, r4
 80087d2:	4629      	mov	r1, r5
 80087d4:	e7ba      	b.n	800874c <__ieee754_log+0x5c>
 80087d6:	a38a      	add	r3, pc, #552	; (adr r3, 8008a00 <__ieee754_log+0x310>)
 80087d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087dc:	4650      	mov	r0, sl
 80087de:	4659      	mov	r1, fp
 80087e0:	f7f7 ff1a 	bl	8000618 <__aeabi_dmul>
 80087e4:	4602      	mov	r2, r0
 80087e6:	460b      	mov	r3, r1
 80087e8:	2000      	movs	r0, #0
 80087ea:	4999      	ldr	r1, [pc, #612]	; (8008a50 <__ieee754_log+0x360>)
 80087ec:	f7f7 fd5c 	bl	80002a8 <__aeabi_dsub>
 80087f0:	4652      	mov	r2, sl
 80087f2:	4606      	mov	r6, r0
 80087f4:	460f      	mov	r7, r1
 80087f6:	465b      	mov	r3, fp
 80087f8:	4650      	mov	r0, sl
 80087fa:	4659      	mov	r1, fp
 80087fc:	f7f7 ff0c 	bl	8000618 <__aeabi_dmul>
 8008800:	4602      	mov	r2, r0
 8008802:	460b      	mov	r3, r1
 8008804:	4630      	mov	r0, r6
 8008806:	4639      	mov	r1, r7
 8008808:	f7f7 ff06 	bl	8000618 <__aeabi_dmul>
 800880c:	4606      	mov	r6, r0
 800880e:	460f      	mov	r7, r1
 8008810:	b914      	cbnz	r4, 8008818 <__ieee754_log+0x128>
 8008812:	4632      	mov	r2, r6
 8008814:	463b      	mov	r3, r7
 8008816:	e0a0      	b.n	800895a <__ieee754_log+0x26a>
 8008818:	4620      	mov	r0, r4
 800881a:	f7f7 fe93 	bl	8000544 <__aeabi_i2d>
 800881e:	a374      	add	r3, pc, #464	; (adr r3, 80089f0 <__ieee754_log+0x300>)
 8008820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008824:	4680      	mov	r8, r0
 8008826:	4689      	mov	r9, r1
 8008828:	f7f7 fef6 	bl	8000618 <__aeabi_dmul>
 800882c:	a372      	add	r3, pc, #456	; (adr r3, 80089f8 <__ieee754_log+0x308>)
 800882e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008832:	4604      	mov	r4, r0
 8008834:	460d      	mov	r5, r1
 8008836:	4640      	mov	r0, r8
 8008838:	4649      	mov	r1, r9
 800883a:	f7f7 feed 	bl	8000618 <__aeabi_dmul>
 800883e:	e0a5      	b.n	800898c <__ieee754_log+0x29c>
 8008840:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008844:	f7f7 fd32 	bl	80002ac <__adddf3>
 8008848:	4602      	mov	r2, r0
 800884a:	460b      	mov	r3, r1
 800884c:	4650      	mov	r0, sl
 800884e:	4659      	mov	r1, fp
 8008850:	f7f8 f80c 	bl	800086c <__aeabi_ddiv>
 8008854:	e9cd 0100 	strd	r0, r1, [sp]
 8008858:	4620      	mov	r0, r4
 800885a:	f7f7 fe73 	bl	8000544 <__aeabi_i2d>
 800885e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008862:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	f7f7 fed5 	bl	8000618 <__aeabi_dmul>
 800886e:	4602      	mov	r2, r0
 8008870:	460b      	mov	r3, r1
 8008872:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008876:	f7f7 fecf 	bl	8000618 <__aeabi_dmul>
 800887a:	a363      	add	r3, pc, #396	; (adr r3, 8008a08 <__ieee754_log+0x318>)
 800887c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008880:	4680      	mov	r8, r0
 8008882:	4689      	mov	r9, r1
 8008884:	f7f7 fec8 	bl	8000618 <__aeabi_dmul>
 8008888:	a361      	add	r3, pc, #388	; (adr r3, 8008a10 <__ieee754_log+0x320>)
 800888a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888e:	f7f7 fd0d 	bl	80002ac <__adddf3>
 8008892:	4642      	mov	r2, r8
 8008894:	464b      	mov	r3, r9
 8008896:	f7f7 febf 	bl	8000618 <__aeabi_dmul>
 800889a:	a35f      	add	r3, pc, #380	; (adr r3, 8008a18 <__ieee754_log+0x328>)
 800889c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a0:	f7f7 fd04 	bl	80002ac <__adddf3>
 80088a4:	4642      	mov	r2, r8
 80088a6:	464b      	mov	r3, r9
 80088a8:	f7f7 feb6 	bl	8000618 <__aeabi_dmul>
 80088ac:	a35c      	add	r3, pc, #368	; (adr r3, 8008a20 <__ieee754_log+0x330>)
 80088ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b2:	f7f7 fcfb 	bl	80002ac <__adddf3>
 80088b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088ba:	f7f7 fead 	bl	8000618 <__aeabi_dmul>
 80088be:	a35a      	add	r3, pc, #360	; (adr r3, 8008a28 <__ieee754_log+0x338>)
 80088c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088c8:	4640      	mov	r0, r8
 80088ca:	4649      	mov	r1, r9
 80088cc:	f7f7 fea4 	bl	8000618 <__aeabi_dmul>
 80088d0:	a357      	add	r3, pc, #348	; (adr r3, 8008a30 <__ieee754_log+0x340>)
 80088d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d6:	f7f7 fce9 	bl	80002ac <__adddf3>
 80088da:	4642      	mov	r2, r8
 80088dc:	464b      	mov	r3, r9
 80088de:	f7f7 fe9b 	bl	8000618 <__aeabi_dmul>
 80088e2:	a355      	add	r3, pc, #340	; (adr r3, 8008a38 <__ieee754_log+0x348>)
 80088e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e8:	f7f7 fce0 	bl	80002ac <__adddf3>
 80088ec:	4642      	mov	r2, r8
 80088ee:	464b      	mov	r3, r9
 80088f0:	f7f7 fe92 	bl	8000618 <__aeabi_dmul>
 80088f4:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 80088f8:	4602      	mov	r2, r0
 80088fa:	460b      	mov	r3, r1
 80088fc:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8008900:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008904:	f7f7 fcd2 	bl	80002ac <__adddf3>
 8008908:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800890c:	3551      	adds	r5, #81	; 0x51
 800890e:	4335      	orrs	r5, r6
 8008910:	2d00      	cmp	r5, #0
 8008912:	4680      	mov	r8, r0
 8008914:	4689      	mov	r9, r1
 8008916:	dd48      	ble.n	80089aa <__ieee754_log+0x2ba>
 8008918:	2200      	movs	r2, #0
 800891a:	4b4d      	ldr	r3, [pc, #308]	; (8008a50 <__ieee754_log+0x360>)
 800891c:	4650      	mov	r0, sl
 800891e:	4659      	mov	r1, fp
 8008920:	f7f7 fe7a 	bl	8000618 <__aeabi_dmul>
 8008924:	4652      	mov	r2, sl
 8008926:	465b      	mov	r3, fp
 8008928:	f7f7 fe76 	bl	8000618 <__aeabi_dmul>
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	4606      	mov	r6, r0
 8008932:	460f      	mov	r7, r1
 8008934:	4640      	mov	r0, r8
 8008936:	4649      	mov	r1, r9
 8008938:	f7f7 fcb8 	bl	80002ac <__adddf3>
 800893c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008940:	f7f7 fe6a 	bl	8000618 <__aeabi_dmul>
 8008944:	4680      	mov	r8, r0
 8008946:	4689      	mov	r9, r1
 8008948:	b964      	cbnz	r4, 8008964 <__ieee754_log+0x274>
 800894a:	4602      	mov	r2, r0
 800894c:	460b      	mov	r3, r1
 800894e:	4630      	mov	r0, r6
 8008950:	4639      	mov	r1, r7
 8008952:	f7f7 fca9 	bl	80002a8 <__aeabi_dsub>
 8008956:	4602      	mov	r2, r0
 8008958:	460b      	mov	r3, r1
 800895a:	4650      	mov	r0, sl
 800895c:	4659      	mov	r1, fp
 800895e:	f7f7 fca3 	bl	80002a8 <__aeabi_dsub>
 8008962:	e6da      	b.n	800871a <__ieee754_log+0x2a>
 8008964:	a322      	add	r3, pc, #136	; (adr r3, 80089f0 <__ieee754_log+0x300>)
 8008966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800896e:	f7f7 fe53 	bl	8000618 <__aeabi_dmul>
 8008972:	a321      	add	r3, pc, #132	; (adr r3, 80089f8 <__ieee754_log+0x308>)
 8008974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008978:	4604      	mov	r4, r0
 800897a:	460d      	mov	r5, r1
 800897c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008980:	f7f7 fe4a 	bl	8000618 <__aeabi_dmul>
 8008984:	4642      	mov	r2, r8
 8008986:	464b      	mov	r3, r9
 8008988:	f7f7 fc90 	bl	80002ac <__adddf3>
 800898c:	4602      	mov	r2, r0
 800898e:	460b      	mov	r3, r1
 8008990:	4630      	mov	r0, r6
 8008992:	4639      	mov	r1, r7
 8008994:	f7f7 fc88 	bl	80002a8 <__aeabi_dsub>
 8008998:	4652      	mov	r2, sl
 800899a:	465b      	mov	r3, fp
 800899c:	f7f7 fc84 	bl	80002a8 <__aeabi_dsub>
 80089a0:	4602      	mov	r2, r0
 80089a2:	460b      	mov	r3, r1
 80089a4:	4620      	mov	r0, r4
 80089a6:	4629      	mov	r1, r5
 80089a8:	e7d9      	b.n	800895e <__ieee754_log+0x26e>
 80089aa:	4602      	mov	r2, r0
 80089ac:	460b      	mov	r3, r1
 80089ae:	4650      	mov	r0, sl
 80089b0:	4659      	mov	r1, fp
 80089b2:	f7f7 fc79 	bl	80002a8 <__aeabi_dsub>
 80089b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089ba:	f7f7 fe2d 	bl	8000618 <__aeabi_dmul>
 80089be:	4606      	mov	r6, r0
 80089c0:	460f      	mov	r7, r1
 80089c2:	2c00      	cmp	r4, #0
 80089c4:	f43f af25 	beq.w	8008812 <__ieee754_log+0x122>
 80089c8:	a309      	add	r3, pc, #36	; (adr r3, 80089f0 <__ieee754_log+0x300>)
 80089ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089d2:	f7f7 fe21 	bl	8000618 <__aeabi_dmul>
 80089d6:	a308      	add	r3, pc, #32	; (adr r3, 80089f8 <__ieee754_log+0x308>)
 80089d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089dc:	4604      	mov	r4, r0
 80089de:	460d      	mov	r5, r1
 80089e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089e4:	e729      	b.n	800883a <__ieee754_log+0x14a>
 80089e6:	2000      	movs	r0, #0
 80089e8:	2100      	movs	r1, #0
 80089ea:	e696      	b.n	800871a <__ieee754_log+0x2a>
 80089ec:	f3af 8000 	nop.w
 80089f0:	fee00000 	.word	0xfee00000
 80089f4:	3fe62e42 	.word	0x3fe62e42
 80089f8:	35793c76 	.word	0x35793c76
 80089fc:	3dea39ef 	.word	0x3dea39ef
 8008a00:	55555555 	.word	0x55555555
 8008a04:	3fd55555 	.word	0x3fd55555
 8008a08:	df3e5244 	.word	0xdf3e5244
 8008a0c:	3fc2f112 	.word	0x3fc2f112
 8008a10:	96cb03de 	.word	0x96cb03de
 8008a14:	3fc74664 	.word	0x3fc74664
 8008a18:	94229359 	.word	0x94229359
 8008a1c:	3fd24924 	.word	0x3fd24924
 8008a20:	55555593 	.word	0x55555593
 8008a24:	3fe55555 	.word	0x3fe55555
 8008a28:	d078c69f 	.word	0xd078c69f
 8008a2c:	3fc39a09 	.word	0x3fc39a09
 8008a30:	1d8e78af 	.word	0x1d8e78af
 8008a34:	3fcc71c5 	.word	0x3fcc71c5
 8008a38:	9997fa04 	.word	0x9997fa04
 8008a3c:	3fd99999 	.word	0x3fd99999
 8008a40:	c3500000 	.word	0xc3500000
 8008a44:	43500000 	.word	0x43500000
 8008a48:	7fefffff 	.word	0x7fefffff
 8008a4c:	3ff00000 	.word	0x3ff00000
 8008a50:	3fe00000 	.word	0x3fe00000

08008a54 <matherr>:
 8008a54:	2000      	movs	r0, #0
 8008a56:	4770      	bx	lr

08008a58 <nan>:
 8008a58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008a60 <nan+0x8>
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	00000000 	.word	0x00000000
 8008a64:	7ff80000 	.word	0x7ff80000

08008a68 <_init>:
 8008a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a6a:	bf00      	nop
 8008a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a6e:	bc08      	pop	{r3}
 8008a70:	469e      	mov	lr, r3
 8008a72:	4770      	bx	lr

08008a74 <_fini>:
 8008a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a76:	bf00      	nop
 8008a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a7a:	bc08      	pop	{r3}
 8008a7c:	469e      	mov	lr, r3
 8008a7e:	4770      	bx	lr
